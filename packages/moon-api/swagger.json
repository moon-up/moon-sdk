{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"AavePoolAPIResponse_any_": {
				"description": "Represents the structure of the response from the Aave Pool API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AavePoolTransaction": {
				"description": "Represents a transaction in the Aave V3 Pool.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data associated with the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value of the transaction."
					},
					"to": {
						"type": "string",
						"description": "The address of the recipient."
					},
					"from": {
						"type": "string",
						"description": "The address of the sender."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction (optional)."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction (optional)."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas for the transaction (optional)."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas for the transaction (optional)."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce of the transaction."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of the transaction (optional)."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID of the transaction."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SimulateAssetType": {
				"description": "Asset type returned when calling {@link TransactNamespace.simulateAssetChanges }.\nAllows you to determine if the assets approved or / and transferred are\nnative, tokens or NFTs.",
				"enum": [
					"NATIVE",
					"ERC20",
					"ERC721",
					"ERC1155",
					"SPECIAL_NFT"
				],
				"type": "string"
			},
			"SimulateChangeType": {
				"description": "Change type returned when calling {@link TransactNamespace.simulateAssetChanges }.",
				"enum": [
					"APPROVE",
					"TRANSFER"
				],
				"type": "string"
			},
			"SimulateAssetChangesChange": {
				"description": "Represents an asset change from a call to\n{@link TransactNamespace.simulateAssetChanges }.",
				"properties": {
					"assetType": {
						"$ref": "#/components/schemas/SimulateAssetType",
						"description": "The type of asset from the transaction."
					},
					"changeType": {
						"$ref": "#/components/schemas/SimulateChangeType",
						"description": "The type of change from the transaction."
					},
					"from": {
						"type": "string",
						"description": "The from address."
					},
					"to": {
						"type": "string",
						"description": "The to address."
					},
					"rawAmount": {
						"type": "string",
						"description": "The raw amount as an integer string. Only available on TRANSFER changes for\nNATIVE and ERC20 assets, or ERC721/ERC1155 disapprove changes (field set to\n'0')."
					},
					"amount": {
						"type": "string",
						"description": "The amount as an integer string. This value is calculated by applying the\n`decimals` field to the `rawAmount` field. Only available on TRANSFER\nchanges for NATIVE and ERC20 assets, or ERC721/ERC1155 disapprove changes\n(field set to '0')."
					},
					"name": {
						"type": "string",
						"description": "The name of the asset transferred, if available."
					},
					"symbol": {
						"type": "string",
						"description": "The symbol of the asset transferred if available."
					},
					"decimals": {
						"type": "number",
						"format": "double",
						"description": "The number of decimals used by the ERC20 token. Set to 0 for APPROVE\nchanges. Field is undefined if it's not defined in the contract and not\navailable from other sources."
					},
					"contractAddress": {
						"type": "string",
						"description": "The contract address of the asset. Only applicable to ERC20, ERC721,\nERC1155, NFT and SPECIAL_NFT transactions."
					},
					"logo": {
						"type": "string",
						"description": "URL for the logo of the asset, if available. Only applicable to ERC20 transactions."
					},
					"tokenId": {
						"type": "string",
						"description": "The token id of the asset transferred. Only applicable to ERC721,\nERC1155 and SPECIAL_NFT NFTs."
					}
				},
				"required": [
					"assetType",
					"changeType",
					"from",
					"to"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SimulateAssetChangesError": {
				"description": "The error field returned in a {@link SimulateAssetChangesResponse} if the\nsimulation failed.",
				"properties": {
					"message": {
						"type": "string",
						"description": "The error message."
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SimulateAssetChangesResponse": {
				"description": "Response object for the {@link TransactNamespace.simulateAssetChanges } method.",
				"properties": {
					"changes": {
						"items": {
							"$ref": "#/components/schemas/SimulateAssetChangesChange"
						},
						"type": "array",
						"description": "An array of asset changes that resulted from the transaction."
					},
					"gasUsed": {
						"type": "string",
						"description": "The amount of gas used by the transaction represented as a hex string. The\nfield is undefined if an error occurred."
					},
					"error": {
						"$ref": "#/components/schemas/SimulateAssetChangesError",
						"description": "Optional error field that is present if an error occurred."
					}
				},
				"required": [
					"changes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Tx": {
				"description": "Represents a transaction object.",
				"properties": {
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of the transaction."
					},
					"chain_id": {
						"type": "number",
						"format": "double",
						"description": "The chain ID of the blockchain network."
					},
					"data": {
						"type": "string",
						"description": "The data payload of the transaction."
					},
					"gas": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"gas_price": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"gas_tip_cap": {
						"type": "string",
						"nullable": true,
						"description": "The gas tip cap for the transaction, used in EIP-1559 transactions."
					},
					"gas_fee_cap": {
						"type": "string",
						"nullable": true,
						"description": "The gas fee cap for the transaction, used in EIP-1559 transactions."
					},
					"value": {
						"type": "string",
						"description": "The value to be transferred in the transaction."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce of the transaction."
					},
					"from": {
						"type": "string",
						"description": "The address of the sender."
					},
					"to": {
						"type": "string",
						"nullable": true,
						"description": "The address of the recipient."
					},
					"blob_gas": {
						"type": "string",
						"nullable": true,
						"description": "The gas used for blob transactions."
					},
					"blob_gas_fee_cap": {
						"type": "string",
						"nullable": true,
						"description": "The gas fee cap for blob transactions."
					},
					"blob_hashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "The hashes of the blobs included in the transaction."
					},
					"v": {
						"type": "string",
						"description": "The recovery id of the transaction."
					},
					"r": {
						"type": "string",
						"description": "The signature r value of the transaction."
					},
					"s": {
						"type": "string",
						"description": "The signature s value of the transaction."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"TransactionRequest": {
				"description": "Represents a request to perform a transaction.",
				"properties": {
					"nonce": {
						"type": "string",
						"description": "A unique identifier for the transaction."
					},
					"data": {
						"type": "string",
						"description": "The data to be sent with the transaction."
					},
					"value": {
						"type": "string",
						"description": "The amount of value to be transferred."
					},
					"to": {
						"type": "string",
						"description": "The address to which the transaction is directed."
					},
					"from": {
						"type": "string",
						"description": "The address from which the transaction is sent."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas unit that the sender is willing to pay."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas unit that the sender is willing to pay."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"TransactionData": {
				"description": "Represents the data associated with a transaction.",
				"properties": {
					"moon_scan_url": {
						"type": "string",
						"description": "The URL to view the transaction on MoonScan."
					},
					"transaction_hash": {
						"type": "string",
						"description": "The hash of the transaction."
					},
					"signed_transaction": {
						"type": "string",
						"description": "The signed transaction data."
					},
					"signed_message": {
						"type": "string",
						"description": "The signed message associated with the transaction."
					},
					"raw_transaction": {
						"type": "string",
						"description": "The raw transaction data."
					},
					"signature": {
						"type": "string",
						"description": "The signature of the transaction."
					},
					"transaction": {
						"$ref": "#/components/schemas/Tx",
						"description": "The transaction details."
					},
					"userOps": {
						"items": {
							"$ref": "#/components/schemas/TransactionRequest"
						},
						"type": "array",
						"description": "The list of user operations associated with the transaction."
					},
					"userop_transaction": {
						"type": "string",
						"description": "The user operation transaction data."
					}
				},
				"required": [
					"transaction_hash",
					"signed_transaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BroadCastRawTransactionResponse": {
				"description": "Represents the response from broadcasting a raw transaction.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the transaction was successful."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the transaction."
					},
					"data": {
						"type": "string",
						"description": "The transaction hash."
					}
				},
				"required": [
					"success",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Transaction": {
				"description": "Represents a transaction with various optional properties.",
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "The simulation response of asset changes."
					},
					"transaction_hash": {
						"type": "string",
						"description": "The hash of the transaction."
					},
					"signed_transaction": {
						"type": "string",
						"description": "The signed transaction data."
					},
					"raw_transaction": {
						"type": "string",
						"description": "The raw transaction data."
					},
					"data": {
						"type": "string",
						"nullable": true,
						"description": "Additional data related to the transaction.\nReplace with the actual type if known."
					},
					"transactions": {
						"items": {
							"$ref": "#/components/schemas/TransactionData"
						},
						"type": "array",
						"description": "An array of transaction data."
					},
					"moon_scan_url": {
						"type": "string",
						"description": "The URL to the transaction on MoonScan."
					},
					"signature": {
						"type": "string",
						"description": "The signature of the transaction."
					},
					"transaction": {
						"$ref": "#/components/schemas/Tx",
						"description": "The transaction details."
					},
					"userOps": {
						"items": {
							"$ref": "#/components/schemas/TransactionRequest"
						},
						"type": "array",
						"description": "An array of user operation requests."
					},
					"userop_transaction": {
						"type": "string",
						"description": "The user operation transaction data."
					},
					"user_op": {
						"type": "string",
						"description": "The user operation data."
					},
					"success": {
						"type": "boolean",
						"description": "Indicates whether the transaction was successful."
					},
					"message": {
						"type": "string",
						"description": "A message related to the transaction."
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "The response after broadcasting the raw transaction."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AavePoolExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "Optional response from simulating asset changes."
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "Optional response indicating whether the transaction was broadcasted."
					},
					"message": {
						"type": "string",
						"description": "Optional message providing additional information about the execution."
					},
					"success": {
						"type": "boolean",
						"description": "Indicates whether the function execution was successful."
					},
					"user_op": {
						"type": "string",
						"description": "Optional user operation identifier."
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "Optional data related to the transaction."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters passed to the function."
					},
					"function": {
						"type": "string",
						"description": "The name of the function that was executed."
					},
					"transaction": {
						"$ref": "#/components/schemas/AavePoolTransaction",
						"description": "The transaction associated with the function execution."
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object",
				"description": "Represents the result of executing a function on the Aave pool."
			},
			"AavePoolAPIResponse_AavePoolExecuteFunctionResult_": {
				"description": "Represents the structure of the response from the Aave Pool API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"$ref": "#/components/schemas/AavePoolExecuteFunctionResult",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AccessTuple": {
				"description": "Represents a tuple containing access information.",
				"properties": {
					"address": {
						"type": "string",
						"description": "The address associated with the access tuple."
					},
					"storageKeys": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "An array of storage keys related to the address."
					}
				},
				"required": [
					"address",
					"storageKeys"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenAmount": {
				"description": "Represents an amount of a specific token.",
				"properties": {
					"tokenAddress": {
						"type": "string",
						"description": "The address of the token."
					},
					"amount": {
						"type": "string",
						"description": "The amount of the token."
					}
				},
				"required": [
					"tokenAddress",
					"amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenProportion": {
				"description": "Represents the proportion of a specific token.",
				"properties": {
					"tokenAddress": {
						"type": "string",
						"description": "The address of the token."
					},
					"proportion": {
						"type": "number",
						"format": "double",
						"description": "The proportion of the token, typically represented as a percentage or a fraction."
					}
				},
				"required": [
					"tokenAddress",
					"proportion"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AavePoolInputBody": {
				"description": "Interface representing the input body for Aave pool transactions.\nExtends the InputBody interface.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"data": {
						"type": "string",
						"description": "The data payload for the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value of the transaction."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce for the transaction."
					},
					"simulate": {
						"type": "boolean",
						"description": "Indicates if the transaction should be simulated."
					},
					"gas": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Indicates if the transaction is a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Indicates if the transaction is from an externally owned account."
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address involved in the transaction."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Indicates if the transaction should be broadcasted."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Indicates if the nonce should always be incremented."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount involved in the transaction."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode for the transaction."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code for the transaction."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Indicates if the asset should be used as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Indicates if the AToken should be received."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"PoolAddressProviderAPIResponse_string_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PoolAddressProviderTransaction": {
				"properties": {
					"data": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"to": {
						"type": "string"
					},
					"from": {
						"type": "string"
					},
					"gasPrice": {
						"type": "string"
					},
					"gasLimit": {
						"type": "string"
					},
					"maxPriorityFeePerGas": {
						"type": "string"
					},
					"maxFeePerGas": {
						"type": "string"
					},
					"nonce": {
						"type": "number",
						"format": "double"
					},
					"type": {
						"type": "number",
						"format": "double"
					},
					"chainId": {
						"type": "string"
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PoolAddressProviderExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse"
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse"
					},
					"message": {
						"type": "string"
					},
					"success": {
						"type": "boolean"
					},
					"user_op": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/Transaction"
					},
					"params": {
						"items": {},
						"type": "array"
					},
					"function": {
						"type": "string"
					},
					"transaction": {
						"$ref": "#/components/schemas/PoolAddressProviderTransaction"
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object"
			},
			"PoolAddressProviderAPIResponse_PoolAddressProviderExecuteFunctionResult_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/PoolAddressProviderExecuteFunctionResult"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PoolAddressProviderInputBody": {
				"description": "Interface representing the input body for the Pool Address Provider.\nExtends the InputBody interface.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"data": {
						"type": "string",
						"description": "The data to be sent."
					},
					"value": {
						"type": "string",
						"description": "The value to be sent."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce for the transaction."
					},
					"simulate": {
						"type": "boolean",
						"description": "Whether to simulate the transaction."
					},
					"gas": {
						"type": "string",
						"description": "The gas for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Whether to perform a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Whether the transaction is from an externally owned account."
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Whether to broadcast the transaction."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Whether to always increment the nonce."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount involved in the transaction."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					},
					"newAddress": {
						"type": "string"
					},
					"newMarketId": {
						"type": "string"
					},
					"newImplementationAddress": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"PoolAddressProviderRegistryAPIResponse_string_": {
				"description": "Represents the API response structure for the Pool Address Provider Registry.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"type": "string",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PoolAddressProviderRegistryAPIResponse_any-Array_": {
				"description": "Represents the API response structure for the Pool Address Provider Registry.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"items": {},
						"type": "array",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3RewardsAPIResponse_string-Array_": {
				"description": "Represents the structure of the API response for AAVE v3 rewards.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3RewardsAPIResponse_string_": {
				"description": "Represents the structure of the API response for AAVE v3 rewards.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"type": "string",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3RewardsTransaction": {
				"description": "Represents a transaction for AAVE v3 rewards.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data payload of the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value to be transferred in the transaction, in wei."
					},
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"from": {
						"type": "string",
						"description": "The sender address of the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction, in wei.\nOptional."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction.\nOptional."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas for the transaction, in wei.\nOptional."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas for the transaction, in wei.\nOptional."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce of the transaction."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of the transaction.\nOptional."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID of the network where the transaction is sent."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3RewardsExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "Optional response from simulating asset changes."
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "Optional response from broadcasting the raw transaction."
					},
					"message": {
						"type": "string",
						"description": "Optional message providing additional information about the execution result."
					},
					"success": {
						"type": "boolean",
						"description": "Optional flag indicating whether the function execution was successful."
					},
					"user_op": {
						"type": "string",
						"description": "Optional user operation identifier."
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "Optional transaction data."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters passed to the executed function."
					},
					"function": {
						"type": "string",
						"description": "The name of the executed function."
					},
					"transaction": {
						"$ref": "#/components/schemas/AAVEv3RewardsTransaction",
						"description": "The transaction details of the executed function."
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object",
				"description": "Represents the result of executing a function in the AAVE v3 rewards wrapper."
			},
			"AAVEv3RewardsAPIResponse_AAVEv3RewardsExecuteFunctionResult_": {
				"description": "Represents the structure of the API response for AAVE v3 rewards.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"$ref": "#/components/schemas/AAVEv3RewardsExecuteFunctionResult",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3RewardsInputBody": {
				"description": "Interface representing the input body for AAVE v3 rewards.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"data": {
						"type": "string",
						"description": "The data to be sent with the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value of the transaction."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The transaction nonce."
					},
					"simulate": {
						"type": "boolean",
						"description": "Whether to simulate the transaction."
					},
					"gas": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Flag to indicate if the transaction is a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Flag to indicate if the transaction is from an externally owned account."
					},
					"contract_address": {
						"type": "string",
						"description": "The address of the contract."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Flag to indicate if the transaction should be broadcasted."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Flag to indicate if the nonce should always be incremented."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount of tokens."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The list of asset addresses."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user address."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					},
					"reward": {
						"type": "string",
						"description": "The reward address."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"BigNumber": {},
			"RewardInfo": {
				"description": "Interface representing the reward information for a token.",
				"properties": {
					"rewardTokenSymbol": {
						"type": "string",
						"description": "The symbol of the reward token."
					},
					"rewardTokenAddress": {
						"type": "string",
						"description": "The address of the reward token."
					},
					"rewardOracleAddress": {
						"type": "string",
						"description": "The address of the reward oracle."
					},
					"emissionPerSecond": {
						"$ref": "#/components/schemas/BigNumber",
						"description": "The emission rate of the reward token per second."
					},
					"incentivesLastUpdateTimestamp": {
						"$ref": "#/components/schemas/BigNumber",
						"description": "The timestamp of the last update to the incentives."
					},
					"tokenIncentivesIndex": {
						"$ref": "#/components/schemas/BigNumber",
						"description": "The index of the token incentives."
					},
					"emissionEndTimestamp": {
						"$ref": "#/components/schemas/BigNumber",
						"description": "The timestamp when the emission ends."
					},
					"rewardPriceFeed": {
						"$ref": "#/components/schemas/BigNumber",
						"description": "The price feed of the reward token."
					},
					"rewardTokenDecimals": {
						"type": "number",
						"format": "double",
						"description": "The number of decimals of the reward token."
					},
					"precision": {
						"type": "number",
						"format": "double",
						"description": "The precision of the reward token."
					},
					"priceFeedDecimals": {
						"type": "number",
						"format": "double",
						"description": "The number of decimals of the price feed."
					}
				},
				"required": [
					"rewardTokenSymbol",
					"rewardTokenAddress",
					"rewardOracleAddress",
					"emissionPerSecond",
					"incentivesLastUpdateTimestamp",
					"tokenIncentivesIndex",
					"emissionEndTimestamp",
					"rewardPriceFeed",
					"rewardTokenDecimals",
					"precision",
					"priceFeedDecimals"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IncentiveData": {
				"description": "Interface representing the incentive data for a token.",
				"properties": {
					"tokenAddress": {
						"type": "string",
						"description": "The address of the token."
					},
					"incentiveControllerAddress": {
						"type": "string",
						"description": "The address of the incentive controller."
					},
					"rewardsTokenInformation": {
						"items": {
							"$ref": "#/components/schemas/RewardInfo"
						},
						"type": "array",
						"description": "An array of reward information objects."
					}
				},
				"required": [
					"tokenAddress",
					"incentiveControllerAddress",
					"rewardsTokenInformation"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AggregatedReserveIncentiveData": {
				"description": "Interface representing the aggregated reserve incentive data.",
				"properties": {
					"underlyingAsset": {
						"type": "string",
						"description": "The address of the underlying asset."
					},
					"aIncentiveData": {
						"$ref": "#/components/schemas/IncentiveData",
						"description": "The incentive data for the aToken."
					},
					"vIncentiveData": {
						"$ref": "#/components/schemas/IncentiveData",
						"description": "The incentive data for the variable debt token."
					},
					"sIncentiveData": {
						"$ref": "#/components/schemas/IncentiveData",
						"description": "The incentive data for the stable debt token."
					}
				},
				"required": [
					"underlyingAsset",
					"aIncentiveData",
					"vIncentiveData",
					"sIncentiveData"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserRewardInfo": {
				"description": "Interface representing the reward information for a user.",
				"properties": {
					"rewardTokenSymbol": {
						"type": "string",
						"description": "The symbol of the reward token."
					},
					"rewardOracleAddress": {
						"type": "string",
						"description": "The address of the reward oracle."
					},
					"rewardTokenAddress": {
						"type": "string",
						"description": "The address of the reward token."
					},
					"userUnclaimedRewards": {
						"$ref": "#/components/schemas/BigNumber",
						"description": "The amount of unclaimed rewards for the user."
					},
					"tokenIncentivesUserIndex": {
						"$ref": "#/components/schemas/BigNumber",
						"description": "The user's index for token incentives."
					},
					"rewardPriceFeed": {
						"$ref": "#/components/schemas/BigNumber",
						"description": "The price feed of the reward."
					},
					"priceFeedDecimals": {
						"type": "number",
						"format": "double",
						"description": "The number of decimals for the price feed."
					},
					"rewardTokenDecimals": {
						"type": "number",
						"format": "double",
						"description": "The number of decimals for the reward token."
					}
				},
				"required": [
					"rewardTokenSymbol",
					"rewardOracleAddress",
					"rewardTokenAddress",
					"userUnclaimedRewards",
					"tokenIncentivesUserIndex",
					"rewardPriceFeed",
					"priceFeedDecimals",
					"rewardTokenDecimals"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserIncentiveData": {
				"description": "Represents the incentive data for a user.",
				"properties": {
					"tokenAddress": {
						"type": "string",
						"description": "The address of the token."
					},
					"incentiveControllerAddress": {
						"type": "string",
						"description": "The address of the incentive controller."
					},
					"userRewardsInformation": {
						"items": {
							"$ref": "#/components/schemas/UserRewardInfo"
						},
						"type": "array",
						"description": "An array of user rewards information."
					}
				},
				"required": [
					"tokenAddress",
					"incentiveControllerAddress",
					"userRewardsInformation"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserReserveIncentiveData": {
				"description": "Interface representing the incentive data for a user's reserve.",
				"properties": {
					"underlyingAsset": {
						"type": "string",
						"description": "The underlying asset associated with the reserve."
					},
					"aTokenIncentivesUserData": {
						"$ref": "#/components/schemas/UserIncentiveData",
						"description": "Incentive data for the user's aToken."
					},
					"vTokenIncentivesUserData": {
						"$ref": "#/components/schemas/UserIncentiveData",
						"description": "Incentive data for the user's vToken."
					},
					"sTokenIncentivesUserData": {
						"$ref": "#/components/schemas/UserIncentiveData",
						"description": "Incentive data for the user's sToken."
					}
				},
				"required": [
					"underlyingAsset",
					"aTokenIncentivesUserData",
					"vTokenIncentivesUserData",
					"sTokenIncentivesUserData"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FullReservesIncentiveData": {
				"description": "Interface representing the full reserves incentive data.",
				"properties": {
					"reservesIncentiveData": {
						"items": {
							"$ref": "#/components/schemas/AggregatedReserveIncentiveData"
						},
						"type": "array",
						"description": "The aggregated reserve incentive data."
					},
					"userReserveIncentiveData": {
						"items": {
							"$ref": "#/components/schemas/UserReserveIncentiveData"
						},
						"type": "array",
						"description": "The user reserve incentive data."
					}
				},
				"required": [
					"reservesIncentiveData",
					"userReserveIncentiveData"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3UiIncentiveDataProviderAPIResponse_FullReservesIncentiveData_": {
				"description": "Represents the structure of the API response from the AAVE v3 UI Incentive Data Provider.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"$ref": "#/components/schemas/FullReservesIncentiveData",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3UiIncentiveDataProviderAPIResponse_AggregatedReserveIncentiveData-Array_": {
				"description": "Represents the structure of the API response from the AAVE v3 UI Incentive Data Provider.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/AggregatedReserveIncentiveData"
						},
						"type": "array",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3UiIncentiveDataProviderAPIResponse_UserReserveIncentiveData-Array_": {
				"description": "Represents the structure of the API response from the AAVE v3 UI Incentive Data Provider.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/UserReserveIncentiveData"
						},
						"type": "array",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3UiPoolDataProviderAPIResponse_string_": {
				"description": "Interface representing the API response from AAVE v3 UI Pool Data Provider.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API call was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API call."
					},
					"data": {
						"type": "string",
						"description": "The data returned by the API call, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3UiPoolDataProviderAPIResponse_any_": {
				"description": "Interface representing the API response from AAVE v3 UI Pool Data Provider.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API call was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API call."
					},
					"data": {
						"description": "The data returned by the API call, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3UiPoolDataProviderAPIResponse_string-Array_": {
				"description": "Interface representing the API response from AAVE v3 UI Pool Data Provider.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API call was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API call."
					},
					"data": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The data returned by the API call, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserReserveData": {
				"description": "Interface representing the data of a user's reserve in the Aave V3 protocol.",
				"properties": {
					"underlyingAsset": {
						"type": "string",
						"description": "The address of the underlying asset."
					},
					"scaledATokenBalance": {
						"$ref": "#/components/schemas/BigNumber",
						"description": "The scaled balance of the aToken."
					},
					"usageAsCollateralEnabledOnUser": {
						"type": "boolean",
						"description": "Indicates if the asset is being used as collateral by the user."
					},
					"stableBorrowRate": {
						"$ref": "#/components/schemas/BigNumber",
						"description": "The stable borrow rate of the user."
					},
					"scaledVariableDebt": {
						"$ref": "#/components/schemas/BigNumber",
						"description": "The scaled variable debt of the user."
					},
					"principalStableDebt": {
						"$ref": "#/components/schemas/BigNumber",
						"description": "The principal stable debt of the user."
					},
					"stableBorrowLastUpdateTimestamp": {
						"$ref": "#/components/schemas/BigNumber",
						"description": "The timestamp of the last update to the stable borrow rate."
					}
				},
				"required": [
					"underlyingAsset",
					"scaledATokenBalance",
					"usageAsCollateralEnabledOnUser",
					"stableBorrowRate",
					"scaledVariableDebt",
					"principalStableDebt",
					"stableBorrowLastUpdateTimestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3UiPoolDataProviderAPIResponse_UserReserveData-Array_": {
				"description": "Interface representing the API response from AAVE v3 UI Pool Data Provider.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API call was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API call."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/UserReserveData"
						},
						"type": "array",
						"description": "The data returned by the API call, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3WalletBalanceProviderAPIResponse_string_": {
				"description": "Represents the response from the AAVE v3 Wallet Balance Provider API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API call was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API call."
					},
					"data": {
						"type": "string",
						"description": "The data returned by the API call, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3WalletBalanceProviderAPIResponse_string-Array_": {
				"description": "Represents the response from the AAVE v3 Wallet Balance Provider API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API call was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API call."
					},
					"data": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The data returned by the API call, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AAVEv3WalletBalanceProviderAPIResponse__tokens-string-Array--balances-string-Array--__": {
				"description": "Represents the response from the AAVE v3 Wallet Balance Provider API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API call was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API call."
					},
					"data": {
						"properties": {
							"balances": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"tokens": {
								"items": {
									"type": "string"
								},
								"type": "array"
							}
						},
						"required": [
							"balances",
							"tokens"
						],
						"type": "object",
						"description": "The data returned by the API call, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AccountData": {
				"description": "Represents the data associated with an account.",
				"properties": {
					"keys": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "An optional array of keys associated with the account."
					},
					"address": {
						"type": "string",
						"description": "An optional address of the account."
					},
					"private_key": {
						"type": "string",
						"description": "An optional private key of the account."
					},
					"public_key": {
						"type": "string",
						"description": "An optional public key of the account."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AccountResponse": {
				"description": "Represents the response structure for an account.",
				"properties": {
					"keys": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Optional array of keys associated with the account."
					},
					"address": {
						"type": "string",
						"description": "Optional address of the account."
					},
					"private_key": {
						"type": "string",
						"description": "Optional private key of the account."
					},
					"public_key": {
						"type": "string",
						"description": "Optional public key of the account."
					},
					"data": {
						"$ref": "#/components/schemas/AccountData",
						"description": "Data associated with the account."
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InputBody": {
				"description": "Represents the body of an input request.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"data": {
						"type": "string",
						"description": "The data to be sent."
					},
					"value": {
						"type": "string",
						"description": "The value to be sent."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce for the transaction."
					},
					"simulate": {
						"type": "boolean",
						"description": "Whether to simulate the transaction."
					},
					"gas": {
						"type": "string",
						"description": "The gas for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Whether to perform a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Whether the transaction is from an externally owned account."
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Whether to broadcast the transaction."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Whether to always increment the nonce."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount involved in the transaction."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AccountAPIResponse": {
				"description": "Interface representing the response from the Account API.\nExtends the BaseAPIResponse to include additional data specific to account responses.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/AccountResponse",
						"description": "The account response data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateAccountInput": {
				"description": "Interface representing the input required to create an account.",
				"properties": {
					"private_key": {
						"type": "string",
						"description": "An optional private key for the account."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"NonceResponse": {
				"properties": {
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce of the account."
					}
				},
				"required": [
					"nonce"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NonceAPIResponse": {
				"description": "Represents the response from the API that includes a nonce.\nExtends the BaseAPIResponse to include additional data specific to nonce responses.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/NonceResponse",
						"description": "The data associated with the nonce response."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BalanceResponse": {
				"properties": {
					"balance": {
						"type": "string",
						"description": "The balance of the account."
					}
				},
				"required": [
					"balance"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BalanceAPIResponse": {
				"description": "Represents the response from the Balance API.\nExtends the BaseAPIResponse to include additional data specific to balance information.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/BalanceResponse",
						"description": "The data associated with the balance response."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TransactionAPIResponse": {
				"description": "Interface representing the response from the Transaction API.\nExtends the BaseAPIResponse interface.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"transaction_hash": {
						"description": "The hash of the transaction."
					},
					"signedTx": {
						"description": "The signed transaction data."
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "The transaction data."
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "The response from broadcasting the raw transaction."
					},
					"transaction": {
						"description": "Additional transaction information."
					},
					"function": {
						"type": "string",
						"description": "The function name associated with the transaction."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters associated with the transaction function."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SignMessageAPIResponse": {
				"description": "Interface representing the response from the Sign Message API.\nExtends the BaseAPIResponse interface.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/TransactionData",
						"description": "The transaction data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SignMessage": {
				"description": "Represents a message to be signed.",
				"properties": {
					"chain_id": {
						"type": "string",
						"description": "The ID of the blockchain network."
					},
					"name": {
						"type": "string",
						"description": "The name associated with the message."
					},
					"data": {
						"type": "string",
						"description": "The data to be signed."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding format of the data."
					},
					"header": {
						"type": "boolean",
						"description": "Indicates if the message includes a header."
					},
					"signtype": {
						"type": "boolean",
						"description": "Indicates if the message includes a signature type."
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExportAccountAPIResponse": {
				"description": "Interface representing the response from the Export Account API.\nExtends the BaseAPIResponse interface.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"properties": {
							"public_key": {
								"type": "string"
							},
							"private_key": {
								"type": "string"
							},
							"address": {
								"type": "string"
							}
						},
						"required": [
							"public_key",
							"private_key",
							"address"
						],
						"type": "object",
						"description": "The data object containing account details."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SignTypedData": {
				"description": "Interface representing the structure for signing typed data.",
				"properties": {
					"chain_id": {
						"type": "string",
						"description": "The optional chain ID associated with the data."
					},
					"data": {
						"type": "string",
						"description": "The data to be signed."
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DeployInput": {
				"description": "Interface representing the input required for deploying a contract.",
				"properties": {
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"abi": {
						"type": "string",
						"description": "The ABI (Application Binary Interface) of the contract."
					},
					"bytecode": {
						"type": "string",
						"description": "The bytecode of the contract."
					},
					"constructor_args": {
						"type": "string",
						"description": "Optional constructor arguments for the contract."
					}
				},
				"required": [
					"abi",
					"bytecode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BroadCastRawTransactionAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "The data associated with the broadcast raw transaction response."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BroadcastInput": {
				"description": "Represents the input required to broadcast a transaction.",
				"properties": {
					"chainId": {
						"type": "string",
						"description": "The chain ID of the blockchain network."
					},
					"rawTransaction": {
						"type": "string",
						"description": "The signed transaction to be broadcasted."
					}
				},
				"required": [
					"chainId",
					"rawTransaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AbiEncodeOutput": {
				"description": "Interface representing the output of an ABI encoding operation.\nExtends the BaseAPIResponse interface.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"properties": {
							"encoded": {
								"type": "string",
								"description": "The encoded string resulting from the ABI encoding operation."
							}
						},
						"required": [
							"encoded"
						],
						"type": "object",
						"description": "Optional data object containing the encoded string."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AbiEncodeInput": {
				"description": "Interface representing the input required for ABI encoding.",
				"properties": {
					"abi": {
						"description": "The ABI (Application Binary Interface) definition."
					},
					"functionName": {
						"type": "string",
						"description": "The name of the function to be called."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters to be passed to the function."
					}
				},
				"required": [
					"abi",
					"functionName",
					"params"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AlloraInferenceResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"properties": {
							"confidenceIntervals": {
								"properties": {
									"values": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									},
									"percentiles": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									}
								},
								"required": [
									"values",
									"percentiles"
								],
								"type": "object"
							},
							"timestamp": {
								"type": "string"
							},
							"percentageChange": {
								"type": "number",
								"format": "double"
							},
							"impliedFuturePrice": {
								"type": "number",
								"format": "double"
							},
							"predictedLogReturn": {
								"type": "number",
								"format": "double"
							},
							"currentPrice": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"confidenceIntervals",
							"timestamp",
							"percentageChange",
							"impliedFuturePrice",
							"predictedLogReturn",
							"currentPrice"
						],
						"type": "object"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Asset": {
				"type": "string",
				"enum": [
					"ETH",
					"BTC"
				]
			},
			"TimeFrame": {
				"type": "string",
				"enum": [
					"5m",
					"8h"
				]
			},
			"BitcoinInput": {
				"description": "Represents the input data required for Bitcoin transactions.",
				"properties": {
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"private_key": {
						"type": "string",
						"description": "The private key of the account."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"BitcoinTransactionOutput": {
				"description": "Represents the output of a Bitcoin transaction.",
				"properties": {
					"signedTx": {
						"type": "string",
						"description": "The signed transaction."
					},
					"transaction_hash": {
						"type": "string",
						"description": "The transaction hash."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"SRC20InscriptionOutput": {
				"description": "Represents the output of an SRC20 inscription.",
				"properties": {
					"transactions": {
						"type": "string",
						"description": "the json string of the inscription transaction"
					}
				},
				"required": [
					"transactions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BRC20TransactionOutput": {
				"description": "Represents an output of a BRC20 transaction.",
				"properties": {
					"transaction": {
						"type": "string",
						"description": "The signed transaction."
					}
				},
				"required": [
					"transaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UnsignedPSBTOutput": {
				"description": "Represents an unsigned Partially Signed Bitcoin Transaction (PSBT) output.",
				"properties": {
					"psbt_hex": {
						"type": "string",
						"description": "The unsigned PSBT."
					}
				},
				"required": [
					"psbt_hex"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BitcoinAPIResponse": {
				"properties": {
					"data": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BitcoinTransactionOutput"
							},
							{
								"$ref": "#/components/schemas/SRC20InscriptionOutput"
							},
							{
								"$ref": "#/components/schemas/BRC20TransactionOutput"
							},
							{
								"$ref": "#/components/schemas/UnsignedPSBTOutput"
							}
						]
					},
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BitcoinTransactionInput": {
				"description": "Represents an input for a Bitcoin transaction.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"value": {
						"type": "number",
						"format": "double",
						"description": "The amount to be sent."
					},
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"compress": {
						"type": "boolean",
						"description": "Indicates whether to compress the public key."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"SRC20InscriptionInput": {
				"properties": {
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"prev_outputs": {
						"type": "string",
						"description": "The operation type of the transaction."
					},
					"inscription_data": {
						"type": "string",
						"description": "The ticker symbol of the token involved in the transaction."
					},
					"commit_fee_rate": {
						"type": "number",
						"format": "double",
						"description": "The amount of tokens involved in the transaction."
					},
					"reveal_out_value": {
						"type": "number",
						"format": "double",
						"description": "The transaction ID of the input being used."
					},
					"address": {
						"type": "string",
						"description": "The output index of the input being used."
					}
				},
				"required": [
					"network",
					"prev_outputs",
					"inscription_data",
					"commit_fee_rate",
					"reveal_out_value",
					"address"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BRC20TransactionInput": {
				"description": "Represents an input for a BRC20 transaction.",
				"properties": {
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"op": {
						"type": "string",
						"description": "The operation type of the transaction."
					},
					"tick": {
						"type": "string",
						"description": "The ticker symbol of the token involved in the transaction."
					},
					"amt": {
						"type": "string",
						"description": "The amount of tokens involved in the transaction."
					},
					"input_txid": {
						"type": "string",
						"description": "The transaction ID of the input being used."
					},
					"input_vout": {
						"type": "number",
						"format": "double",
						"description": "The output index of the input being used."
					},
					"input_amount": {
						"type": "string",
						"description": "The amount of the input being used."
					},
					"output_address": {
						"type": "string",
						"description": "The address to which the output is being sent."
					},
					"change_address": {
						"type": "string",
						"description": "The address to which any change is being sent."
					}
				},
				"required": [
					"network",
					"op",
					"tick",
					"amt",
					"input_txid",
					"input_vout",
					"input_amount",
					"output_address",
					"change_address"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UnsignedPSBTInput": {
				"description": "Represents an unsigned Partially Signed Bitcoin Transaction (PSBT) input.",
				"properties": {
					"network": {
						"type": "string",
						"description": "The network for the transaction, either 'mainnet' or 'testnet'."
					},
					"inputs": {
						"type": "string",
						"description": "The inputs for the transaction as a JSON string of an array of TxInput objects."
					},
					"outputs": {
						"type": "string",
						"description": "The outputs for the transaction as a JSON string of an array of TxOutput objects."
					}
				},
				"required": [
					"network",
					"inputs",
					"outputs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BitcoinCashAPIResponse_AccountResponse_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/AccountResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BitcoinCashInput": {
				"description": "Represents the input data required for Bitcoin Cash transactions.",
				"properties": {
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"private_key": {
						"type": "string",
						"description": "The private key of the account."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"BitcoinCashTransactionOutput": {
				"description": "Represents the output of a Bitcoin Cash transaction.",
				"properties": {
					"signedTx": {
						"type": "string",
						"description": "The signed transaction."
					},
					"transaction_hash": {
						"type": "string",
						"description": "The transaction hash."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"BitcoinCashAPIResponse_BitcoinCashTransactionOutput_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/BitcoinCashTransactionOutput"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BitcoinCashTransactionInput": {
				"description": "Represents an input for a Bitcoin Cash transaction.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"value": {
						"type": "number",
						"format": "double",
						"description": "The amount to be sent."
					},
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"compress": {
						"type": "boolean",
						"description": "Indicates whether to compress the public key."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"BitcoinCashAPIResponse__signed_tx-string__": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"properties": {
							"signed_tx": {
								"type": "string"
							}
						},
						"required": [
							"signed_tx"
						],
						"type": "object"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BitcoinCashAPIResponse__psbt_hex-string__": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"properties": {
							"psbt_hex": {
								"type": "string"
							}
						},
						"required": [
							"psbt_hex"
						],
						"type": "object"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BitcoinCashAPIResponse__signed_psbt_hex-string__": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"properties": {
							"signed_psbt_hex": {
								"type": "string"
							}
						},
						"required": [
							"signed_psbt_hex"
						],
						"type": "object"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChartAnalysisAPIResponse": {
				"description": "Represents the response from the Chart Analysis API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"type": "string",
						"description": "The analysis data returned by the API."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ComponentDefinition": {
				"description": "Represents the definition of a component.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the component."
					},
					"name": {
						"type": "string",
						"description": "The name of the component."
					},
					"description": {
						"type": "string",
						"description": "A brief description of the component."
					},
					"xml_tag": {
						"type": "string"
					},
					"xml_example": {
						"type": "string"
					},
					"property_schema": {},
					"version": {
						"type": "string"
					},
					"code": {
						"type": "string",
						"description": "The code of the component."
					},
					"created_at": {
						"type": "string",
						"format": "date-time",
						"description": "The date and time when the component was created.\nOptional."
					},
					"updated_at": {
						"type": "string",
						"format": "date-time",
						"description": "The date and time when the component was last updated.\nOptional."
					},
					"is_active": {
						"type": "boolean",
						"description": "Indicates whether the component is active.\nOptional."
					}
				},
				"required": [
					"id",
					"name",
					"description",
					"xml_tag",
					"xml_example",
					"property_schema",
					"version",
					"code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ComponentAPIResponse_ComponentDefinition-Array_": {
				"description": "Represents the structure of an API response for a component.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/ComponentDefinition"
						},
						"type": "array",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ComponentAPIResponse_ComponentDefinition_": {
				"description": "Represents the structure of an API response for a component.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"$ref": "#/components/schemas/ComponentDefinition",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_ComponentDefinition.Exclude_keyofComponentDefinition.id__": {
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the component."
					},
					"description": {
						"type": "string",
						"description": "A brief description of the component."
					},
					"xml_tag": {
						"type": "string"
					},
					"xml_example": {
						"type": "string"
					},
					"property_schema": {},
					"version": {
						"type": "string"
					},
					"code": {
						"type": "string",
						"description": "The code of the component."
					},
					"created_at": {
						"type": "string",
						"format": "date-time",
						"description": "The date and time when the component was created.\nOptional."
					},
					"updated_at": {
						"type": "string",
						"format": "date-time",
						"description": "The date and time when the component was last updated.\nOptional."
					},
					"is_active": {
						"type": "boolean",
						"description": "Indicates whether the component is active.\nOptional."
					}
				},
				"required": [
					"name",
					"description",
					"xml_tag",
					"xml_example",
					"property_schema",
					"version",
					"code"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_ComponentDefinition.id_": {
				"$ref": "#/components/schemas/Pick_ComponentDefinition.Exclude_keyofComponentDefinition.id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"Partial_ComponentDefinition_": {
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the component."
					},
					"name": {
						"type": "string",
						"description": "The name of the component."
					},
					"description": {
						"type": "string",
						"description": "A brief description of the component."
					},
					"xml_tag": {
						"type": "string"
					},
					"xml_example": {
						"type": "string"
					},
					"property_schema": {},
					"version": {
						"type": "string"
					},
					"code": {
						"type": "string",
						"description": "The code of the component."
					},
					"created_at": {
						"type": "string",
						"format": "date-time",
						"description": "The date and time when the component was created.\nOptional."
					},
					"updated_at": {
						"type": "string",
						"format": "date-time",
						"description": "The date and time when the component was last updated.\nOptional."
					},
					"is_active": {
						"type": "boolean",
						"description": "Indicates whether the component is active.\nOptional."
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"ComponentMatch": {
				"description": "Represents a component match that extends the ComponentDefinition interface.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the component."
					},
					"name": {
						"type": "string",
						"description": "The name of the component."
					},
					"description": {
						"type": "string",
						"description": "A brief description of the component."
					},
					"xml_tag": {
						"type": "string"
					},
					"xml_example": {
						"type": "string"
					},
					"property_schema": {},
					"version": {
						"type": "string"
					},
					"code": {
						"type": "string",
						"description": "The code of the component."
					},
					"created_at": {
						"type": "string",
						"format": "date-time",
						"description": "The date and time when the component was created.\nOptional."
					},
					"updated_at": {
						"type": "string",
						"format": "date-time",
						"description": "The date and time when the component was last updated.\nOptional."
					},
					"is_active": {
						"type": "boolean",
						"description": "Indicates whether the component is active.\nOptional."
					},
					"similarity": {
						"type": "number",
						"format": "double",
						"description": "The similarity score of the component match."
					}
				},
				"required": [
					"id",
					"name",
					"description",
					"xml_tag",
					"xml_example",
					"property_schema",
					"version",
					"code",
					"similarity"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ComponentAPIResponse_ComponentMatch-Array_": {
				"description": "Represents the structure of an API response for a component.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/ComponentMatch"
						},
						"type": "array",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ComponentAPIResponse_void_": {
				"description": "Represents the structure of an API response for a component.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ComponentAPIResponse_Partial_ComponentDefinition_-Array_": {
				"description": "Represents the structure of an API response for a component.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Partial_ComponentDefinition_"
						},
						"type": "array",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KOL": {
				"properties": {
					"username": {
						"type": "string"
					},
					"followers": {
						"type": "number",
						"format": "double"
					},
					"mindshare": {
						"type": "number",
						"format": "double"
					},
					"engagement": {
						"type": "number",
						"format": "double"
					},
					"posts": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"username",
					"followers",
					"mindshare",
					"engagement",
					"posts"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KOLListAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/KOL"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KOLNetwork": {
				"properties": {
					"connections": {
						"type": "number",
						"format": "double"
					},
					"influenceScore": {
						"type": "number",
						"format": "double"
					},
					"networkStrength": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"connections",
					"influenceScore",
					"networkStrength"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KOLNetworkAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/KOLNetwork"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CommunityMetrics": {
				"properties": {
					"size": {
						"type": "number",
						"format": "double"
					},
					"growth": {
						"type": "number",
						"format": "double"
					},
					"engagementRate": {
						"type": "number",
						"format": "double"
					},
					"sentiment": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"size",
					"growth",
					"engagementRate",
					"sentiment"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CommunityMetricsAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/CommunityMetrics"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TrendingTweet": {
				"properties": {
					"id": {
						"type": "string"
					},
					"text": {
						"type": "string"
					},
					"likes": {
						"type": "number",
						"format": "double"
					},
					"retweets": {
						"type": "number",
						"format": "double"
					},
					"engagement": {
						"type": "number",
						"format": "double"
					},
					"reach": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"id",
					"text",
					"likes",
					"retweets",
					"engagement",
					"reach"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TrendingTweetsAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/TrendingTweet"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NarrativeTrend": {
				"properties": {
					"topic": {
						"type": "string"
					},
					"strength": {
						"type": "number",
						"format": "double"
					},
					"velocity": {
						"type": "number",
						"format": "double"
					},
					"relatedTopics": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"topic",
					"strength",
					"velocity",
					"relatedTopics"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NarrativeTrendsAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/NarrativeTrend"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenAnalytics": {
				"properties": {
					"price": {
						"type": "number",
						"format": "double"
					},
					"marketCap": {
						"type": "number",
						"format": "double"
					},
					"volume": {
						"type": "number",
						"format": "double"
					},
					"socialEngagement": {
						"type": "number",
						"format": "double"
					},
					"holders": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"price",
					"marketCap",
					"volume",
					"socialEngagement",
					"holders"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenAnalyticsAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/TokenAnalytics"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TrendingToken": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"symbol": {
						"type": "string"
					},
					"price": {
						"type": "number",
						"format": "double"
					},
					"priceChange": {
						"type": "number",
						"format": "double"
					},
					"socialScore": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"id",
					"name",
					"symbol",
					"price",
					"priceChange",
					"socialScore"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TrendingTokensAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/TrendingToken"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PredictiveMetric": {
				"properties": {
					"metric": {
						"type": "string"
					},
					"prediction": {
						"type": "number",
						"format": "double"
					},
					"confidence": {
						"type": "number",
						"format": "double"
					},
					"factors": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"metric",
					"prediction",
					"confidence",
					"factors"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PredictiveMetricsAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/PredictiveMetric"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CosmosAccount": {
				"description": "Represents a Cosmos account with an address and a public key.",
				"properties": {
					"address": {
						"type": "string",
						"description": "Account name."
					},
					"pubkey": {
						"type": "string",
						"description": "Public key of the account."
					}
				},
				"required": [
					"address",
					"pubkey"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CosmosAccountListResponse": {
				"description": "Represents the response structure for a list of Cosmos accounts.",
				"properties": {
					"data": {
						"properties": {
							"keys": {
								"items": {
									"$ref": "#/components/schemas/CosmosAccount"
								},
								"type": "array"
							}
						},
						"required": [
							"keys"
						],
						"type": "object",
						"description": "The list of Cosmos accounts."
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CosmosAccountListAPIResponse": {
				"description": "Represents the response from the Cosmos Account List API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"$ref": "#/components/schemas/CosmosAccountListResponse",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CosmosAccountResponse": {
				"description": "Represents the response structure for a Cosmos account.",
				"properties": {
					"data": {
						"properties": {
							"address": {
								"type": "string"
							}
						},
						"required": [
							"address"
						],
						"type": "object",
						"description": "The Cosmos account address."
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CosmosAccountAPIResponse": {
				"description": "Represents the response from the Cosmos Account API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"$ref": "#/components/schemas/CosmosAccountResponse",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BaseCosmosAPIResponse": {
				"description": "Represents the base structure of a response from the Cosmos API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CosmosTransactionResponse": {
				"description": "Represents the response of a Cosmos transaction.",
				"properties": {
					"signedTx": {
						"type": "string",
						"description": "The signed transaction."
					},
					"txHash": {
						"type": "string",
						"description": "The transaction hash."
					}
				},
				"required": [
					"signedTx",
					"txHash"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CosmosTransactionAPIResponse": {
				"description": "Represents the response from the Cosmos Transaction API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"$ref": "#/components/schemas/CosmosTransactionResponse",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CosmosTransferInput": {
				"description": "Represents the input required for a Cosmos blockchain transfer.",
				"properties": {
					"fromAddress": {
						"type": "string",
						"description": "The address from which the transfer is initiated."
					},
					"toAddress": {
						"type": "string",
						"description": "The address to which the transfer is sent."
					},
					"amount": {
						"type": "string",
						"description": "The amount of tokens to be transferred."
					},
					"denom": {
						"type": "string",
						"description": "The denomination of the tokens to be transferred."
					},
					"chainId": {
						"type": "string",
						"description": "The ID of the blockchain chain."
					},
					"sequence": {
						"type": "number",
						"format": "double",
						"description": "The sequence number of the account initiating the transfer."
					},
					"accountNumber": {
						"type": "number",
						"format": "double",
						"description": "The account number of the account initiating the transfer."
					},
					"feeDenom": {
						"type": "string",
						"description": "The denomination of the fee to be paid for the transfer."
					},
					"feeAmount": {
						"type": "string",
						"description": "The amount of the fee to be paid for the transfer."
					},
					"gasLimit": {
						"type": "number",
						"format": "double",
						"description": "The gas limit for the transfer transaction."
					},
					"memo": {
						"type": "string",
						"description": "An optional memo to include with the transfer."
					},
					"timeoutHeight": {
						"type": "number",
						"format": "double",
						"description": "The timeout height for the transfer transaction."
					}
				},
				"required": [
					"fromAddress",
					"toAddress",
					"amount",
					"denom",
					"chainId",
					"sequence",
					"accountNumber",
					"feeDenom",
					"feeAmount",
					"gasLimit",
					"memo",
					"timeoutHeight"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CosmosSignedMessageResponse": {
				"description": "Represents the response containing a signed message from the Cosmos blockchain.",
				"properties": {
					"signedMessage": {
						"type": "string",
						"description": "The signed message."
					}
				},
				"required": [
					"signedMessage"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CosmosSignedMessageAPIResponse": {
				"description": "Represents the response from the Cosmos Signed Message API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"$ref": "#/components/schemas/CosmosSignedMessageResponse",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CosmosSignMessageInput": {
				"description": "Represents the input required for signing a message in the Cosmos ecosystem.",
				"properties": {
					"message": {
						"type": "string",
						"description": "The address of the account signing the message."
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CosmosIBCTransferInput": {
				"description": "Interface representing the input required for an IBC (Inter-Blockchain Communication) transfer in the Cosmos network.\nExtends the `CosmosTransferInput` interface to include additional properties specific to IBC transfers.",
				"properties": {
					"fromAddress": {
						"type": "string",
						"description": "The address from which the transfer is initiated."
					},
					"toAddress": {
						"type": "string",
						"description": "The address to which the transfer is sent."
					},
					"amount": {
						"type": "string",
						"description": "The amount of tokens to be transferred."
					},
					"denom": {
						"type": "string",
						"description": "The denomination of the tokens to be transferred."
					},
					"chainId": {
						"type": "string",
						"description": "The ID of the blockchain chain."
					},
					"sequence": {
						"type": "number",
						"format": "double",
						"description": "The sequence number of the account initiating the transfer."
					},
					"accountNumber": {
						"type": "number",
						"format": "double",
						"description": "The account number of the account initiating the transfer."
					},
					"feeDenom": {
						"type": "string",
						"description": "The denomination of the fee to be paid for the transfer."
					},
					"feeAmount": {
						"type": "string",
						"description": "The amount of the fee to be paid for the transfer."
					},
					"gasLimit": {
						"type": "number",
						"format": "double",
						"description": "The gas limit for the transfer transaction."
					},
					"memo": {
						"type": "string",
						"description": "An optional memo to include with the transfer."
					},
					"timeoutHeight": {
						"type": "number",
						"format": "double",
						"description": "The timeout height for the transfer transaction."
					},
					"sourcePort": {
						"type": "string",
						"description": "The source port for the IBC transfer."
					},
					"sourceChannel": {
						"type": "string",
						"description": "The source channel for the IBC transfer."
					},
					"timeoutTimestamp": {
						"type": "number",
						"format": "double",
						"description": "The timeout timestamp for the IBC transfer, specified in nanoseconds."
					}
				},
				"required": [
					"fromAddress",
					"toAddress",
					"amount",
					"denom",
					"chainId",
					"sequence",
					"accountNumber",
					"feeDenom",
					"feeAmount",
					"gasLimit",
					"memo",
					"timeoutHeight",
					"sourcePort",
					"sourceChannel",
					"timeoutTimestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WalletBalanceAPIResponse": {
				"description": "Interface representing the response from the Wallet Balance API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {},
						"type": "array",
						"description": "The wallet balance data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EvmAddressJSON": {
				"type": "string"
			},
			"BigNumberJSON": {
				"type": "string"
			},
			"EvmInternalTransactionJSON": {
				"properties": {
					"transaction_hash": {
						"type": "string"
					},
					"block_number": {
						"type": "string"
					},
					"block_hash": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"from": {
						"type": "string"
					},
					"to": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"gas": {
						"type": "string"
					},
					"gas_used": {
						"type": "string"
					},
					"input": {
						"type": "string"
					},
					"output": {
						"type": "string"
					}
				},
				"required": [
					"transaction_hash",
					"block_number",
					"block_hash",
					"type",
					"from",
					"to",
					"value",
					"gas",
					"gas_used",
					"input",
					"output"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EvmETransactionCategoryJSON": {
				"type": "string",
				"enum": [
					"send",
					"receive",
					"token send",
					"token receive",
					"nft send",
					"nft receive",
					"token swap",
					"deposit",
					"withdraw",
					"nft purchase",
					"nft sale",
					"airdrop",
					"mint",
					"burn",
					"borrow",
					"contract interaction"
				]
			},
			"EvmContractTokenDetailsJSON": {
				"properties": {
					"address": {
						"$ref": "#/components/schemas/EvmAddressJSON"
					},
					"address_label": {
						"type": "string"
					},
					"token_name": {
						"type": "string"
					},
					"token_logo": {
						"type": "string"
					},
					"token_symbol": {
						"type": "string"
					}
				},
				"required": [
					"address",
					"token_name",
					"token_logo",
					"token_symbol"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EvmContractSpenderDetailsJSON": {
				"properties": {
					"address": {
						"$ref": "#/components/schemas/EvmAddressJSON"
					},
					"address_label": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"symbol": {
						"type": "string"
					},
					"logo": {
						"type": "string"
					}
				},
				"required": [
					"address"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EvmCommonContractDataJSON": {
				"properties": {
					"value": {
						"type": "string"
					},
					"value_formatted": {
						"type": "string"
					},
					"token": {
						"$ref": "#/components/schemas/EvmContractTokenDetailsJSON"
					},
					"spender": {
						"$ref": "#/components/schemas/EvmContractSpenderDetailsJSON"
					}
				},
				"required": [
					"value",
					"token",
					"spender"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EvmResolveContractInteractionResponseJSON": {
				"properties": {
					"approvals": {
						"items": {
							"$ref": "#/components/schemas/EvmCommonContractDataJSON"
						},
						"type": "array"
					},
					"revokes": {
						"items": {
							"$ref": "#/components/schemas/EvmCommonContractDataJSON"
						},
						"type": "array"
					},
					"approvalsAll": {
						"items": {
							"$ref": "#/components/schemas/EvmCommonContractDataJSON"
						},
						"type": "array"
					},
					"revokesAll": {
						"items": {
							"$ref": "#/components/schemas/EvmCommonContractDataJSON"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"EvmNormalizedMetadataAttributeValueJSON": {
				"additionalProperties": false,
				"type": "object"
			},
			"EvmNormalizedMetadataAttributeJSON": {
				"properties": {
					"trait_type": {
						"type": "string"
					},
					"value": {
						"$ref": "#/components/schemas/EvmNormalizedMetadataAttributeValueJSON"
					},
					"display_type": {
						"type": "string"
					},
					"max_value": {
						"type": "number",
						"format": "double"
					},
					"trait_count": {
						"type": "number",
						"format": "double"
					},
					"order": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"EvmNormalizedMetadataJSON": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"image": {
						"type": "string"
					},
					"external_link": {
						"type": "string"
					},
					"animation_url": {
						"type": "string"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/EvmNormalizedMetadataAttributeJSON"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"EvmWalletHistoryNftTransferJSON": {
				"properties": {
					"token_address": {
						"$ref": "#/components/schemas/EvmAddressJSON"
					},
					"token_id": {
						"type": "string"
					},
					"from_address_entity": {
						"type": "string"
					},
					"from_address_entity_logo": {
						"type": "string"
					},
					"from_address": {
						"$ref": "#/components/schemas/EvmAddressJSON"
					},
					"from_address_label": {
						"type": "string"
					},
					"to_address_entity": {
						"type": "string"
					},
					"to_address_entity_logo": {
						"type": "string"
					},
					"to_address": {
						"$ref": "#/components/schemas/EvmAddressJSON"
					},
					"to_address_label": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"amount": {
						"type": "string"
					},
					"contract_type": {
						"type": "string"
					},
					"transaction_type": {
						"type": "string"
					},
					"log_index": {
						"type": "number",
						"format": "double"
					},
					"operator": {
						"type": "string"
					},
					"possible_spam": {
						"type": "boolean"
					},
					"verified_collection": {
						"type": "boolean"
					},
					"direction": {
						"type": "string"
					},
					"collection_logo": {
						"type": "string"
					},
					"collection_banner_image": {
						"type": "string"
					},
					"normalized_metadata": {
						"$ref": "#/components/schemas/EvmNormalizedMetadataJSON"
					}
				},
				"required": [
					"token_address",
					"token_id",
					"from_address",
					"value",
					"amount",
					"contract_type",
					"transaction_type",
					"log_index",
					"possible_spam",
					"direction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EvmWalletHistoryErc20TransferJSON": {
				"properties": {
					"token_name": {
						"type": "string"
					},
					"token_symbol": {
						"type": "string"
					},
					"token_logo": {
						"type": "string"
					},
					"token_decimals": {
						"type": "string"
					},
					"address": {
						"$ref": "#/components/schemas/EvmAddressJSON"
					},
					"block_timestamp": {
						"type": "string"
					},
					"to_address_entity": {
						"type": "string"
					},
					"to_address_entity_logo": {
						"type": "string"
					},
					"to_address": {
						"$ref": "#/components/schemas/EvmAddressJSON"
					},
					"to_address_label": {
						"type": "string"
					},
					"from_address_entity": {
						"type": "string"
					},
					"from_address_entity_logo": {
						"type": "string"
					},
					"from_address": {
						"$ref": "#/components/schemas/EvmAddressJSON"
					},
					"from_address_label": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"value_formatted": {
						"type": "string"
					},
					"log_index": {
						"type": "number",
						"format": "double"
					},
					"possible_spam": {
						"type": "boolean"
					},
					"verified_contract": {
						"type": "boolean"
					}
				},
				"required": [
					"token_name",
					"token_symbol",
					"token_logo",
					"token_decimals",
					"address",
					"from_address",
					"value",
					"value_formatted",
					"log_index",
					"possible_spam",
					"verified_contract"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EvmNativeTransferJSON": {
				"properties": {
					"from_address_entity": {
						"type": "string"
					},
					"from_address_entity_logo": {
						"type": "string"
					},
					"from_address": {
						"$ref": "#/components/schemas/EvmAddressJSON"
					},
					"from_address_label": {
						"type": "string"
					},
					"to_address_entity": {
						"type": "string"
					},
					"to_address_entity_logo": {
						"type": "string"
					},
					"to_address": {
						"$ref": "#/components/schemas/EvmAddressJSON"
					},
					"to_address_label": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"value_formatted": {
						"type": "string"
					},
					"direction": {
						"type": "string"
					},
					"internal_transaction": {
						"type": "boolean"
					},
					"token_symbol": {
						"type": "string"
					},
					"token_logo": {
						"type": "string"
					}
				},
				"required": [
					"from_address",
					"value",
					"value_formatted",
					"internal_transaction",
					"token_symbol",
					"token_logo"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EvmDecodedEventParamsItemJSON": {
				"properties": {
					"name": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"type": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"EvmDecodedEventJSON": {
				"properties": {
					"signature": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"params": {
						"items": {
							"$ref": "#/components/schemas/EvmDecodedEventParamsItemJSON"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"EvmLogVerboseJSON": {
				"properties": {
					"log_index": {
						"type": "string"
					},
					"transaction_hash": {
						"type": "string"
					},
					"transaction_index": {
						"type": "string"
					},
					"address": {
						"$ref": "#/components/schemas/EvmAddressJSON"
					},
					"data": {
						"type": "string"
					},
					"topic0": {
						"type": "string"
					},
					"topic1": {
						"type": "string"
					},
					"topic2": {
						"type": "string"
					},
					"topic3": {
						"type": "string"
					},
					"block_timestamp": {
						"type": "string"
					},
					"block_number": {
						"$ref": "#/components/schemas/BigNumberJSON"
					},
					"block_hash": {
						"type": "string"
					},
					"decoded_event": {
						"$ref": "#/components/schemas/EvmDecodedEventJSON"
					}
				},
				"required": [
					"log_index",
					"transaction_hash",
					"transaction_index",
					"address",
					"data",
					"topic0",
					"block_timestamp",
					"block_number",
					"block_hash",
					"decoded_event"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EvmWalletHistoryTransactionJSON": {
				"properties": {
					"hash": {
						"type": "string"
					},
					"nonce": {
						"type": "string"
					},
					"transaction_index": {
						"type": "string"
					},
					"from_address_entity": {
						"type": "string"
					},
					"from_address_entity_logo": {
						"type": "string"
					},
					"from_address": {
						"$ref": "#/components/schemas/EvmAddressJSON"
					},
					"from_address_label": {
						"type": "string"
					},
					"to_address_entity": {
						"type": "string"
					},
					"to_address_entity_logo": {
						"type": "string"
					},
					"to_address": {
						"$ref": "#/components/schemas/EvmAddressJSON"
					},
					"to_address_label": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"gas": {
						"type": "string"
					},
					"gas_price": {
						"type": "string"
					},
					"input": {
						"type": "string"
					},
					"receipt_cumulative_gas_used": {
						"type": "string"
					},
					"receipt_gas_used": {
						"type": "string"
					},
					"receipt_contract_address": {
						"type": "string"
					},
					"receipt_status": {
						"type": "string"
					},
					"transaction_fee": {
						"type": "string"
					},
					"block_timestamp": {
						"type": "string"
					},
					"block_number": {
						"$ref": "#/components/schemas/BigNumberJSON"
					},
					"block_hash": {
						"type": "string"
					},
					"internal_transactions": {
						"items": {
							"$ref": "#/components/schemas/EvmInternalTransactionJSON"
						},
						"type": "array"
					},
					"category": {
						"$ref": "#/components/schemas/EvmETransactionCategoryJSON"
					},
					"contract_interactions": {
						"$ref": "#/components/schemas/EvmResolveContractInteractionResponseJSON"
					},
					"possible_spam": {
						"type": "boolean"
					},
					"method_label": {
						"type": "string"
					},
					"summary": {
						"type": "string"
					},
					"nft_transfers": {
						"items": {
							"$ref": "#/components/schemas/EvmWalletHistoryNftTransferJSON"
						},
						"type": "array"
					},
					"erc20_transfers": {
						"items": {
							"$ref": "#/components/schemas/EvmWalletHistoryErc20TransferJSON"
						},
						"type": "array"
					},
					"native_transfers": {
						"items": {
							"$ref": "#/components/schemas/EvmNativeTransferJSON"
						},
						"type": "array"
					},
					"logs": {
						"items": {
							"$ref": "#/components/schemas/EvmLogVerboseJSON"
						},
						"type": "array"
					}
				},
				"required": [
					"hash",
					"nonce",
					"transaction_index",
					"from_address",
					"value",
					"gas_price",
					"receipt_cumulative_gas_used",
					"receipt_gas_used",
					"receipt_status",
					"block_timestamp",
					"block_number",
					"block_hash",
					"category",
					"summary",
					"nft_transfers",
					"erc20_transfers",
					"native_transfers"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WalletHistoryAPIResponse": {
				"description": "Interface representing the response from the Wallet History API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/EvmWalletHistoryTransactionJSON"
						},
						"type": "array",
						"description": "The wallet history data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SuccessResponse%249": {
				"items": {
					"properties": {
						"verified_contract": {
							"type": "boolean",
							"example": false
						},
						"possible_spam": {
							"type": "boolean",
							"example": false
						},
						"created_at": {
							"type": "string"
						},
						"validated": {
							"type": "number",
							"format": "double"
						},
						"block_number": {
							"type": "string"
						},
						"thumbnail": {
							"type": "string",
							"nullable": true
						},
						"logo_hash": {
							"type": "string",
							"nullable": true
						},
						"logo": {
							"type": "string",
							"nullable": true
						},
						"decimals": {
							"type": "string",
							"example": 18
						},
						"symbol": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"address_label": {
							"type": "string",
							"nullable": true
						},
						"address": {
							"type": "string"
						}
					},
					"required": [
						"possible_spam",
						"created_at",
						"decimals",
						"symbol",
						"name",
						"address"
					],
					"type": "object"
				},
				"type": "array"
			},
			"GetTokenMetadataJSONResponse": {
				"$ref": "#/components/schemas/SuccessResponse%249"
			},
			"TokenMetadataAPIResponse": {
				"description": "Represents the response from the Token Metadata API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/GetTokenMetadataJSONResponse",
						"description": "The token metadata information."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NFTsAPIResponse": {
				"description": "Interface representing the response from the NFTs API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {},
						"type": "array",
						"description": "The NFT data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PortfolioAPIResponse": {
				"description": "Interface representing the response from the Portfolio API.\nExtends the BaseAPIResponse interface.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"properties": {
							"pollUrl": {
								"type": "string",
								"description": "The URL to poll for updates."
							},
							"jobId": {
								"type": "string",
								"description": "The job ID associated with the request."
							},
							"status": {
								"type": "string",
								"description": "The status of the response."
							},
							"reason": {
								"type": "string",
								"description": "The reason for the response status."
							},
							"totalNFTs": {
								"type": "number",
								"format": "double",
								"description": "The total number of NFTs."
							},
							"totalTokens": {
								"type": "number",
								"format": "double",
								"description": "The total number of tokens."
							},
							"pageSize": {
								"type": "number",
								"format": "double",
								"description": "The number of items per page."
							},
							"page": {
								"type": "number",
								"format": "double",
								"description": "The current page number."
							},
							"nft_balances": {
								"items": {},
								"type": "array",
								"description": "An array of NFT balances."
							},
							"token_balances": {
								"items": {},
								"type": "array",
								"description": "An array of token balances."
							},
							"address": {
								"type": "string",
								"description": "The address associated with the portfolio."
							}
						},
						"type": "object",
						"description": "The data object containing portfolio details."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DebankPortfolioAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DogeCoinInput": {
				"description": "Represents the input required for DogeCoin transactions.",
				"properties": {
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"private_key": {
						"type": "string",
						"description": "The private key of the account."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DogeCoinTransactionOutput": {
				"description": "Represents the output of a DogeCoin transaction.",
				"properties": {
					"signedTx": {
						"type": "string",
						"description": "The signed transaction."
					},
					"transaction_hash": {
						"type": "string",
						"description": "The transaction hash."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DogeCoinAPIResponse": {
				"description": "Interface representing the response from the DogeCoin API.\nExtends the BaseAPIResponse interface.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/DogeCoinTransactionOutput",
						"description": "The data associated with the DogeCoin transaction output."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DogeCoinTransactionInput": {
				"description": "Represents an input for a DogeCoin transaction.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"value": {
						"type": "number",
						"format": "double",
						"description": "The amount to be sent."
					},
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"compress": {
						"type": "boolean",
						"description": "Indicates whether to compress the public key."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"EnsResolveResponse": {
				"description": "Represents the response from an ENS (Ethereum Name Service) resolve operation.",
				"properties": {
					"address": {
						"type": "string",
						"description": "The address associated with the domain."
					}
				},
				"required": [
					"address"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EnsResolveAPIResponse": {
				"description": "Interface representing the response from the ENS resolve API.\nExtends the BaseAPIResponse interface.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/EnsResolveResponse",
						"description": "The ENS resolve response data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EnsResolveInput": {
				"description": "Represents the input required to resolve an ENS (Ethereum Name Service) domain.",
				"properties": {
					"domain": {
						"type": "string",
						"description": "The domain to be resolved."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID of the blockchain network."
					}
				},
				"required": [
					"domain",
					"chain_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ENSReverseResolveResponse": {
				"description": "Represents the response from an ENS reverse resolution.",
				"properties": {
					"domain": {
						"type": "string",
						"description": "The domain name resolved from the ENS reverse lookup."
					}
				},
				"required": [
					"domain"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ENSReverseResolveAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/ENSReverseResolveResponse",
						"description": "The ENS reverse resolve response data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ENSReverseResolveInput": {
				"description": "Interface representing the input required for ENS reverse resolution.",
				"properties": {
					"address": {
						"type": "string",
						"description": "The blockchain address to be reverse resolved."
					},
					"chain_id": {
						"type": "string",
						"description": "The identifier of the blockchain network."
					}
				},
				"required": [
					"address",
					"chain_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EosInput": {
				"description": "Represents the input data required for EOS operations.",
				"properties": {
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"private_key": {
						"type": "string",
						"description": "The private key of the account."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"EosTransactionOutput": {
				"description": "Represents the output of an EOS transaction.",
				"properties": {
					"signedTx": {
						"type": "string",
						"description": "The signed transaction."
					},
					"transaction_hash": {
						"type": "string",
						"description": "The transaction hash."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"EosAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/EosTransactionOutput",
						"description": "The data associated with the Eos response."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EosTransactionInput": {
				"description": "Represents an input for an EOS transaction.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"value": {
						"type": "number",
						"format": "double",
						"description": "The amount to be sent."
					},
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"compress": {
						"type": "boolean",
						"description": "Indicates whether to compress the public key."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Erc1155Request": {
				"description": "Interface representing a request for ERC-1155 token operations.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"data": {
						"type": "string",
						"description": "The data to be sent."
					},
					"value": {
						"type": "string",
						"description": "The value to be sent."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce for the transaction."
					},
					"simulate": {
						"type": "boolean",
						"description": "Whether to simulate the transaction."
					},
					"gas": {
						"type": "string",
						"description": "The gas for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Whether to perform a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Whether the transaction is from an externally owned account."
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "Optional. A comma-separated list of token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Optional. Indicates whether the tokens are approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Whether to broadcast the transaction."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Whether to always increment the nonce."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount involved in the transaction."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ERC20APIResponse_number_": {
				"description": "Interface representing the structure of an API response for ERC20 operations.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"type": "number",
						"format": "double",
						"description": "Optional data payload returned by the API."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ERC20APIResponse_string_": {
				"description": "Interface representing the structure of an API response for ERC20 operations.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"type": "string",
						"description": "Optional data payload returned by the API."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ERC20Transaction": {
				"description": "Represents an ERC-20 token transaction.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data payload of the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value to be transferred in the transaction, in wei."
					},
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"from": {
						"type": "string",
						"description": "The sender address of the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction, in wei.\nOptional."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction.\nOptional."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas for EIP-1559 transactions, in wei.\nOptional."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas for EIP-1559 transactions, in wei.\nOptional."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce of the transaction."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of the transaction.\nOptional."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID of the network where the transaction is sent."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ERC20ExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "Optional response from simulating asset changes."
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "Optional response indicating whether the transaction was broadcasted."
					},
					"message": {
						"type": "string",
						"description": "Optional message providing additional information about the execution."
					},
					"success": {
						"type": "boolean",
						"description": "Indicates whether the execution was successful."
					},
					"user_op": {
						"type": "string",
						"description": "Optional user operation identifier."
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "Optional transaction data."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters passed to the function."
					},
					"function": {
						"type": "string",
						"description": "The name of the executed function"
					},
					"transaction": {
						"$ref": "#/components/schemas/ERC20Transaction",
						"description": "The transaction details."
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object",
				"description": "Represents the result of executing an ERC20 function."
			},
			"ERC20APIResponse_ERC20ExecuteFunctionResult_": {
				"description": "Interface representing the structure of an API response for ERC20 operations.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"$ref": "#/components/schemas/ERC20ExecuteFunctionResult",
						"description": "Optional data payload returned by the API."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ERC20InputBody": {
				"description": "Interface representing the input body for an ERC20 transaction.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address of the ERC20 token transfer."
					},
					"data": {
						"type": "string",
						"description": "Additional data to include in the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value of the transaction in wei."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce to use for the transaction."
					},
					"simulate": {
						"type": "boolean",
						"description": "Flag to indicate if the transaction should be simulated."
					},
					"gas": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Flag to indicate if the transaction should be a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Flag to indicate if the transaction is from an externally owned account."
					},
					"contract_address": {
						"type": "string",
						"description": "The address of the ERC20 contract."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Flag to indicate if the transaction should be broadcasted."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Flag to indicate if the nonce should always be incremented."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount of ERC20 tokens to transfer."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ERC4626APIResponse": {
				"description": "Interface representing the structure of the API response for ERC4626.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "Provides a message related to the API response."
					},
					"data": {
						"description": "Optional data returned by the API."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ERC721APIResponse": {
				"description": "Interface representing the structure of the response from the ERC721 API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"description": "Optional data returned by the API."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CompanyFacts": {
				"description": "Represents the financial and general information of a company.",
				"properties": {
					"ticker": {
						"type": "string",
						"description": "The stock ticker symbol of the company."
					},
					"name": {
						"type": "string",
						"description": "The name of the company."
					},
					"cik": {
						"type": "string",
						"description": "The Central Index Key (CIK) assigned by the SEC."
					},
					"market_cap": {
						"type": "number",
						"format": "double",
						"description": "The market capitalization of the company."
					},
					"weighted_average_shares": {
						"type": "number",
						"format": "double",
						"description": "The weighted average number of shares outstanding."
					},
					"number_of_employees": {
						"type": "number",
						"format": "double",
						"description": "The number of employees working for the company."
					},
					"sic_code": {
						"type": "string",
						"description": "The Standard Industrial Classification (SIC) code of the company."
					},
					"sic_description": {
						"type": "string",
						"description": "The description of the SIC code."
					},
					"website_url": {
						"type": "string",
						"description": "The website URL of the company."
					},
					"listing_date": {
						"type": "string",
						"description": "The date when the company was listed."
					},
					"is_active": {
						"type": "boolean",
						"description": "Indicates whether the company is currently active."
					}
				},
				"required": [
					"ticker",
					"name",
					"cik",
					"market_cap",
					"weighted_average_shares",
					"number_of_employees",
					"sic_code",
					"sic_description",
					"website_url",
					"listing_date",
					"is_active"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CompanyFactsAPIResponse": {
				"description": "Represents the response of the `getCompanyFacts` endpoint.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/CompanyFacts",
						"description": "The company facts data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IncomeStatement": {
				"description": "Represents an income statement for a financial entity.",
				"properties": {
					"ticker": {
						"type": "string",
						"description": "The ticker symbol of the company."
					},
					"calendar_date": {
						"type": "string",
						"description": "The calendar date of the income statement."
					},
					"report_period": {
						"type": "string",
						"description": "The reporting period of the income statement."
					},
					"period": {
						"type": "string",
						"enum": [
							"quarterly",
							"ttm",
							"annual"
						],
						"description": "The period type of the income statement, which can be \"quarterly\", \"ttm\" (trailing twelve months), or \"annual\"."
					},
					"currency": {
						"type": "string",
						"description": "The currency in which the financials are reported."
					},
					"revenue": {
						"type": "number",
						"format": "double",
						"description": "The total revenue generated by the company."
					},
					"cost_of_revenue": {
						"type": "number",
						"format": "double",
						"description": "The cost associated with generating the revenue."
					},
					"gross_profit": {
						"type": "number",
						"format": "double",
						"description": "The gross profit, calculated as revenue minus cost of revenue."
					},
					"operating_expense": {
						"type": "number",
						"format": "double",
						"description": "The total operating expenses of the company."
					},
					"selling_general_and_administrative_expenses": {
						"type": "number",
						"format": "double",
						"description": "The expenses related to selling, general, and administrative activities."
					},
					"research_and_development": {
						"type": "number",
						"format": "double",
						"description": "The expenses related to research and development activities."
					},
					"operating_income": {
						"type": "number",
						"format": "double",
						"description": "The operating income, calculated as gross profit minus operating expenses."
					},
					"interest_expense": {
						"type": "number",
						"format": "double",
						"description": "The interest expense incurred by the company."
					},
					"ebit": {
						"type": "number",
						"format": "double",
						"description": "Earnings before interest and taxes."
					},
					"income_tax_expense": {
						"type": "number",
						"format": "double",
						"description": "The income tax expense incurred by the company."
					},
					"net_income_discontinued_operations": {
						"type": "number",
						"format": "double",
						"description": "The net income from discontinued operations."
					},
					"net_income_non_controlling_interests": {
						"type": "number",
						"format": "double",
						"description": "The net income attributable to non-controlling interests."
					},
					"net_income": {
						"type": "number",
						"format": "double",
						"description": "The net income of the company."
					},
					"net_income_common_stock": {
						"type": "number",
						"format": "double",
						"description": "The net income attributable to common stockholders."
					},
					"preferred_dividends_impact": {
						"type": "number",
						"format": "double",
						"description": "The impact of preferred dividends on net income."
					},
					"consolidated_income": {
						"type": "number",
						"format": "double",
						"description": "The consolidated income of the company."
					},
					"earnings_per_share": {
						"type": "number",
						"format": "double",
						"description": "The earnings per share of the company."
					},
					"earnings_per_share_diluted": {
						"type": "number",
						"format": "double",
						"description": "The diluted earnings per share of the company."
					},
					"dividends_per_common_share": {
						"type": "number",
						"format": "double",
						"description": "The dividends paid per common share."
					},
					"weighted_average_shares": {
						"type": "number",
						"format": "double",
						"description": "The weighted average number of shares outstanding."
					},
					"weighted_average_shares_diluted": {
						"type": "number",
						"format": "double",
						"description": "The weighted average number of diluted shares outstanding."
					}
				},
				"required": [
					"ticker",
					"calendar_date",
					"report_period",
					"period",
					"currency",
					"revenue",
					"cost_of_revenue",
					"gross_profit",
					"operating_expense",
					"selling_general_and_administrative_expenses",
					"research_and_development",
					"operating_income",
					"interest_expense",
					"ebit",
					"income_tax_expense",
					"net_income_discontinued_operations",
					"net_income_non_controlling_interests",
					"net_income",
					"net_income_common_stock",
					"preferred_dividends_impact",
					"consolidated_income",
					"earnings_per_share",
					"earnings_per_share_diluted",
					"dividends_per_common_share",
					"weighted_average_shares",
					"weighted_average_shares_diluted"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IncomeStatementsAPIResponse": {
				"description": "Represents the response of the `getIncomeStatements` endpoint.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/IncomeStatement"
						},
						"type": "array",
						"description": "The income statement data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BalanceSheet": {
				"description": "Represents a balance sheet for a financial entity.",
				"properties": {
					"ticker": {
						"type": "string",
						"description": "The stock ticker symbol of the company."
					},
					"calendar_date": {
						"type": "string",
						"description": "The date of the balance sheet in the calendar."
					},
					"report_period": {
						"type": "string",
						"description": "The reporting period of the balance sheet."
					},
					"period": {
						"type": "string",
						"enum": [
							"quarterly",
							"ttm",
							"annual"
						],
						"description": "The period type of the balance sheet, which can be \"quarterly\", \"ttm\" (trailing twelve months), or \"annual\"."
					},
					"currency": {
						"type": "string",
						"description": "The currency in which the balance sheet values are denominated."
					},
					"total_assets": {
						"type": "number",
						"format": "double",
						"description": "The total assets of the company."
					},
					"current_assets": {
						"type": "number",
						"format": "double",
						"description": "The current assets of the company."
					},
					"cash_and_equivalents": {
						"type": "number",
						"format": "double",
						"description": "The cash and cash equivalents of the company."
					},
					"inventory": {
						"type": "number",
						"format": "double",
						"description": "The inventory of the company."
					},
					"current_investments": {
						"type": "number",
						"format": "double",
						"description": "The current investments of the company."
					},
					"trade_and_non_trade_receivables": {
						"type": "number",
						"format": "double",
						"description": "The trade and non-trade receivables of the company."
					},
					"non_current_assets": {
						"type": "number",
						"format": "double",
						"description": "The non-current assets of the company."
					},
					"property_plant_and_equipment": {
						"type": "number",
						"format": "double",
						"description": "The property, plant, and equipment of the company."
					},
					"goodwill_and_intangible_assets": {
						"type": "number",
						"format": "double",
						"description": "The goodwill and intangible assets of the company."
					},
					"investments": {
						"type": "number",
						"format": "double",
						"description": "The total investments of the company."
					},
					"non_current_investments": {
						"type": "number",
						"format": "double",
						"description": "The non-current investments of the company."
					},
					"outstanding_shares": {
						"type": "number",
						"format": "double",
						"description": "The number of outstanding shares of the company."
					},
					"tax_assets": {
						"type": "number",
						"format": "double",
						"description": "The tax assets of the company."
					},
					"total_liabilities": {
						"type": "number",
						"format": "double",
						"description": "The total liabilities of the company."
					},
					"current_liabilities": {
						"type": "number",
						"format": "double",
						"description": "The current liabilities of the company."
					},
					"current_debt": {
						"type": "number",
						"format": "double",
						"description": "The current debt of the company."
					},
					"trade_and_non_trade_payables": {
						"type": "number",
						"format": "double",
						"description": "The trade and non-trade payables of the company."
					},
					"deferred_revenue": {
						"type": "number",
						"format": "double",
						"description": "The deferred revenue of the company."
					},
					"deposit_liabilities": {
						"type": "number",
						"format": "double",
						"description": "The deposit liabilities of the company."
					},
					"non_current_liabilities": {
						"type": "number",
						"format": "double",
						"description": "The non-current liabilities of the company."
					},
					"non_current_debt": {
						"type": "number",
						"format": "double",
						"description": "The non-current debt of the company."
					},
					"tax_liabilities": {
						"type": "number",
						"format": "double",
						"description": "The tax liabilities of the company."
					},
					"shareholders_equity": {
						"type": "number",
						"format": "double",
						"description": "The shareholders' equity of the company."
					},
					"retained_earnings": {
						"type": "number",
						"format": "double",
						"description": "The retained earnings of the company."
					},
					"accumulated_other_comprehensive_income": {
						"type": "number",
						"format": "double",
						"description": "The accumulated other comprehensive income of the company."
					},
					"total_debt": {
						"type": "number",
						"format": "double",
						"description": "The total debt of the company."
					}
				},
				"required": [
					"ticker",
					"calendar_date",
					"report_period",
					"period",
					"currency",
					"total_assets",
					"current_assets",
					"cash_and_equivalents",
					"inventory",
					"current_investments",
					"trade_and_non_trade_receivables",
					"non_current_assets",
					"property_plant_and_equipment",
					"goodwill_and_intangible_assets",
					"investments",
					"non_current_investments",
					"outstanding_shares",
					"tax_assets",
					"total_liabilities",
					"current_liabilities",
					"current_debt",
					"trade_and_non_trade_payables",
					"deferred_revenue",
					"deposit_liabilities",
					"non_current_liabilities",
					"non_current_debt",
					"tax_liabilities",
					"shareholders_equity",
					"retained_earnings",
					"accumulated_other_comprehensive_income",
					"total_debt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BalanceSheetsAPIResponse": {
				"description": "Represents the response of the `getBalanceSheets` endpoint.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/BalanceSheet"
						},
						"type": "array",
						"description": "The balance sheet data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CashFlowStatement": {
				"description": "Represents a cash flow statement for a specific financial period.",
				"properties": {
					"ticker": {
						"type": "string",
						"description": "The ticker symbol of the company."
					},
					"calendar_date": {
						"type": "string",
						"description": "The calendar date of the cash flow statement."
					},
					"report_period": {
						"type": "string",
						"description": "The reporting period of the cash flow statement."
					},
					"period": {
						"type": "string",
						"enum": [
							"quarterly",
							"ttm",
							"annual"
						],
						"description": "The period type of the cash flow statement.\nCan be \"quarterly\", \"ttm\" (trailing twelve months), or \"annual\"."
					},
					"currency": {
						"type": "string",
						"description": "The currency in which the cash flow amounts are denominated."
					},
					"net_cash_flow_from_operations": {
						"type": "number",
						"format": "double",
						"description": "Net cash flow from operating activities."
					},
					"depreciation_and_amortization": {
						"type": "number",
						"format": "double",
						"description": "Depreciation and amortization expenses."
					},
					"share_based_compensation": {
						"type": "number",
						"format": "double",
						"description": "Share-based compensation expenses."
					},
					"net_cash_flow_from_investing": {
						"type": "number",
						"format": "double",
						"description": "Net cash flow from investing activities."
					},
					"capital_expenditure": {
						"type": "number",
						"format": "double",
						"description": "Capital expenditures."
					},
					"business_acquisitions_and_disposals": {
						"type": "number",
						"format": "double",
						"description": "Cash flow from business acquisitions and disposals."
					},
					"investment_acquisitions_and_disposals": {
						"type": "number",
						"format": "double",
						"description": "Cash flow from investment acquisitions and disposals."
					},
					"net_cash_flow_from_financing": {
						"type": "number",
						"format": "double",
						"description": "Net cash flow from financing activities."
					},
					"issuance_or_repayment_of_debt_securities": {
						"type": "number",
						"format": "double",
						"description": "Cash flow from issuance or repayment of debt securities."
					},
					"issuance_or_purchase_of_equity_shares": {
						"type": "number",
						"format": "double",
						"description": "Cash flow from issuance or purchase of equity shares."
					},
					"dividends_and_other_cash_distributions": {
						"type": "number",
						"format": "double",
						"description": "Cash flow from dividends and other cash distributions."
					},
					"change_in_cash_and_equivalents": {
						"type": "number",
						"format": "double",
						"description": "Change in cash and cash equivalents."
					},
					"effect_of_exchange_rate_changes": {
						"type": "number",
						"format": "double",
						"description": "Effect of exchange rate changes on cash and cash equivalents."
					}
				},
				"required": [
					"ticker",
					"calendar_date",
					"report_period",
					"period",
					"currency",
					"net_cash_flow_from_operations",
					"depreciation_and_amortization",
					"share_based_compensation",
					"net_cash_flow_from_investing",
					"capital_expenditure",
					"business_acquisitions_and_disposals",
					"investment_acquisitions_and_disposals",
					"net_cash_flow_from_financing",
					"issuance_or_repayment_of_debt_securities",
					"issuance_or_purchase_of_equity_shares",
					"dividends_and_other_cash_distributions",
					"change_in_cash_and_equivalents",
					"effect_of_exchange_rate_changes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CashFlowStatementsAPIResponse": {
				"description": "Represents the response of the `getCashFlowStatements` endpoint.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/CashFlowStatement"
						},
						"type": "array",
						"description": "The cash flow statement data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SegmentedRevenueItem": {
				"description": "Represents an item of segmented revenue data.",
				"properties": {
					"axis": {
						"type": "string",
						"description": "The axis of the revenue data."
					},
					"key": {
						"type": "string",
						"description": "The key associated with the revenue data."
					},
					"value": {
						"type": "number",
						"format": "double",
						"description": "The value of the revenue data."
					},
					"segment": {
						"type": "string",
						"description": "The segment of the revenue data."
					},
					"start_period": {
						"type": "string",
						"description": "The start period of the revenue data (optional)."
					},
					"end_period": {
						"type": "string",
						"description": "The end period of the revenue data (optional)."
					}
				},
				"required": [
					"axis",
					"key",
					"value",
					"segment"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SegmentedRevenue": {
				"description": "Represents the segmented revenue data for a specific company.",
				"properties": {
					"ticker": {
						"type": "string",
						"description": "The stock ticker symbol of the company."
					},
					"report_period": {
						"type": "string",
						"description": "The reporting period for the revenue data."
					},
					"period": {
						"type": "string",
						"enum": [
							"annual",
							"quarterly"
						],
						"description": "The type of reporting period, either annual or quarterly."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/SegmentedRevenueItem"
						},
						"type": "array",
						"description": "An array of segmented revenue items."
					}
				},
				"required": [
					"ticker",
					"report_period",
					"period",
					"items"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SegmentedRevenuesAPIResponse": {
				"description": "Represents the response of the `getSegmentedRevenues` endpoint.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/SegmentedRevenue"
						},
						"type": "array",
						"description": "The segmented revenue data"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AllFinancials": {
				"description": "Represents a collection of financial statements.",
				"properties": {
					"income_statements": {
						"items": {
							"$ref": "#/components/schemas/IncomeStatement"
						},
						"type": "array",
						"description": "An array of income statements."
					},
					"balance_sheets": {
						"items": {
							"$ref": "#/components/schemas/BalanceSheet"
						},
						"type": "array",
						"description": "An array of balance sheets."
					},
					"cash_flow_statements": {
						"items": {
							"$ref": "#/components/schemas/CashFlowStatement"
						},
						"type": "array",
						"description": "An array of cash flow statements."
					}
				},
				"required": [
					"income_statements",
					"balance_sheets",
					"cash_flow_statements"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AllFinancialsAPIResponse": {
				"description": "Represents the response of the `getAllFinancials` endpoint.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/AllFinancials",
						"description": "The all financials data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AvailableTickersAPIResponse": {
				"description": "Represents the response of the `getAvailableTickers` endpoint.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The available tickers."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InsiderTransaction": {
				"description": "Represents an insider transaction for a financial dataset.",
				"properties": {
					"ticker": {
						"type": "string",
						"description": "The ticker symbol of the company."
					},
					"issuer": {
						"type": "string",
						"description": "The issuer of the security."
					},
					"name": {
						"type": "string",
						"description": "The name of the insider."
					},
					"title": {
						"type": "string",
						"description": "The title of the insider."
					},
					"is_board_director": {
						"type": "boolean",
						"description": "Indicates if the insider is a board director."
					},
					"transaction_date": {
						"type": "string",
						"description": "The date of the transaction."
					},
					"transaction_shares": {
						"type": "number",
						"format": "double",
						"description": "The number of shares involved in the transaction."
					},
					"transaction_price_per_share": {
						"type": "number",
						"format": "double",
						"description": "The price per share at which the transaction occurred."
					},
					"transaction_value": {
						"type": "number",
						"format": "double",
						"description": "The total value of the transaction."
					},
					"shares_owned_before_transaction": {
						"type": "number",
						"format": "double",
						"description": "The number of shares owned before the transaction."
					},
					"shares_owned_after_transaction": {
						"type": "number",
						"format": "double",
						"description": "The number of shares owned after the transaction."
					},
					"security_title": {
						"type": "string",
						"description": "The title of the security involved in the transaction."
					},
					"filing_date": {
						"type": "string",
						"description": "The date the transaction was filed."
					}
				},
				"required": [
					"ticker",
					"issuer",
					"name",
					"title",
					"is_board_director",
					"transaction_date",
					"transaction_shares",
					"transaction_price_per_share",
					"transaction_value",
					"shares_owned_before_transaction",
					"shares_owned_after_transaction",
					"security_title",
					"filing_date"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InsiderTransactionsAPIResponse": {
				"description": "Represents the response of the `getInsiderTransactions` endpoint.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/InsiderTransaction"
						},
						"type": "array",
						"description": "The insider transaction data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OptionsChainItem": {
				"description": "Represents an item in an options chain.",
				"properties": {
					"ticker": {
						"type": "string",
						"description": "The ticker symbol of the underlying asset."
					},
					"type": {
						"type": "string",
						"enum": [
							"Call",
							"Put"
						],
						"description": "The type of option, either \"Call\" or \"Put\"."
					},
					"strike_price": {
						"type": "number",
						"format": "double",
						"description": "The strike price of the option."
					},
					"expiration_date": {
						"type": "string",
						"description": "The expiration date of the option in ISO 8601 format."
					},
					"shares_per_contract": {
						"type": "number",
						"format": "double",
						"description": "The number of shares per contract."
					},
					"volume": {
						"type": "number",
						"format": "double",
						"description": "The trading volume of the option."
					},
					"open_interest": {
						"type": "number",
						"format": "double",
						"description": "The open interest of the option."
					},
					"bid_price": {
						"type": "number",
						"format": "double",
						"description": "The bid price of the option."
					},
					"bid_size": {
						"type": "number",
						"format": "double",
						"description": "The bid size of the option."
					},
					"ask_price": {
						"type": "number",
						"format": "double",
						"description": "The ask price of the option."
					},
					"ask_size": {
						"type": "number",
						"format": "double",
						"description": "The ask size of the option."
					},
					"last_trade_price": {
						"type": "number",
						"format": "double",
						"description": "The last traded price of the option."
					},
					"last_trade_size": {
						"type": "number",
						"format": "double",
						"description": "The size of the last trade."
					},
					"last_trade_time": {
						"type": "string",
						"description": "The time of the last trade in ISO 8601 format."
					},
					"last_trade_time_nanoseconds": {
						"type": "number",
						"format": "double",
						"description": "The nanoseconds part of the last trade time."
					}
				},
				"required": [
					"ticker",
					"type",
					"strike_price",
					"expiration_date",
					"shares_per_contract",
					"volume",
					"open_interest",
					"bid_price",
					"bid_size",
					"ask_price",
					"ask_size",
					"last_trade_price",
					"last_trade_size",
					"last_trade_time",
					"last_trade_time_nanoseconds"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OptionsChainAPIResponse": {
				"description": "Represents the response of the `getOptionsChain` endpoint.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/OptionsChainItem"
						},
						"type": "array",
						"description": "The options chain data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PriceData": {
				"description": "Represents the price data for a financial instrument.",
				"properties": {
					"open": {
						"type": "number",
						"format": "double",
						"description": "The opening price of the instrument."
					},
					"close": {
						"type": "number",
						"format": "double",
						"description": "The closing price of the instrument."
					},
					"high": {
						"type": "number",
						"format": "double",
						"description": "The highest price of the instrument during the time period."
					},
					"low": {
						"type": "number",
						"format": "double",
						"description": "The lowest price of the instrument during the time period."
					},
					"volume": {
						"type": "number",
						"format": "double",
						"description": "The trading volume of the instrument."
					},
					"time": {
						"type": "string",
						"description": "The time of the data point in ISO 8601 format."
					},
					"time_milliseconds": {
						"type": "number",
						"format": "double",
						"description": "The time of the data point in milliseconds since the Unix epoch."
					}
				},
				"required": [
					"open",
					"close",
					"high",
					"low",
					"volume",
					"time",
					"time_milliseconds"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PricesAPIResponse": {
				"description": "Represents the response of the `getPrices` endpoint.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/PriceData"
						},
						"type": "array",
						"description": "The price data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PriceInterval": {
				"type": "string",
				"enum": [
					"second",
					"minute",
					"day",
					"week",
					"month",
					"quarter",
					"year"
				],
				"description": "Represents the price interval for historical price data."
			},
			"SearchResult": {
				"description": "Represents a financial dataset search result.",
				"properties": {
					"ticker": {
						"type": "string",
						"description": "The stock ticker symbol of the company."
					},
					"report_period": {
						"type": "string",
						"description": "The reporting period of the financial data."
					},
					"period": {
						"type": "string",
						"description": "The currency in which the financial data is denominated."
					},
					"currency": {
						"type": "string",
						"description": "The currency in which the financial data is denominated."
					}
				},
				"required": [
					"ticker",
					"report_period",
					"period",
					"currency"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"SearchFinancialsAPIResponse": {
				"description": "Represents the response of the `searchFinancials` endpoint.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/SearchResult"
						},
						"type": "array",
						"description": "The search results."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SearchFilter": {
				"description": "Represents a filter to be applied in a search query.",
				"properties": {
					"field": {
						"type": "string",
						"description": "The name of the field to filter on."
					},
					"operator": {
						"type": "string",
						"enum": [
							"eq",
							"gt",
							"gte",
							"lt",
							"lte"
						],
						"description": "The operator to use for comparison."
					},
					"value": {
						"type": "number",
						"format": "double",
						"description": "The value to compare the field against."
					}
				},
				"required": [
					"field",
					"operator",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SearchRequest": {
				"description": "Represents a request to search for financial datasets.",
				"properties": {
					"period": {
						"type": "string",
						"enum": [
							"annual",
							"quarterly",
							"ttm"
						],
						"description": "The reporting period for the financial data."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "The maximum number of results to return."
					},
					"order_by": {
						"type": "string",
						"enum": [
							"ticker",
							"-ticker",
							"report_period",
							"-report_period"
						],
						"description": "The field by which to order the results."
					},
					"currency": {
						"type": "string",
						"enum": [
							"USD",
							"EUR",
							"GBP",
							"JPY",
							"CHF",
							"AUD",
							"CAD",
							"SEK"
						],
						"description": "The currency in which the financial data is denominated."
					},
					"filters": {
						"items": {
							"$ref": "#/components/schemas/SearchFilter"
						},
						"type": "array",
						"description": "An array of filters to apply to the search."
					}
				},
				"required": [
					"filters"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PriceSnapshot": {
				"description": "Represents a snapshot of a financial instrument's price at a specific point in time.",
				"properties": {
					"price": {
						"type": "number",
						"format": "double",
						"description": "The stock ticker symbol of the company."
					},
					"ticker": {
						"type": "string",
						"description": "The percentage change in price for the day."
					},
					"day_change": {
						"type": "number",
						"format": "double",
						"description": "The absolute change in price for the day."
					},
					"day_change_percent": {
						"type": "number",
						"format": "double",
						"description": "The percentage change in price for the day."
					},
					"time": {
						"type": "string",
						"description": "The opening price of the instrument."
					},
					"time_nanoseconds": {
						"type": "number",
						"format": "double",
						"description": "The time of the snapshot in milliseconds since the Unix epoch."
					}
				},
				"required": [
					"price",
					"ticker",
					"day_change",
					"day_change_percent",
					"time",
					"time_nanoseconds"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PriceSnapshotAPIResponse": {
				"description": "Represents the response of the `getPriceSnapshot` endpoint.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/PriceSnapshot",
						"description": "The price snapshot data."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LineItemsSearchResult": {
				"description": "Represents the result of a search for line items in financial datasets.",
				"properties": {
					"ticker": {
						"type": "string",
						"description": "The stock ticker symbol."
					},
					"report_period": {
						"type": "string",
						"description": "The reporting period of the financial data."
					},
					"period": {
						"type": "string",
						"description": "The period for which the financial data is reported."
					},
					"currency": {
						"type": "string",
						"description": "The currency in which the financial data is denominated."
					}
				},
				"required": [
					"ticker",
					"report_period",
					"period",
					"currency"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"LineItemsSearchAPIResponse": {
				"description": "Represents the response of the `searchFinancials` endpoint.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/LineItemsSearchResult"
						},
						"type": "array",
						"description": "The search results."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.string_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"JupiterAPIResponse_Record_string.string__": {
				"description": "Represents the structure of a response from the Jupiter API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"$ref": "#/components/schemas/Record_string.string_",
						"description": "Optional data returned by the API. The type of this property is determined by the generic type parameter `T`."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"JupiterAPIResponse_any_": {
				"description": "Represents the structure of a response from the Jupiter API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"description": "Optional data returned by the API. The type of this property is determined by the generic type parameter `T`."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"JupiterAPIResponse_string-Array_": {
				"description": "Represents the structure of a response from the Jupiter API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Optional data returned by the API. The type of this property is determined by the generic type parameter `T`."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"JupiterExecuteFunctionResult": {
				"description": "Represents the result of executing a function in the Jupiter system.",
				"properties": {
					"transaction": {
						"description": "The transaction object associated with the execution."
					},
					"function": {
						"type": "string",
						"description": "The name of the function that was executed."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters passed to the function."
					},
					"data": {
						"description": "Additional data returned by the function execution."
					},
					"success": {
						"type": "boolean",
						"description": "Indicates whether the function execution was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the execution result."
					},
					"jupiter": {
						"description": "The Jupiter-specific data related to the execution."
					},
					"transactionHash": {
						"type": "string",
						"description": "The hash of the transaction associated with the"
					}
				},
				"required": [
					"function",
					"params"
				],
				"type": "object",
				"additionalProperties": false
			},
			"JupiterAPIResponse_JupiterExecuteFunctionResult_": {
				"description": "Represents the structure of a response from the Jupiter API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"$ref": "#/components/schemas/JupiterExecuteFunctionResult",
						"description": "Optional data returned by the API. The type of this property is determined by the generic type parameter `T`."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_JupiterInputBody.Exclude_keyofJupiterInputBody.accountName__": {
				"properties": {
					"inputMint": {
						"type": "string",
						"description": "The mint address of the input token."
					},
					"outputMint": {
						"type": "string",
						"description": "The mint address of the output token."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The amount of input tokens to be exchanged."
					},
					"slippage": {
						"type": "number",
						"format": "double",
						"description": "The maximum allowable slippage for the transaction, expressed as a percentage.\nOptional."
					},
					"feeBps": {
						"type": "number",
						"format": "double",
						"description": "The fee in basis points (bps) to be applied to the transaction.\nOptional."
					},
					"dryrun": {
						"type": "boolean",
						"description": "If true, the transaction will be simulated but not executed.\nOptional."
					},
					"broadcast": {
						"type": "boolean",
						"description": "If true, the transaction will be broadcast to the network.\nOptional."
					}
				},
				"required": [
					"inputMint",
					"outputMint",
					"amount"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_JupiterInputBody.accountName_": {
				"$ref": "#/components/schemas/Pick_JupiterInputBody.Exclude_keyofJupiterInputBody.accountName__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateLimitOrderBody": {
				"properties": {
					"inputMint": {
						"type": "string"
					},
					"outputMint": {
						"type": "string"
					},
					"maker": {
						"type": "string"
					},
					"payer": {
						"type": "string"
					},
					"makingAmount": {
						"type": "string"
					},
					"takingAmount": {
						"type": "string"
					},
					"expiredAt": {
						"type": "string"
					},
					"feeBps": {
						"type": "string"
					},
					"computeUnitPrice": {
						"type": "string"
					},
					"referral": {
						"type": "string"
					},
					"inputTokenProgram": {
						"type": "string"
					},
					"outputTokenProgram": {
						"type": "string"
					},
					"wrapAndUnwrapSol": {
						"type": "boolean"
					},
					"dryrun": {
						"type": "boolean"
					},
					"broadcast": {
						"type": "boolean"
					}
				},
				"required": [
					"inputMint",
					"outputMint",
					"maker",
					"payer",
					"makingAmount",
					"takingAmount",
					"dryrun",
					"broadcast"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LendingPoolAPIResponse_number_": {
				"description": "Represents the structure of the API response for the Lending Pool.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "Provides a message related to the API response."
					},
					"data": {
						"type": "number",
						"format": "double",
						"description": "Contains the data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LendingPoolTransaction": {
				"description": "Represents a transaction in the lending pool.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data payload of the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value being transferred in the transaction."
					},
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"from": {
						"type": "string",
						"description": "The sender address of the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction (optional)."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction (optional)."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas for the transaction (optional)."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas for the transaction (optional)."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce of the transaction."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of the transaction (optional)."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID of the blockchain network."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LendingPoolExecuteFunctionResult": {
				"properties": {
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "Optional response from broadcasting the raw transaction."
					},
					"message": {
						"type": "string",
						"description": "Optional message providing additional information about the execution result."
					},
					"success": {
						"type": "boolean",
						"description": "Optional flag indicating if the function execution was successful."
					},
					"user_op": {
						"type": "string",
						"description": "Optional user operation identifier."
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "Optional transaction data."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters passed to the executed function."
					},
					"function": {
						"type": "string",
						"description": "The name of the executed function."
					},
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "Optional response from simulating asset changes."
					},
					"transaction": {
						"$ref": "#/components/schemas/LendingPoolTransaction",
						"description": "The transaction details of the executed function."
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object",
				"description": "Represents the result of executing a function on the lending pool."
			},
			"LendingPoolAPIResponse_LendingPoolExecuteFunctionResult_": {
				"description": "Represents the structure of the API response for the Lending Pool.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "Provides a message related to the API response."
					},
					"data": {
						"$ref": "#/components/schemas/LendingPoolExecuteFunctionResult",
						"description": "Contains the data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LendingPoolInputBody": {
				"description": "Interface representing the input body for LendingPool operations.\nExtends the InputBody interface.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The address to which the operation is directed."
					},
					"data": {
						"type": "string",
						"description": "Additional data for the operation."
					},
					"value": {
						"type": "string",
						"description": "The value involved in the operation."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce for the transaction"
					},
					"simulate": {
						"type": "boolean",
						"description": "Flag indicating if the operation should be simulated."
					},
					"gas": {
						"type": "string",
						"description": "The gas for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Flag indicating if the operation is a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Flag indicating if the operation is performed by an Externally Owned Account."
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address involved in the operation."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Flag indicating if the transaction should be broadcasted."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Flag indicating if the nonce should always be incremented."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the operation."
					},
					"amount": {
						"type": "string",
						"description": "The amount involved in the operation."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the operation is performed."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The address of the receiver."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Array of assets involved in the operation."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Array of amounts involved in the operation."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "Array of modes involved in the operation."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters for the operation."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode for the operation."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Flag indicating if the asset should be used as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the operation."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Flag indicating if AToken should be received."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"LendingPoolAPIResponse_any_": {
				"description": "Represents the structure of the API response for the Lending Pool.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "Provides a message related to the API response."
					},
					"data": {
						"description": "Contains the data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LendingPoolAPIResponse_string-Array_": {
				"description": "Represents the structure of the API response for the Lending Pool.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "Provides a message related to the API response."
					},
					"data": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Contains the data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LendingPoolAPIResponse_string_": {
				"description": "Represents the structure of the API response for the Lending Pool.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "Provides a message related to the API response."
					},
					"data": {
						"type": "string",
						"description": "Contains the data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LendingPoolAPIResponse_boolean_": {
				"description": "Represents the structure of the API response for the Lending Pool.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "Provides a message related to the API response."
					},
					"data": {
						"type": "boolean",
						"description": "Contains the data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LeveragerAPIResponse_string_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LeveragerAPIResponse_boolean_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "boolean"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LeveragerTransaction": {
				"description": "Represents a transaction for the Leverager.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data payload of the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value to be transferred in the transaction."
					},
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"from": {
						"type": "string",
						"description": "The sender address of the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction (optional)."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction (optional)."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas for the transaction (optional)."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas for the transaction (optional)."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce of the transaction."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of the transaction (optional)."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID of the blockchain network."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LeveragerExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "Optional response from simulating asset changes"
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "Optional response from broadcasting the raw transaction"
					},
					"message": {
						"type": "string",
						"description": "Optional message providing additional information about the execution"
					},
					"success": {
						"type": "boolean",
						"description": "Optional flag indicating if the execution was successful"
					},
					"user_op": {
						"type": "string",
						"description": "Optional user operation identifier"
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "Optional transaction data"
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters passed to the function"
					},
					"function": {
						"type": "string",
						"description": "The name of the function that was executed"
					},
					"transaction": {
						"$ref": "#/components/schemas/LeveragerTransaction",
						"description": "The transaction associated with the"
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object"
			},
			"LeveragerAPIResponse_LeveragerExecuteFunctionResult_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/LeveragerExecuteFunctionResult"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LeveragerInputBody": {
				"description": "Represents the input body for the Leverager.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"data": {
						"type": "string",
						"description": "Additional data for the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value of the transaction."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce for the transaction."
					},
					"simulate": {
						"type": "boolean",
						"description": "Indicates if the transaction should be simulated."
					},
					"gas": {
						"type": "string",
						"description": "The gas amount for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Indicates if the transaction is a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Indicates if the transaction is from an externally owned account."
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address involved in the transaction."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Indicates if the transaction should be broadcasted."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Indicates if the nonce should always be incremented\nfor the transaction."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount involved in the transaction."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "An array of assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters for the transaction."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"type": "string",
						"description": "The minimum health factor required."
					},
					"premiums": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "An array of premiums for the transaction."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user in the\ntransaction."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"type": "string",
						"description": "The initial deposit amount."
					},
					"borrowAmount": {
						"type": "string",
						"description": "The amount to be borrowed."
					},
					"amouts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "An array of amounts corresponding to the assets."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"TokenDetails": {
				"properties": {
					"address": {
						"type": "string"
					},
					"chainId": {
						"type": "number",
						"format": "double"
					},
					"symbol": {
						"type": "string"
					},
					"decimals": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"coinKey": {
						"type": "string"
					},
					"logoURI": {
						"type": "string"
					},
					"priceUSD": {
						"type": "string"
					}
				},
				"required": [
					"address",
					"chainId",
					"symbol",
					"decimals",
					"name",
					"coinKey",
					"logoURI",
					"priceUSD"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Action": {
				"properties": {
					"fromChainId": {
						"type": "number",
						"format": "double"
					},
					"fromAmount": {
						"type": "string"
					},
					"fromToken": {
						"$ref": "#/components/schemas/TokenDetails"
					},
					"fromAddress": {
						"type": "string"
					},
					"toChainId": {
						"type": "number",
						"format": "double"
					},
					"toToken": {
						"$ref": "#/components/schemas/TokenDetails"
					},
					"toAddress": {
						"type": "string"
					},
					"slippage": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"fromChainId",
					"fromAmount",
					"fromToken",
					"fromAddress",
					"toChainId",
					"toToken",
					"toAddress",
					"slippage"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenInfo": {
				"properties": {
					"address": {
						"type": "string"
					},
					"symbol": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"decimals": {
						"type": "number",
						"format": "double"
					},
					"logoURI": {
						"type": "string"
					}
				},
				"required": [
					"address",
					"symbol",
					"name",
					"decimals"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GasCost": {
				"properties": {
					"type": {
						"type": "string"
					},
					"price": {
						"type": "string"
					},
					"estimate": {
						"type": "string"
					},
					"limit": {
						"type": "string"
					},
					"amount": {
						"type": "string"
					},
					"amountUSD": {
						"type": "string"
					},
					"token": {
						"$ref": "#/components/schemas/TokenInfo"
					}
				},
				"required": [
					"type",
					"price",
					"estimate",
					"limit",
					"amount",
					"amountUSD",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Token": {
				"properties": {
					"name": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"symbol": {
						"type": "string"
					},
					"decimals": {
						"type": "number",
						"format": "double"
					},
					"logoURI": {
						"type": "string"
					},
					"chainId": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"address",
					"symbol",
					"decimals",
					"logoURI",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FeeCost": {
				"properties": {
					"name": {
						"type": "string"
					},
					"percentage": {
						"type": "number",
						"format": "double"
					},
					"token": {
						"$ref": "#/components/schemas/Token"
					},
					"amount": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"percentage",
					"token",
					"amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Estimate": {
				"properties": {
					"fromAmount": {
						"type": "string"
					},
					"toAmount": {
						"type": "string"
					},
					"toAmountMin": {
						"type": "string"
					},
					"approvalAddress": {
						"type": "string"
					},
					"gasCosts": {
						"items": {
							"$ref": "#/components/schemas/GasCost"
						},
						"type": "array"
					},
					"executionDuration": {
						"type": "number",
						"format": "double"
					},
					"feeCosts": {
						"items": {
							"$ref": "#/components/schemas/FeeCost"
						},
						"type": "array"
					},
					"fromAmountUSD": {
						"type": "string"
					},
					"toAmountUSD": {
						"type": "string"
					}
				},
				"required": [
					"fromAmount",
					"toAmount",
					"toAmountMin",
					"approvalAddress",
					"gasCosts",
					"executionDuration",
					"fromAmountUSD",
					"toAmountUSD"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Step": {
				"properties": {
					"id": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"tool": {
						"type": "string"
					},
					"action": {
						"$ref": "#/components/schemas/Action"
					},
					"estimate": {
						"$ref": "#/components/schemas/Estimate"
					}
				},
				"required": [
					"id",
					"type",
					"tool",
					"action",
					"estimate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Quote": {
				"properties": {
					"id": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"tool": {
						"type": "string"
					},
					"action": {
						"$ref": "#/components/schemas/Action"
					},
					"estimate": {
						"$ref": "#/components/schemas/Estimate"
					},
					"includedSteps": {
						"items": {
							"$ref": "#/components/schemas/Step"
						},
						"type": "array"
					},
					"transactionRequest": {
						"$ref": "#/components/schemas/TransactionRequest"
					}
				},
				"required": [
					"id",
					"type",
					"tool",
					"action",
					"estimate",
					"includedSteps",
					"transactionRequest"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_Quote_": {
				"description": "Represents a standard API response.",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/Quote"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PostQuote": {
				"description": "Interface representing the structure of a post quote.",
				"properties": {
					"quote": {
						"$ref": "#/components/schemas/Quote",
						"description": "The quote object."
					},
					"input": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The input body."
					},
					"signed": {
						"description": "The signed transaction."
					},
					"broadcast": {
						"description": "The broadcasted transaction."
					}
				},
				"required": [
					"quote",
					"input",
					"signed",
					"broadcast"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PostQuote_": {
				"description": "Represents a standard API response.",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/PostQuote"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TransactionStatus": {
				"properties": {
					"chainId": {
						"type": "number",
						"format": "double"
					},
					"txHash": {
						"type": "string"
					},
					"txLink": {
						"type": "string"
					},
					"amount": {
						"type": "string"
					},
					"token": {
						"$ref": "#/components/schemas/TokenInfo"
					},
					"gasPrice": {
						"type": "string"
					},
					"gasUsed": {
						"type": "string"
					}
				},
				"required": [
					"chainId",
					"txHash",
					"txLink",
					"amount",
					"token",
					"gasPrice",
					"gasUsed"
				],
				"type": "object",
				"additionalProperties": false
			},
			"StatusResponse": {
				"properties": {
					"sending": {
						"$ref": "#/components/schemas/TransactionStatus"
					},
					"receiving": {
						"$ref": "#/components/schemas/TransactionStatus"
					},
					"tool": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"substatus": {
						"type": "string"
					}
				},
				"required": [
					"sending",
					"receiving",
					"tool",
					"status",
					"substatus"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_StatusResponse_": {
				"description": "Represents a standard API response.",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/StatusResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Chain": {
				"properties": {
					"key": {
						"type": "string"
					},
					"chainType": {
						"type": "string",
						"enum": [
							"EVM",
							"SOL"
						]
					},
					"name": {
						"type": "string"
					},
					"coin": {
						"type": "string"
					},
					"id": {
						"type": "number",
						"format": "double"
					},
					"mainnet": {
						"type": "boolean"
					},
					"logoURI": {
						"type": "string"
					},
					"tokenlistUrl": {
						"type": "string"
					},
					"multicallAddress": {
						"type": "string"
					},
					"metamask": {
						"properties": {
							"rpcUrls": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"nativeCurrency": {
								"properties": {
									"decimals": {
										"type": "number",
										"format": "double"
									},
									"symbol": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								},
								"required": [
									"decimals",
									"symbol",
									"name"
								],
								"type": "object"
							},
							"chainName": {
								"type": "string"
							},
							"blockExplorerUrls": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"chainId": {
								"type": "string"
							}
						},
						"required": [
							"rpcUrls",
							"nativeCurrency",
							"chainName",
							"blockExplorerUrls",
							"chainId"
						],
						"type": "object"
					},
					"nativeToken": {
						"properties": {
							"priceUSD": {
								"type": "string"
							},
							"logoURI": {
								"type": "string"
							},
							"coinKey": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"decimals": {
								"type": "number",
								"format": "double"
							},
							"symbol": {
								"type": "string"
							},
							"chainId": {
								"type": "number",
								"format": "double"
							},
							"address": {
								"type": "string"
							}
						},
						"required": [
							"priceUSD",
							"logoURI",
							"coinKey",
							"name",
							"decimals",
							"symbol",
							"chainId",
							"address"
						],
						"type": "object"
					}
				},
				"required": [
					"key",
					"chainType",
					"name",
					"coin",
					"id",
					"mainnet",
					"logoURI",
					"tokenlistUrl",
					"multicallAddress",
					"metamask",
					"nativeToken"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainsResponse": {
				"properties": {
					"chains": {
						"items": {
							"$ref": "#/components/schemas/Chain"
						},
						"type": "array"
					}
				},
				"required": [
					"chains"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainsResponse_": {
				"description": "Represents a standard API response.",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/ChainsResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BridgeSupportedChain": {
				"properties": {
					"fromChainId": {
						"type": "number",
						"format": "double"
					},
					"toChainId": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"fromChainId",
					"toChainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Bridge": {
				"properties": {
					"key": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"logoURI": {
						"type": "string"
					},
					"supportedChains": {
						"items": {
							"$ref": "#/components/schemas/BridgeSupportedChain"
						},
						"type": "array"
					}
				},
				"required": [
					"key",
					"name",
					"logoURI",
					"supportedChains"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Exchange": {
				"properties": {
					"key": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"logoURI": {
						"type": "string"
					},
					"supportedChains": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					}
				},
				"required": [
					"key",
					"name",
					"logoURI",
					"supportedChains"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ToolsResponse": {
				"properties": {
					"bridges": {
						"items": {
							"$ref": "#/components/schemas/Bridge"
						},
						"type": "array"
					},
					"exchanges": {
						"items": {
							"$ref": "#/components/schemas/Exchange"
						},
						"type": "array"
					}
				},
				"required": [
					"bridges",
					"exchanges"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ToolsResponse_": {
				"description": "Represents a standard API response.",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/ToolsResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokensResponse": {
				"properties": {
					"tokens": {
						"properties": {},
						"additionalProperties": {
							"items": {
								"$ref": "#/components/schemas/Token"
							},
							"type": "array"
						},
						"type": "object"
					}
				},
				"required": [
					"tokens"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_TokensResponse_": {
				"description": "Represents a standard API response.",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/TokensResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_TokenDetails_": {
				"description": "Represents a standard API response.",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/TokenDetails"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Connection": {
				"properties": {
					"fromChainId": {
						"type": "number",
						"format": "double"
					},
					"toChainId": {
						"type": "number",
						"format": "double"
					},
					"fromTokens": {
						"items": {
							"$ref": "#/components/schemas/Token"
						},
						"type": "array"
					},
					"toTokens": {
						"items": {
							"$ref": "#/components/schemas/Token"
						},
						"type": "array"
					}
				},
				"required": [
					"fromChainId",
					"toChainId",
					"fromTokens",
					"toTokens"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ConnectionsResponse": {
				"properties": {
					"connections": {
						"items": {
							"$ref": "#/components/schemas/Connection"
						},
						"type": "array"
					}
				},
				"required": [
					"connections"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ConnectionsResponse_": {
				"description": "Represents a standard API response.",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/ConnectionsResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenInfoByChainId": {
				"description": "Interface representing token information by chain ID.",
				"properties": {},
				"type": "object",
				"additionalProperties": {
					"items": {
						"$ref": "#/components/schemas/TokenInfo"
					},
					"type": "array"
				}
			},
			"ApiResponse_TokenInfoByChainId_": {
				"description": "Represents a standard API response.",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/TokenInfoByChainId"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LitecoinInput": {
				"description": "Represents the input data required for a Litecoin transaction.",
				"properties": {
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"private_key": {
						"type": "string",
						"description": "The private key of the account."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"LitecoinTransactionOutput": {
				"description": "Represents the output of a Litecoin transaction.",
				"properties": {
					"signedTx": {
						"type": "string",
						"description": "The signed transaction."
					},
					"transaction_hash": {
						"type": "string",
						"description": "The transaction hash."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"LitecoinAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/LitecoinTransactionOutput",
						"description": "The data associated with the Litecoin response."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LitecoinTransactionInput": {
				"description": "Represents an input for a Litecoin transaction.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"value": {
						"type": "number",
						"format": "double",
						"description": "The amount to be sent."
					},
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"compress": {
						"type": "boolean",
						"description": "Indicates whether to compress the public key."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"LynexAPIResponse": {
				"description": "Represents the response structure from the Lynex API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"description": "Optional data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexNFTAPIResponse_string_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexNFTAPIResponse_any_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexNFTTransaction": {
				"description": "Represents a transaction for a Lynex NFT.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data payload of the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value to be transferred in the transaction."
					},
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"from": {
						"type": "string",
						"description": "The sender address of the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction (optional)."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction (optional)."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas for the transaction (optional)."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas for the transaction (optional)."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce of the transaction."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of the transaction (optional)."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID of the blockchain network."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexNFTExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "Optional response from simulating asset changes."
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "Optional response from broadcasting the raw transaction."
					},
					"message": {
						"type": "string",
						"description": "Optional message providing additional information about the execution."
					},
					"success": {
						"type": "boolean",
						"description": "Optional flag indicating whether the execution was successful."
					},
					"user_op": {
						"type": "string",
						"description": "Optional user operation identifier."
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "Optional additional transaction data."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters passed to the executed function."
					},
					"function": {
						"type": "string",
						"description": "The name of the executed function."
					},
					"transaction": {
						"$ref": "#/components/schemas/LynexNFTTransaction",
						"description": "The transaction details of the executed function."
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object"
			},
			"LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/LynexNFTExecuteFunctionResult"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexNFTInputBody": {
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address"
					},
					"data": {
						"type": "string",
						"description": "The data to be sent with the transaction"
					},
					"value": {
						"type": "string",
						"description": "The value to be sent with the transaction"
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction"
					},
					"nonce": {
						"type": "string",
						"description": "The nonce for the transaction"
					},
					"simulate": {
						"type": "boolean",
						"description": "Indicates if the transaction should be simulated"
					},
					"gas": {
						"type": "string",
						"description": "The gas limit for the transaction"
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction"
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Indicates if the transaction should be a dry run"
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Indicates if the transaction is from an externally owned account"
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address"
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Indicates if the operator is approved"
					},
					"broadcast": {
						"type": "boolean",
						"description": "Indicates if the transaction should be broadcasted"
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Indicates if the nonce should always be incremented"
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount to be transferred or locked"
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					},
					"tokenId": {
						"type": "string",
						"description": "The token ID"
					},
					"lockDuration": {
						"type": "string",
						"description": "The lock duration"
					},
					"permanent": {
						"type": "boolean",
						"description": "Indicates if the lock is permanent"
					},
					"delegatee": {
						"type": "string",
						"description": "The delegatee address"
					},
					"splitWeights": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The split weights"
					},
					"operator": {
						"type": "string",
						"description": "The operator address"
					},
					"expiry": {
						"type": "string",
						"description": "The expiry time"
					},
					"v": {
						"type": "string",
						"description": "The v parameter for the signature"
					},
					"r": {
						"type": "string",
						"description": "The r parameter for the signature"
					},
					"s": {
						"type": "string",
						"description": "The s parameter for the signature"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"LynexNFTAPIResponse_boolean_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "boolean"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VestingPeriodData": {
				"properties": {
					"start": {
						"type": "string"
					},
					"end": {
						"type": "string"
					}
				},
				"required": [
					"start",
					"end"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexNFTAPIResponse_VestingPeriodData_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/VestingPeriodData"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexRouterAPIResponse_string_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexRouterAPIResponse__amountOut-string--stable-boolean__": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"properties": {
							"stable": {
								"type": "boolean"
							},
							"amountOut": {
								"type": "string"
							}
						},
						"required": [
							"stable",
							"amountOut"
						],
						"type": "object"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexRouterAPIResponse_string-Array_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexRouterTransaction": {
				"description": "Represents a transaction in the Lynex Router.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data payload of the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value to be transferred in the transaction."
					},
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"from": {
						"type": "string",
						"description": "The sender address of the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction (optional)."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction (optional)."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas unit for the transaction (optional)."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas unit for the transaction (optional)."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce of the transaction."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of the transaction (optional)."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID of the blockchain network."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexRouterExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "Optional response from simulating asset changes."
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "Optional response from broadcasting the raw transaction."
					},
					"message": {
						"type": "string",
						"description": "Optional message providing additional information about the execution."
					},
					"success": {
						"type": "boolean",
						"description": "Optional flag indicating whether the execution was successful."
					},
					"user_op": {
						"type": "string",
						"description": "Optional user operation identifier."
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "Optional additional transaction data."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters passed to the executed function."
					},
					"function": {
						"type": "string",
						"description": "The name of the executed function."
					},
					"transaction": {
						"$ref": "#/components/schemas/LynexRouterTransaction",
						"description": "The transaction details."
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object"
			},
			"LynexRouterAPIResponse_LynexRouterExecuteFunctionResult_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/LynexRouterExecuteFunctionResult"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexRouterInputBody": {
				"description": "Represents the input body for Lynex Router functions.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"data": {
						"type": "string",
						"description": "The data to be included in the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value to be transferred."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce for the transaction."
					},
					"simulate": {
						"type": "boolean",
						"description": "Indicates if the transaction should be simulated."
					},
					"gas": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Indicates if the transaction is a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Indicates if the transaction is from an externally owned account."
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Indicates if the transaction should be broadcasted."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Indicates if the nonce should always be incremented."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount to be transferred."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					},
					"tokenA": {
						"type": "string",
						"description": "The address of token A."
					},
					"tokenB": {
						"type": "string",
						"description": "The address of token B."
					},
					"stable": {
						"type": "string",
						"description": "Indicates if the liquidity is stable."
					},
					"amountADesired": {
						"type": "string",
						"description": "The desired amount of token A."
					},
					"amountBDesired": {
						"type": "string",
						"description": "The desired amount of token B."
					},
					"amountAMin": {
						"type": "string",
						"description": "The minimum amount of token A."
					},
					"amountBMin": {
						"type": "string",
						"description": "The minimum amount of token B."
					},
					"deadline": {
						"type": "string",
						"description": "The deadline for the transaction."
					},
					"token": {
						"type": "string",
						"description": "The address of the token."
					},
					"amountTokenDesired": {
						"type": "string",
						"description": "The desired amount of the token."
					},
					"amountTokenMin": {
						"type": "string",
						"description": "The minimum amount of the token."
					},
					"amountETHMin": {
						"type": "string",
						"description": "The minimum amount of ETH."
					},
					"amountIn": {
						"type": "string",
						"description": "The input amount."
					},
					"amountOutMin": {
						"type": "string",
						"description": "The minimum output amount."
					},
					"routes": {
						"items": {},
						"type": "array",
						"description": "The routes for the transaction."
					}
				},
				"required": [
					"tokenA",
					"tokenB",
					"stable",
					"amountADesired",
					"amountBDesired",
					"amountAMin",
					"amountBMin",
					"deadline",
					"token",
					"amountTokenDesired",
					"amountTokenMin",
					"amountETHMin",
					"amountIn",
					"amountOutMin",
					"routes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexVoterAPIResponse_string_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexVoterAPIResponse_boolean_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "boolean"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexVoterTransaction": {
				"description": "Represents a transaction for the Lynex Voter.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data to be sent with the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value to be sent with the transaction, in wei."
					},
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"from": {
						"type": "string",
						"description": "The sender address of the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "(Optional) The gas price for the transaction, in wei."
					},
					"gasLimit": {
						"type": "string",
						"description": "(Optional) The gas limit for the transaction."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "(Optional) The maximum priority fee per gas for the transaction, in wei."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "(Optional) The maximum fee per gas for the transaction, in wei."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce for the transaction."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "(Optional) The type of the transaction."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID of the network where the transaction is sent."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexVoterExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "Optional response from simulating asset changes."
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "Optional response from broadcasting the raw transaction."
					},
					"message": {
						"type": "string",
						"description": "Optional message providing additional information about the execution result."
					},
					"success": {
						"type": "boolean",
						"description": "Optional flag indicating if the function execution was successful."
					},
					"user_op": {
						"type": "string",
						"description": "Optional user operation identifier."
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "Optional transaction data."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters passed to the executed function."
					},
					"function": {
						"type": "string",
						"description": "The name of the executed function."
					},
					"transaction": {
						"$ref": "#/components/schemas/LynexVoterTransaction",
						"description": "The transaction details of the executed function."
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object"
			},
			"LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/LynexVoterExecuteFunctionResult"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LynexVoterInputBody": {
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"data": {
						"type": "string",
						"description": "The data payload of the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value being transferred in the transaction."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce of the transaction."
					},
					"simulate": {
						"type": "boolean",
						"description": "Flag indicating if the operation should be simulated."
					},
					"gas": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Flag indicating if the operation is a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Flag indicating if the operation is performed by an Externally Owned Account."
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address involved in the operation."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Flag indicating if the transaction should be broadcasted."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Flag indicating if the nonce should always be incremented."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount involved in the transaction."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					},
					"pool_vote": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The pool votes for the transaction."
					},
					"weights": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The weights for the pool votes."
					},
					"gauge": {
						"type": "string",
						"description": "The gauge involved in the operation."
					},
					"pool": {
						"type": "string",
						"description": "The pool involved in the operation."
					},
					"gauge_type": {
						"type": "string",
						"description": "The type of the gauge."
					},
					"bribes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The bribes involved in the operation."
					},
					"tokens": {
						"items": {
							"items": {
								"type": "string"
							},
							"type": "array"
						},
						"type": "array",
						"description": "The tokens involved in the operation."
					},
					"fees": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The fees involved in the operation."
					},
					"gauges": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The gauges involved in the operation."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"MakeFunTokenHelperAPIResponse_string_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MakeFunTokenHelperAPIResponse_number_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MakeFunTokenHelperTransaction": {
				"properties": {
					"data": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"to": {
						"type": "string"
					},
					"from": {
						"type": "string"
					},
					"gasPrice": {
						"type": "string"
					},
					"gasLimit": {
						"type": "string"
					},
					"maxPriorityFeePerGas": {
						"type": "string"
					},
					"maxFeePerGas": {
						"type": "string"
					},
					"nonce": {
						"type": "number",
						"format": "double"
					},
					"type": {
						"type": "number",
						"format": "double"
					},
					"chainId": {
						"type": "string"
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MakeFunTokenHelperExecuteFunctionResult": {
				"properties": {
					"image": {},
					"description": {},
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse"
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse"
					},
					"message": {
						"type": "string"
					},
					"success": {
						"type": "boolean"
					},
					"user_op": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/Transaction"
					},
					"params": {
						"items": {},
						"type": "array"
					},
					"function": {
						"type": "string"
					},
					"transaction": {
						"$ref": "#/components/schemas/MakeFunTokenHelperTransaction"
					}
				},
				"required": [
					"function",
					"transaction"
				],
				"type": "object"
			},
			"MakeFunTokenHelperAPIResponse_MakeFunTokenHelperExecuteFunctionResult_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/MakeFunTokenHelperExecuteFunctionResult"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MakeFunTokenHelperInputBody": {
				"description": "Interface representing the input body for the MakeFunTokenHelper function.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The address to which the tokens will be sent.",
						"default": "\"\""
					},
					"data": {
						"type": "string",
						"description": "Additional data to be sent with the transaction.",
						"default": "\"\""
					},
					"value": {
						"type": "string",
						"description": "The value associated with the transaction.",
						"default": "\"\""
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction.",
						"default": "\"\""
					},
					"nonce": {
						"type": "string",
						"description": "The nonce to be used for the transaction.",
						"default": "\"\""
					},
					"simulate": {
						"type": "boolean",
						"description": "Indicates if the transaction should be simulated.",
						"default": "false"
					},
					"gas": {
						"type": "string",
						"description": "The gas limit for the transaction.",
						"default": "\"\""
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction.",
						"default": "\"\""
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Indicates if the transaction should be a dry run.",
						"default": "false"
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Indicates if the transaction is from an Externally Owned Account.",
						"default": "false"
					},
					"contract_address": {
						"type": "string",
						"description": "The address of the contract.",
						"default": "\"\""
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "\nIndicates if the transaction should be broadcasted.",
						"default": "false"
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Indicates if the nonce should always be incremented.",
						"default": "false"
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount of tokens to be sent.",
						"default": "\"\""
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					},
					"name": {
						"type": "string",
						"description": "The name of the token.",
						"default": "\"\""
					},
					"symbol": {
						"type": "string",
						"description": "The symbol of the token.",
						"default": "\"\""
					},
					"totalSupply": {
						"type": "string",
						"description": "\nThe total supply of the token.",
						"default": "\"\""
					},
					"_params": {
						"type": "string",
						"description": "Additional parameters for the transaction.",
						"default": "\"\""
					},
					"salt": {
						"type": "string",
						"description": "The salt to be used for the transaction.",
						"default": "\"\""
					},
					"startingTick": {
						"type": "string",
						"description": "The starting tick for the transaction.",
						"default": "\"\""
					},
					"feeRecipients": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The recipients of the fees.",
						"default": "[]"
					},
					"feeBPS": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					},
					"tick": {
						"type": "number",
						"format": "double"
					},
					"minTick": {
						"type": "number",
						"format": "double"
					},
					"minTotalSupply": {},
					"maxTotalSupply": {},
					"maxTick": {},
					"base64Image": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"cdxUSDAmount": {
						"type": "string"
					}
				},
				"required": [
					"description",
					"cdxUSDAmount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MultiCallAPIResponse_string_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FlowNode": {
				"properties": {
					"id": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"action",
							"condition",
							"userFunction"
						]
					},
					"data": {
						"properties": {
							"userFunctionName": {
								"type": "string"
							},
							"condition": {
								"type": "string"
							},
							"params": {},
							"function": {
								"type": "string"
							},
							"wrapper": {
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"id",
					"type",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FlowEdge": {
				"properties": {
					"id": {
						"type": "string"
					},
					"source": {
						"type": "string"
					},
					"target": {
						"type": "string"
					},
					"label": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"source",
					"target"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.any_": {
				"properties": {
					"message": {
						"type": "string",
						"description": "The error message."
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"MultiCallInputBody": {
				"properties": {
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"flow": {
						"properties": {
							"edges": {
								"items": {
									"$ref": "#/components/schemas/FlowEdge"
								},
								"type": "array"
							},
							"nodes": {
								"items": {
									"$ref": "#/components/schemas/FlowNode"
								},
								"type": "array"
							}
						},
						"required": [
							"edges",
							"nodes"
						],
						"type": "object"
					},
					"globalVariables": {
						"$ref": "#/components/schemas/Record_string.any_"
					},
					"calls": {
						"items": {
							"properties": {
								"chainId": {
									"type": "string"
								},
								"params": {},
								"function": {
									"type": "string"
								},
								"wrapper": {
									"type": "string"
								},
								"from": {
									"type": "string"
								}
							},
							"required": [
								"chainId",
								"params",
								"function",
								"wrapper",
								"from"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"calls"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MultiCallAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MultiCallAPIResponse_any_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ScheduleJobBody": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"schedule": {
						"type": "string"
					}
				},
				"required": [
					"jobId",
					"schedule"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MultiCallAPIResponse_any-Array_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Json": {
				"anyOf": [
					{
						"type": "string"
					},
					{
						"type": "number",
						"format": "double"
					},
					{
						"type": "boolean"
					},
					{
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/Json"
						},
						"type": "object"
					},
					{
						"items": {
							"$ref": "#/components/schemas/Json"
						},
						"type": "array"
					}
				],
				"nullable": true
			},
			"Jobs": {
				"properties": {
					"user_id": {
						"type": "string"
					},
					"updated_at": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"global_variables": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Json"
							}
						],
						"nullable": true
					},
					"flow_id": {
						"type": "string",
						"nullable": true
					},
					"flow": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Json"
							}
						],
						"nullable": true
					},
					"error": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Json"
							}
						],
						"nullable": true
					},
					"created_at": {
						"type": "string"
					},
					"calls": {
						"$ref": "#/components/schemas/Json"
					}
				},
				"required": [
					"user_id",
					"updated_at",
					"status",
					"id",
					"global_variables",
					"flow_id",
					"flow",
					"error",
					"created_at",
					"calls"
				],
				"type": "object"
			},
			"MultiCallAPIResponse_Jobs-Array_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Jobs"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MultiCallAPIResponse_Jobs_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/Jobs"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateFlowBody": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"nodes": {
						"items": {
							"$ref": "#/components/schemas/FlowNode"
						},
						"type": "array"
					},
					"edges": {
						"items": {
							"$ref": "#/components/schemas/FlowEdge"
						},
						"type": "array"
					},
					"created_at": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"updated_at": {
						"type": "string"
					},
					"user_id": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"description",
					"nodes",
					"edges",
					"created_at",
					"id",
					"updated_at",
					"user_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Flow": {
				"properties": {
					"version": {
						"type": "number",
						"format": "double"
					},
					"user_id": {
						"type": "string"
					},
					"updated_at": {
						"type": "string"
					},
					"nodes": {
						"$ref": "#/components/schemas/Json"
					},
					"name": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"edges": {
						"$ref": "#/components/schemas/Json"
					},
					"description": {
						"type": "string",
						"nullable": true
					},
					"created_at": {
						"type": "string"
					}
				},
				"required": [
					"version",
					"user_id",
					"updated_at",
					"nodes",
					"name",
					"id",
					"edges",
					"description",
					"created_at"
				],
				"type": "object"
			},
			"MultiCallAPIResponse_Flow-Array_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Flow"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MultiCallAPIResponse_Flow_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/Flow"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateFlowBody": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"nodes": {
						"items": {
							"$ref": "#/components/schemas/FlowNode"
						},
						"type": "array"
					},
					"edges": {
						"items": {
							"$ref": "#/components/schemas/FlowEdge"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"OdosTransaction": {
				"description": "Represents a transaction in the Odos system.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data payload of the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value being transferred in the transaction, in wei."
					},
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"from": {
						"type": "string",
						"description": "The sender address of the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction, in wei.\nOptional."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction.\nOptional."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce of the transaction."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID of the blockchain network."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas for EIP-1559 transactions, in wei.\nOptional."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas for EIP-1559 transactions, in wei.\nOptional."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of the transaction.\nOptional."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OdosExecuteFunctionResult": {
				"properties": {
					"approve": {},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "The broadcasted transaction details."
					},
					"odos": {
						"description": "The Odos data."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the execution."
					},
					"success": {
						"type": "boolean",
						"description": "Indicates if the execution was successful."
					},
					"user_op": {
						"type": "string",
						"description": "Indicates if the execution was successful."
					},
					"data": {
						"description": "The data returned by the executed function."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters of the executed function."
					},
					"function": {
						"type": "string",
						"description": "The name of the executed function."
					},
					"transaction": {
						"$ref": "#/components/schemas/OdosTransaction",
						"description": "The transaction details."
					}
				},
				"required": [
					"params",
					"function"
				],
				"type": "object",
				"description": "Represents the result of executing an Odos function."
			},
			"OdosAPIResponse_OdosExecuteFunctionResult_": {
				"description": "Represents the structure of a response from the Odos API.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the API response."
					},
					"data": {
						"$ref": "#/components/schemas/OdosExecuteFunctionResult",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PathVizImageConfig": {
				"properties": {
					"linkColors": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The colors of the links in the path visualization image."
					},
					"nodeColor": {
						"type": "string",
						"description": "The color of the nodes in the path visualization image."
					},
					"nodeTextColor": {
						"type": "string",
						"description": "The color of the text on the nodes in the path visualization image."
					},
					"legendTextColor": {
						"type": "string",
						"description": "The color of the text on the legend in the path visualization image."
					},
					"width": {
						"type": "number",
						"format": "double",
						"description": "The width of the path visualization image."
					},
					"height": {
						"type": "number",
						"format": "double",
						"description": "The height of the path visualization image."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"OdosSwapInputBody": {
				"description": "Represents the input body for an Odos swap operation.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"data": {
						"type": "string",
						"description": "The data to be sent."
					},
					"value": {
						"type": "string",
						"description": "The value to be sent."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce for the transaction."
					},
					"simulate": {
						"type": "boolean",
						"description": "Whether to simulate the transaction."
					},
					"gas": {
						"type": "string",
						"description": "The gas for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Whether to perform a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Whether the transaction is from an externally owned account."
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Whether to broadcast the transaction."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Whether to always increment the nonce."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount involved in the transaction."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "Referral code for the swap.\nOptional."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "An array of input tokens with their respective amounts."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "An array of output tokens with their respective proportions."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The maximum allowable slippage percentage for the swap.\nOptional."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					},
					"sourceBlacklist": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "A list of sources to be excluded from the swap.\nOptional."
					},
					"sourceWhitelist": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "A list of sources to be included in the swap.\nOptional."
					},
					"poolBlacklist": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "A list of pools to be excluded from the swap.\nOptional."
					},
					"pathViz": {
						"type": "boolean",
						"description": "Flag to enable path visualization.\nOptional."
					},
					"pathVizImage": {
						"type": "boolean",
						"description": "Flag to enable path visualization image generation.\nOptional."
					},
					"pathVizImageConfig": {
						"$ref": "#/components/schemas/PathVizImageConfig",
						"description": "Configuration for path visualization image generation.\nOptional."
					},
					"disableRFQs": {
						"type": "boolean",
						"description": "Flag to disable RFQs (Request for Quotes).\nOptional."
					},
					"compact": {
						"type": "boolean",
						"description": "Flag to enable compact mode.\nOptional."
					},
					"likeAsset": {
						"type": "boolean",
						"description": "Flag to indicate if the swap should be performed with like assets.\nOptional."
					},
					"simple": {
						"type": "boolean",
						"description": "Flag to enable simple mode.\nOptional."
					}
				},
				"required": [
					"inputTokens",
					"outputTokens"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AssembleRequest": {
				"description": "Represents a request to assemble a specific path for a user.",
				"properties": {
					"userAddr": {
						"type": "string",
						"description": "The address of the user making the request."
					},
					"pathId": {
						"type": "string",
						"description": "The ID of the path to be assembled."
					},
					"simulate": {
						"type": "boolean",
						"description": "Whether to simulate the transaction."
					},
					"receiver": {
						"type": "string",
						"description": "The address of the receiver, if any."
					}
				},
				"required": [
					"userAddr",
					"pathId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CryptoCurrency": {
				"properties": {
					"networkDisplayName": {
						"type": "string",
						"description": "The display name of the network."
					},
					"icon": {
						"type": "string",
						"description": "The URL or path to the icon representing the cryptocurrency."
					},
					"chainId": {
						"type": "number",
						"format": "double",
						"description": "The chain ID of the network."
					},
					"address": {
						"type": "string",
						"description": "The address of the cryptocurrency on the network."
					},
					"decimals": {
						"type": "number",
						"format": "double",
						"description": "The number of decimal places the cryptocurrency supports."
					},
					"network": {
						"type": "string",
						"description": "The network on which the cryptocurrency operates."
					},
					"symbol": {
						"type": "string",
						"description": "The symbol of the cryptocurrency (e.g., ₿, Ξ)."
					},
					"name": {
						"type": "string",
						"description": "The name of the cryptocurrency."
					},
					"code": {
						"type": "string",
						"description": "The code of the cryptocurrency (e.g., BTC, ETH)."
					},
					"id": {
						"type": "string",
						"description": "The unique identifier of the cryptocurrency."
					}
				},
				"required": [
					"networkDisplayName",
					"icon",
					"chainId",
					"address",
					"decimals",
					"network",
					"symbol",
					"name",
					"code",
					"id"
				],
				"type": "object"
			},
			"FiatCurrency": {
				"properties": {
					"icon": {
						"type": "string",
						"description": "The URL or path to the icon representing the fiat currency."
					},
					"symbol": {
						"type": "string",
						"description": "The symbol of the fiat currency (e.g., $, €)."
					},
					"name": {
						"type": "string",
						"description": "The name of the fiat currency."
					},
					"code": {
						"type": "string",
						"description": "The code of the fiat currency (e.g., USD, EUR)."
					},
					"id": {
						"type": "string",
						"description": "The unique identifier for the fiat currency."
					}
				},
				"required": [
					"icon",
					"symbol",
					"name",
					"code",
					"id"
				],
				"type": "object",
				"description": "Represents a fiat currency."
			},
			"Message": {
				"properties": {
					"fiat": {
						"items": {
							"$ref": "#/components/schemas/FiatCurrency"
						},
						"type": "array",
						"description": "An array of fiat currency objects."
					},
					"crypto": {
						"items": {
							"$ref": "#/components/schemas/CryptoCurrency"
						},
						"type": "array",
						"description": "An array of cryptocurrency objects."
					}
				},
				"required": [
					"fiat",
					"crypto"
				],
				"type": "object"
			},
			"SupportedCurrenciesResponse": {
				"properties": {
					"message": {
						"$ref": "#/components/schemas/Message",
						"description": "The message containing arrays of cryptocurrencies and fiat currencies."
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"description": "Represents the response containing supported currencies."
			},
			"PaymentType": {
				"properties": {
					"icon": {
						"type": "string",
						"description": "The URL or path to the icon representing the payment type."
					},
					"name": {
						"type": "string",
						"description": "The name of the payment type."
					},
					"paymentTypeId": {
						"type": "string",
						"description": "The unique identifier for the payment type."
					}
				},
				"required": [
					"icon",
					"name",
					"paymentTypeId"
				],
				"type": "object",
				"description": "Represents a type of payment method."
			},
			"SupportedPaymentTypesMessage": {
				"properties": {
					"googlepay": {
						"$ref": "#/components/schemas/PaymentType",
						"description": "The payment type for Google Pay."
					},
					"applepay": {
						"$ref": "#/components/schemas/PaymentType",
						"description": "The payment type for Apple Pay."
					},
					"creditcard": {
						"$ref": "#/components/schemas/PaymentType",
						"description": "The payment type for credit cards."
					}
				},
				"required": [
					"googlepay",
					"applepay",
					"creditcard"
				],
				"type": "object",
				"description": "Represents a message containing supported payment types."
			},
			"SupportedPaymentTypesCurrencyResponse": {
				"properties": {
					"message": {
						"$ref": "#/components/schemas/SupportedPaymentTypesMessage",
						"description": "The message containing supported payment types."
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"description": "Represents the response containing supported payment types and their associated message."
			},
			"SupportedDefaultResponse": {
				"properties": {
					"defaults": {
						"properties": {
							"id": {
								"properties": {
									"provider": {
										"type": "string",
										"description": "The provider of the transaction."
									},
									"paymentMethod": {
										"type": "string",
										"description": "The payment method used for the transaction."
									},
									"amount": {
										"type": "number",
										"format": "double",
										"description": "The amount involved in the transaction."
									},
									"target": {
										"type": "string",
										"description": "The destination of the transaction."
									},
									"source": {
										"type": "string",
										"description": "The source of the transaction."
									}
								},
								"required": [
									"provider",
									"paymentMethod",
									"amount",
									"target",
									"source"
								],
								"type": "object",
								"description": "The unique identifier for the transaction."
							}
						},
						"required": [
							"id"
						],
						"type": "object",
						"description": "The default transaction details."
					},
					"recommended": {
						"properties": {
							"provider": {
								"type": "string",
								"description": "The provider of the transaction."
							},
							"paymentMethod": {
								"type": "string",
								"description": "The payment method used for the transaction."
							},
							"amount": {
								"type": "number",
								"format": "double",
								"description": "The amount involved in the transaction."
							},
							"target": {
								"type": "string",
								"description": "The destination of the transaction."
							},
							"source": {
								"type": "string",
								"description": "The unique identifier for the transaction."
							}
						},
						"required": [
							"provider",
							"paymentMethod",
							"amount",
							"target",
							"source"
						],
						"type": "object",
						"description": "The recommended transaction details."
					}
				},
				"required": [
					"defaults",
					"recommended"
				],
				"type": "object",
				"description": "Represents the response structure for supported default values."
			},
			"SupportedAssetResponse": {
				"properties": {
					"country": {
						"type": "string",
						"description": "The country code where the assets are supported."
					},
					"assets": {
						"items": {
							"properties": {
								"crypto": {
									"items": {
										"type": "string"
									},
									"type": "array",
									"description": "An array of supported cryptocurrencies."
								},
								"paymentMethods": {
									"items": {
										"type": "string"
									},
									"type": "array",
									"description": "An array of supported payment methods."
								},
								"fiat": {
									"type": "string",
									"description": "The fiat currency code."
								}
							},
							"required": [
								"crypto",
								"paymentMethods",
								"fiat"
							],
							"type": "object"
						},
						"type": "array",
						"description": "An array of objects representing the supported assets."
					}
				},
				"required": [
					"country",
					"assets"
				],
				"type": "object",
				"description": "Represents the response structure for supported assets."
			},
			"GetSupportedOnRampsResponse": {
				"properties": {
					"message": {
						"items": {
							"properties": {
								"id": {
									"type": "string",
									"description": "The unique identifier of the on-ramp."
								},
								"displayName": {
									"type": "string",
									"description": "The display name of the on-ramp."
								},
								"icons": {
									"properties": {
										"png": {
											"properties": {
												"160x160": {
													"type": "string"
												},
												"32x32": {
													"type": "string"
												}
											},
											"required": [
												"160x160",
												"32x32"
											],
											"type": "object",
											"description": "An object containing different sizes of the PNG format of the icon."
										},
										"svg": {
											"type": "string",
											"description": "The URL of the SVG format of the icon."
										}
									},
									"required": [
										"png",
										"svg"
									],
									"type": "object",
									"description": "The URL of the icon for the on-ramp."
								},
								"icon": {
									"type": "string",
									"description": "The on-ramp service."
								}
							},
							"required": [
								"id",
								"displayName",
								"icons",
								"icon"
							],
							"type": "object"
						},
						"type": "array",
						"description": "An array of supported on-ramp objects."
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"description": "Represents the response from the GetSupportedOnRamps API."
			},
			"Quotes": {
				"items": {
					"$ref": "#/components/schemas/Quote"
				},
				"type": "array",
				"description": "Represents an array of Quote objects."
			},
			"SellQuote": {
				"properties": {
					"recommendations": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "A list of recommendations related to the quote."
					},
					"quoteId": {
						"type": "string",
						"description": "The unique identifier for the quote."
					},
					"paymentMethod": {
						"type": "string",
						"description": "The method of payment used for the transaction."
					},
					"ramp": {
						"type": "string",
						"description": "The ramp service used for the transaction."
					},
					"payout": {
						"type": "number",
						"format": "double",
						"description": "The amount to be paid out after fees."
					},
					"transactionFee": {
						"type": "number",
						"format": "double",
						"description": "The fee charged for processing the transaction."
					},
					"networkFee": {
						"type": "number",
						"format": "double",
						"description": "The fee charged by the network for the transaction."
					},
					"rate": {
						"type": "number",
						"format": "double",
						"description": "The exchange rate for the cryptocurrency."
					}
				},
				"required": [
					"recommendations",
					"quoteId",
					"paymentMethod",
					"ramp",
					"payout",
					"transactionFee",
					"networkFee",
					"rate"
				],
				"type": "object",
				"description": "Represents a quote for selling cryptocurrency."
			},
			"SellQuotes": {
				"items": {
					"$ref": "#/components/schemas/SellQuote"
				},
				"type": "array",
				"description": "Represents an array of SellQuote objects."
			},
			"TransactionInput": {
				"properties": {
					"supportedParams": {
						"properties": {
							"partnerData": {
								"properties": {
									"redirectUrl": {
										"properties": {
											"success": {
												"type": "string",
												"description": "The URL to redirect to upon successful transaction."
											}
										},
										"required": [
											"success"
										],
										"type": "object",
										"description": "Redirect URLs for the transaction."
									}
								},
								"required": [
									"redirectUrl"
								],
								"type": "object",
								"description": "Partner-specific data for the transaction."
							},
							"theme": {
								"properties": {
									"borderRadius": {
										"type": "number",
										"format": "double",
										"nullable": true,
										"description": "The border radius of the theme."
									},
									"cardColor": {
										"type": "string",
										"description": "The card color of the theme."
									},
									"secondaryTextColor": {
										"type": "string",
										"description": "The secondary text color of the theme."
									},
									"primaryTextColor": {
										"type": "string",
										"description": "The primary text color of the theme."
									},
									"secondaryColor": {
										"type": "string",
										"description": "The secondary color of the theme."
									},
									"primaryColor": {
										"type": "string",
										"description": "The primary color of the theme."
									},
									"themeName": {
										"type": "string",
										"description": "The name of the theme."
									},
									"isDark": {
										"type": "boolean",
										"description": "Indicates if the theme is dark."
									}
								},
								"required": [
									"borderRadius",
									"cardColor",
									"secondaryTextColor",
									"primaryTextColor",
									"secondaryColor",
									"primaryColor",
									"themeName",
									"isDark"
								],
								"type": "object",
								"description": "Theme settings for the transaction."
							}
						},
						"required": [
							"partnerData",
							"theme"
						],
						"type": "object",
						"description": "Supported parameters for the transaction."
					},
					"wallet": {
						"properties": {
							"address": {
								"type": "string",
								"description": "The wallet address involved in the transaction."
							}
						},
						"required": [
							"address"
						],
						"type": "object",
						"description": "The wallet information for the transaction."
					},
					"metaData": {
						"properties": {
							"quoteId": {
								"type": "string",
								"description": "The quote ID associated with the transaction."
							}
						},
						"required": [
							"quoteId"
						],
						"type": "object",
						"description": "Additional metadata for the transaction."
					},
					"originatingHost": {
						"type": "string",
						"description": "The originating host of the transaction."
					},
					"partnerContext": {
						"type": "string",
						"description": "The context provided by the partner."
					},
					"uuid": {
						"type": "string",
						"description": "The unique identifier for the transaction."
					},
					"network": {
						"type": "string",
						"description": "The network used for the transaction."
					},
					"paymentMethod": {
						"type": "string",
						"description": "The payment method used for the transaction."
					},
					"type": {
						"type": "string",
						"description": "The type of transaction."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The amount involved in the transaction."
					},
					"destination": {
						"type": "string",
						"description": "The destination of the transaction."
					},
					"source": {
						"type": "string",
						"description": "The source of the transaction."
					},
					"onramp": {
						"type": "string",
						"description": "The onramp service used for the transaction."
					}
				},
				"required": [
					"supportedParams",
					"wallet",
					"metaData",
					"originatingHost",
					"partnerContext",
					"uuid",
					"network",
					"paymentMethod",
					"type",
					"amount",
					"destination",
					"source",
					"onramp"
				],
				"type": "object",
				"description": "Represents the input for a transaction in the OnRamper system."
			},
			"OpenSeaAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OpenSeaNFTInputBody": {
				"description": "Represents the input body for an OpenSea NFT transaction.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"value": {
						"type": "string",
						"description": "The value to be sent in the transaction."
					},
					"data": {
						"type": "string",
						"description": "The data to be sent in the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce of the transaction."
					},
					"gas": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID of the blockchain network."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Indicates if the transaction is a dry run."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Indicates if the transaction should be broadcasted."
					},
					"asset": {
						"$ref": "#/components/schemas/Asset",
						"description": "The asset involved in the transaction."
					},
					"startAmount": {
						"type": "number",
						"format": "double",
						"description": "The starting amount for the offer."
					},
					"expirationTime": {
						"type": "number",
						"format": "double",
						"description": "The expiration time of the offer (optional)."
					}
				},
				"required": [
					"asset",
					"startAmount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OpenSeaCollectionInputBody": {
				"description": "Represents the input body for an OpenSea collection.\nExtends the `OpenSeaInputBody` interface.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"value": {
						"type": "string",
						"description": "The value to be sent in the transaction."
					},
					"data": {
						"type": "string",
						"description": "The data to be sent in the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce of the transaction."
					},
					"gas": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID of the blockchain network."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Indicates if the transaction is a dry run."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Indicates if the transaction should be broadcasted."
					},
					"collectionSlug": {
						"type": "string",
						"description": "The slug identifier for the collection."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The amount of the asset."
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"description": "The quantity of the asset."
					},
					"paymentTokenAddress": {
						"type": "string",
						"description": "The optional address of the payment token."
					}
				},
				"required": [
					"collectionSlug",
					"amount",
					"quantity"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PingResponse": {
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketWrapperNewOrder_string_": {
				"properties": {
					"order": {
						"properties": {
							"signature": {
								"type": "string"
							},
							"signatureType": {
								"type": "number",
								"format": "double"
							},
							"side": {
								"type": "string"
							},
							"feeRateBps": {
								"type": "string"
							},
							"nonce": {
								"type": "string"
							},
							"expiration": {
								"type": "string"
							},
							"takerAmount": {
								"type": "string"
							},
							"makerAmount": {
								"type": "string"
							},
							"tokenId": {
								"type": "string"
							},
							"taker": {
								"type": "string"
							},
							"signer": {
								"type": "string"
							},
							"maker": {
								"type": "string"
							},
							"salt": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"signature",
							"signatureType",
							"side",
							"feeRateBps",
							"nonce",
							"expiration",
							"takerAmount",
							"makerAmount",
							"tokenId",
							"taker",
							"signer",
							"maker",
							"salt"
						],
						"type": "object"
					},
					"owner": {
						"type": "string"
					},
					"orderType": {
						"type": "string"
					}
				},
				"required": [
					"order",
					"owner",
					"orderType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateOrderResponse": {
				"properties": {
					"order": {
						"$ref": "#/components/schemas/PolymarketWrapperNewOrder_string_"
					}
				},
				"required": [
					"order"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_CreateOrderResponse_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/CreateOrderResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateOrderBody": {
				"properties": {
					"chain_id": {
						"type": "string"
					},
					"userOrder": {
						"properties": {
							"taker": {
								"type": "string"
							},
							"expiration": {
								"type": "number",
								"format": "double"
							},
							"nonce": {
								"type": "number",
								"format": "double"
							},
							"feeRateBps": {
								"type": "number",
								"format": "double"
							},
							"side": {
								"type": "string"
							},
							"size": {
								"type": "number",
								"format": "double"
							},
							"price": {
								"type": "number",
								"format": "double"
							},
							"tokenID": {
								"type": "string"
							}
						},
						"required": [
							"side",
							"size",
							"price",
							"tokenID"
						],
						"type": "object"
					},
					"options": {
						"properties": {
							"negRisk": {
								"type": "boolean"
							},
							"tickSize": {
								"type": "string"
							}
						},
						"required": [
							"tickSize"
						],
						"type": "object"
					}
				},
				"required": [
					"chain_id",
					"userOrder",
					"options"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketWrapperSignedOrder": {
				"properties": {
					"maker": {
						"type": "string"
					},
					"taker": {
						"type": "string"
					},
					"tokenId": {
						"type": "string"
					},
					"makerAmount": {
						"type": "string"
					},
					"takerAmount": {
						"type": "string"
					},
					"side": {
						"type": "number",
						"format": "double"
					},
					"expiration": {
						"type": "string"
					},
					"nonce": {
						"type": "string"
					},
					"feeRateBps": {
						"type": "string"
					},
					"signature": {
						"type": "string"
					},
					"salt": {
						"type": "string"
					},
					"signer": {
						"type": "string"
					},
					"signatureType": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"maker",
					"taker",
					"tokenId",
					"makerAmount",
					"takerAmount",
					"side",
					"expiration",
					"nonce",
					"feeRateBps",
					"signature",
					"salt",
					"signer",
					"signatureType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateMarketBuyOrderResponse": {
				"properties": {
					"order": {
						"$ref": "#/components/schemas/PolymarketWrapperSignedOrder"
					}
				},
				"required": [
					"order"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_CreateMarketBuyOrderResponse_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/CreateMarketBuyOrderResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateMarketBuyOrderBody": {
				"properties": {
					"chain_id": {
						"type": "string"
					},
					"userMarketOrder": {
						"properties": {
							"taker": {
								"type": "string"
							},
							"nonce": {
								"type": "number",
								"format": "double"
							},
							"feeRateBps": {
								"type": "number",
								"format": "double"
							},
							"amount": {
								"type": "number",
								"format": "double"
							},
							"price": {
								"type": "number",
								"format": "double"
							},
							"tokenID": {
								"type": "string"
							}
						},
						"required": [
							"amount",
							"tokenID"
						],
						"type": "object"
					},
					"options": {
						"properties": {
							"negRisk": {
								"type": "boolean"
							},
							"tickSize": {
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"chain_id",
					"userMarketOrder"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PostOrderResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"orderID": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"orderID"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_PostOrderResponse_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/PostOrderResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PostOrderBody": {
				"properties": {
					"chain_id": {
						"type": "string"
					},
					"order": {
						"$ref": "#/components/schemas/PolymarketWrapperSignedOrder"
					}
				},
				"required": [
					"chain_id",
					"order"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CancelOrderResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"orderID": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"orderID"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_CancelOrderResponse_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/CancelOrderResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CancelOrderBody": {
				"properties": {
					"chain_id": {
						"type": "string"
					},
					"orderID": {
						"type": "string"
					}
				},
				"required": [
					"chain_id",
					"orderID"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CancelOrdersResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"orderIDs": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"orderIDs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_CancelOrdersResponse_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/CancelOrdersResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CancelOrdersBody": {
				"properties": {
					"chain_id": {
						"type": "string"
					},
					"ordersHashes": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"chain_id",
					"ordersHashes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CancelMarketOrdersResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"orderIDs": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"orderIDs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_CancelMarketOrdersResponse_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/CancelMarketOrdersResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CancelMarketOrdersBody": {
				"properties": {
					"chain_id": {
						"type": "string"
					},
					"payload": {
						"properties": {
							"outcomeId": {
								"type": "string"
							},
							"market": {
								"type": "string"
							}
						},
						"required": [
							"market"
						],
						"type": "object"
					}
				},
				"required": [
					"chain_id",
					"payload"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateBalanceAllowanceResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"newAllowance": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"newAllowance"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_UpdateBalanceAllowanceResponse_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/UpdateBalanceAllowanceResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateBalanceAllowanceBody": {
				"properties": {
					"chain_id": {
						"type": "string"
					},
					"params": {
						"properties": {
							"token_id": {
								"type": "string"
							},
							"asset_type": {
								"type": "string"
							}
						},
						"required": [
							"asset_type"
						],
						"type": "object"
					}
				},
				"required": [
					"chain_id",
					"params"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DropNotificationsResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"droppedCount": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"success",
					"droppedCount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_DropNotificationsResponse_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/DropNotificationsResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DropNotificationsBody": {
				"properties": {
					"chain_id": {
						"type": "string"
					},
					"params": {
						"properties": {
							"notification_ids": {
								"items": {
									"type": "string"
								},
								"type": "array"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"chain_id",
					"params"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginationPayload": {
				"properties": {
					"limit": {
						"type": "number",
						"format": "double"
					},
					"count": {
						"type": "number",
						"format": "double"
					},
					"next_cursor": {
						"type": "string"
					},
					"data": {
						"items": {},
						"type": "array"
					}
				},
				"required": [
					"limit",
					"count",
					"next_cursor",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_PaginationPayload_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/PaginationPayload"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_any_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApproveForPolymarketBody": {
				"properties": {
					"chain_id": {
						"type": "string"
					}
				},
				"required": [
					"chain_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OrderSummary": {
				"properties": {
					"price": {
						"type": "string"
					},
					"size": {
						"type": "string"
					}
				},
				"required": [
					"price",
					"size"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OrderBookSummary": {
				"properties": {
					"market": {
						"type": "string"
					},
					"asset_id": {
						"type": "string"
					},
					"timestamp": {
						"type": "string"
					},
					"bids": {
						"items": {
							"$ref": "#/components/schemas/OrderSummary"
						},
						"type": "array"
					},
					"asks": {
						"items": {
							"$ref": "#/components/schemas/OrderSummary"
						},
						"type": "array"
					},
					"hash": {
						"type": "string"
					}
				},
				"required": [
					"market",
					"asset_id",
					"timestamp",
					"bids",
					"asks",
					"hash"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_OrderBookSummary_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/OrderBookSummary"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OpenOrder": {
				"properties": {
					"id": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"owner": {
						"type": "string"
					},
					"maker_address": {
						"type": "string"
					},
					"market": {
						"type": "string"
					},
					"asset_id": {
						"type": "string"
					},
					"side": {
						"type": "string"
					},
					"original_size": {
						"type": "string"
					},
					"size_matched": {
						"type": "string"
					},
					"price": {
						"type": "string"
					},
					"associate_trades": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"outcome": {
						"type": "string"
					},
					"created_at": {
						"type": "number",
						"format": "double"
					},
					"expiration": {
						"type": "string"
					},
					"order_type": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"status",
					"owner",
					"maker_address",
					"market",
					"asset_id",
					"side",
					"original_size",
					"size_matched",
					"price",
					"associate_trades",
					"outcome",
					"created_at",
					"expiration",
					"order_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OpenOrdersResponse": {
				"items": {
					"$ref": "#/components/schemas/OpenOrder"
				},
				"type": "array"
			},
			"PolymarketAPIResponse_OpenOrdersResponse_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/OpenOrdersResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_OpenOrder_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/OpenOrder"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MakerOrder": {
				"properties": {
					"order_id": {
						"type": "string"
					},
					"owner": {
						"type": "string"
					},
					"maker_address": {
						"type": "string"
					},
					"matched_amount": {
						"type": "string"
					},
					"price": {
						"type": "string"
					},
					"fee_rate_bps": {
						"type": "string"
					},
					"asset_id": {
						"type": "string"
					},
					"outcome": {
						"type": "string"
					}
				},
				"required": [
					"order_id",
					"owner",
					"maker_address",
					"matched_amount",
					"price",
					"fee_rate_bps",
					"asset_id",
					"outcome"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Trade": {
				"properties": {
					"id": {
						"type": "string"
					},
					"taker_order_id": {
						"type": "string"
					},
					"market": {
						"type": "string"
					},
					"asset_id": {
						"type": "string"
					},
					"side": {
						"anyOf": [
							{
								"type": "number",
								"format": "double"
							},
							{
								"type": "string"
							}
						]
					},
					"size": {
						"type": "string"
					},
					"fee_rate_bps": {
						"type": "string"
					},
					"price": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"match_time": {
						"type": "string"
					},
					"last_update": {
						"type": "string"
					},
					"outcome": {
						"type": "string"
					},
					"bucket_index": {
						"type": "number",
						"format": "double"
					},
					"owner": {
						"type": "string"
					},
					"maker_address": {
						"type": "string"
					},
					"maker_orders": {
						"items": {
							"$ref": "#/components/schemas/MakerOrder"
						},
						"type": "array"
					},
					"transaction_hash": {
						"type": "string"
					},
					"trader_side": {
						"type": "string",
						"enum": [
							"TAKER",
							"MAKER"
						]
					}
				},
				"required": [
					"id",
					"taker_order_id",
					"market",
					"asset_id",
					"side",
					"size",
					"fee_rate_bps",
					"price",
					"status",
					"match_time",
					"last_update",
					"outcome",
					"bucket_index",
					"owner",
					"maker_address",
					"maker_orders",
					"transaction_hash",
					"trader_side"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_Trade-Array_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Trade"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Notification": {
				"properties": {
					"type": {
						"type": "number",
						"format": "double"
					},
					"owner": {
						"type": "string"
					},
					"payload": {}
				},
				"required": [
					"type",
					"owner",
					"payload"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_Notification-Array_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Notification"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BalanceAllowanceResponse": {
				"properties": {
					"balance": {
						"type": "string"
					},
					"allowance": {
						"type": "string"
					}
				},
				"required": [
					"balance",
					"allowance"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_BalanceAllowanceResponse_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/BalanceAllowanceResponse"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MarketPrice": {
				"properties": {
					"t": {
						"type": "number",
						"format": "double"
					},
					"p": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"t",
					"p"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_MarketPrice-Array_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/MarketPrice"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Side": {
				"enum": [
					"BUY",
					"SELL"
				],
				"type": "string"
			},
			"MarketTradeEvent": {
				"properties": {
					"event_type": {
						"type": "string"
					},
					"market": {
						"properties": {
							"slug": {
								"type": "string"
							},
							"icon": {
								"type": "string"
							},
							"question": {
								"type": "string"
							},
							"asset_id": {
								"type": "string"
							},
							"condition_id": {
								"type": "string"
							}
						},
						"required": [
							"slug",
							"icon",
							"question",
							"asset_id",
							"condition_id"
						],
						"type": "object"
					},
					"user": {
						"properties": {
							"pseudonym": {
								"type": "string"
							},
							"optimized_profile_picture": {
								"type": "string"
							},
							"profile_picture": {
								"type": "string"
							},
							"username": {
								"type": "string"
							},
							"address": {
								"type": "string"
							}
						},
						"required": [
							"pseudonym",
							"optimized_profile_picture",
							"profile_picture",
							"username",
							"address"
						],
						"type": "object"
					},
					"side": {
						"$ref": "#/components/schemas/Side"
					},
					"size": {
						"type": "string"
					},
					"fee_rate_bps": {
						"type": "string"
					},
					"price": {
						"type": "string"
					},
					"outcome": {
						"type": "string"
					},
					"outcome_index": {
						"type": "number",
						"format": "double"
					},
					"transaction_hash": {
						"type": "string"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"event_type",
					"market",
					"user",
					"side",
					"size",
					"fee_rate_bps",
					"price",
					"outcome",
					"outcome_index",
					"transaction_hash",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PolymarketAPIResponse_MarketTradeEvent-Array_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/MarketTradeEvent"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesNFTAPIResponse_string_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesNFTTransaction": {
				"properties": {
					"data": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"to": {
						"type": "string"
					},
					"from": {
						"type": "string"
					},
					"gasPrice": {
						"type": "string"
					},
					"gasLimit": {
						"type": "string"
					},
					"maxPriorityFeePerGas": {
						"type": "string"
					},
					"maxFeePerGas": {
						"type": "string"
					},
					"nonce": {
						"type": "number",
						"format": "double"
					},
					"type": {
						"type": "number",
						"format": "double"
					},
					"chainId": {
						"type": "string"
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesNFTExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse"
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse"
					},
					"message": {
						"type": "string"
					},
					"success": {
						"type": "boolean"
					},
					"user_op": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/Transaction"
					},
					"params": {
						"items": {},
						"type": "array"
					},
					"function": {
						"type": "string"
					},
					"transaction": {
						"$ref": "#/components/schemas/RamsesNFTTransaction"
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object"
			},
			"RamsesNFTAPIResponse_RamsesNFTExecuteFunctionResult_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/RamsesNFTExecuteFunctionResult"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesNFTInputBody": {
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"data": {
						"type": "string",
						"description": "The data to be sent."
					},
					"value": {
						"type": "string",
						"description": "The value to be sent."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce for the transaction."
					},
					"simulate": {
						"type": "boolean",
						"description": "Whether to simulate the transaction."
					},
					"gas": {
						"type": "string",
						"description": "The gas for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Whether to perform a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Whether the transaction is from an externally owned account."
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Whether to broadcast the transaction."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Whether to always increment the nonce."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount involved in the transaction."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					},
					"tokenId": {
						"type": "string"
					},
					"lock_duration": {
						"type": "string"
					},
					"delegatee": {
						"type": "string"
					},
					"expiry": {
						"type": "string"
					},
					"v": {
						"type": "number",
						"format": "double"
					},
					"r": {
						"type": "string"
					},
					"s": {
						"type": "string"
					},
					"from": {
						"type": "string"
					},
					"operator": {
						"type": "string"
					},
					"_proxy": {
						"type": "string"
					},
					"_team": {
						"type": "string"
					},
					"_block": {
						"type": "string"
					},
					"_t": {
						"type": "string"
					},
					"_idx": {
						"type": "string"
					},
					"token": {
						"type": "string"
					},
					"artProxy": {
						"type": "string"
					},
					"voter": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"LockedData": {
				"properties": {
					"amount": {
						"type": "string"
					},
					"end": {
						"type": "string"
					}
				},
				"required": [
					"amount",
					"end"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesNFTAPIResponse_LockedData_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/LockedData"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesRouterTransaction": {
				"description": "Interface representing a Ramses Router transaction.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data for the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value for the transaction."
					},
					"to": {
						"type": "string",
						"description": "The destination address for the transaction."
					},
					"from": {
						"type": "string",
						"description": "The source address for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "(Optional) The gas price for the transaction."
					},
					"gasLimit": {
						"type": "string",
						"description": "(Optional) The gas limit for the transaction."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "(Optional) The maximum priority fee per gas for the transaction, in wei."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "(Optional) The maximum fee per gas for the transaction, in wei."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce for the transaction."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "(Optional) The type of the transaction."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID for the transaction."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesRouterExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "The simulation result of the transaction."
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "The broadcasted transaction details."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the execution result."
					},
					"success": {
						"type": "boolean",
						"description": "Indicates if the execution was successful."
					},
					"user_op": {
						"type": "string",
						"description": "Indicates if the execution was successful."
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "The data returned by the executed function."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters passed to the executed function."
					},
					"function": {
						"type": "string",
						"description": "The name of the executed function."
					},
					"transaction": {
						"$ref": "#/components/schemas/RamsesRouterTransaction",
						"description": "The transaction details."
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object"
			},
			"RamsesRouterAPIResponse_RamsesRouterExecuteFunctionResult_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/RamsesRouterExecuteFunctionResult"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesRouterInputBody": {
				"description": "Interface representing the input body for the Ramses Router.\nExtends the InputBody interface.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The destination address."
					},
					"data": {
						"type": "string",
						"description": "The data to be sent."
					},
					"value": {
						"type": "string",
						"description": "The value to be sent."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce for the transaction."
					},
					"simulate": {
						"type": "boolean",
						"description": "Indicates if the transaction is a simulation."
					},
					"gas": {
						"type": "string",
						"description": "The gas for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Whether to perform a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Whether the transaction is from an externally owned account."
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Whether to broadcast the transaction."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Whether to always increment the nonce."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount involved in the transaction."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts of the asset."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					},
					"routes": {
						"items": {
							"properties": {
								"stable": {
									"type": "boolean"
								},
								"to": {
									"type": "string"
								},
								"from": {
									"type": "string"
								}
							},
							"required": [
								"stable",
								"to",
								"from"
							],
							"type": "object"
						},
						"type": "array",
						"description": "The routes for the asset transfer.\nEach route contains the source, destination, and a flag indicating if the route is stable."
					},
					"deadline": {
						"type": "string",
						"description": "The deadline for the transaction."
					},
					"tokenA": {
						"type": "string",
						"description": "The first token involved in the transaction."
					},
					"tokenB": {
						"type": "string",
						"description": "The second token involved in the transaction."
					},
					"stable": {
						"type": "boolean",
						"description": "Indicates if the transaction is stable."
					},
					"amountADesired": {
						"type": "string",
						"description": "The desired amount of token A."
					},
					"amountBDesired": {
						"type": "string",
						"description": "The desired amount of token B."
					},
					"amountAMin": {
						"type": "string",
						"description": "The minimum amount of token A."
					},
					"amountBMin": {
						"type": "string",
						"description": "The minimum amount of token B."
					},
					"token": {
						"type": "string",
						"description": "The token involved in the transaction."
					},
					"liquidity": {
						"type": "string",
						"description": "The liquidity amount."
					},
					"amountTokenDesired": {
						"type": "string",
						"description": "The desired amount of the token."
					},
					"amountTokenMin": {
						"type": "string",
						"description": "The minimum amount of the token."
					},
					"amountETHMin": {
						"type": "string",
						"description": "The minimum amount of ETH."
					},
					"approveMax": {
						"type": "boolean",
						"description": "Indicates if the maximum approval is granted."
					},
					"v": {
						"type": "number",
						"format": "double",
						"description": "The v parameter for the transaction signature."
					},
					"r": {
						"type": "string",
						"description": "The r parameter for the transaction signature."
					},
					"s": {
						"type": "string",
						"description": "The s parameter for the transaction signature."
					},
					"amountIn": {
						"type": "string",
						"description": "The input amount for the transaction."
					},
					"amountOutMin": {
						"type": "string",
						"description": "The minimum output amount for the transaction."
					},
					"tokenFrom": {
						"type": "string",
						"description": "The source token for the transaction."
					},
					"tokenTo": {
						"type": "string",
						"description": "The destination token for the transaction."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"RamsesRouterAPIResponse_string_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesRouterAPIResponse__amountOut-string--stable-boolean__": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"properties": {
							"stable": {
								"type": "boolean"
							},
							"amountOut": {
								"type": "string"
							}
						},
						"required": [
							"stable",
							"amountOut"
						],
						"type": "object"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesRouterAPIResponse_string-Array_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesRouterAPIResponse__reserve0%3Astring--reserve1%3Astring__": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"properties": {
							"reserve1": {
								"type": "string"
							},
							"reserve0": {
								"type": "string"
							}
						},
						"required": [
							"reserve1",
							"reserve0"
						],
						"type": "object"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesRouterAPIResponse_boolean_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "boolean"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesRouterAPIResponse__amountA-string--amountB-string--liquidity-string--__": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"properties": {
							"liquidity": {
								"type": "string"
							},
							"amountB": {
								"type": "string"
							},
							"amountA": {
								"type": "string"
							}
						},
						"required": [
							"liquidity",
							"amountB",
							"amountA"
						],
						"type": "object"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesRouterAPIResponse__amountA-string--amountB-string__": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"properties": {
							"amountB": {
								"type": "string"
							},
							"amountA": {
								"type": "string"
							}
						},
						"required": [
							"amountB",
							"amountA"
						],
						"type": "object"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SortedTokens": {
				"properties": {
					"token0": {
						"type": "string"
					},
					"token1": {
						"type": "string"
					}
				},
				"required": [
					"token0",
					"token1"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesRouterAPIResponse_SortedTokens_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/SortedTokens"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesVoterAPIResponse_string_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesVoterAPIResponse_boolean_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "boolean"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesVoterTransaction": {
				"description": "Represents a transaction for the Ramses Voter.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data payload of the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value to be transferred in the transaction."
					},
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"from": {
						"type": "string",
						"description": "The sender address of the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction (optional)."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction (optional)."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas for the transaction (optional)."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas for the transaction (optional)."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce of the transaction."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of the transaction (optional)."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID of the blockchain network."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesVoterExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "The simulation results."
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "The broadcasted transaction data."
					},
					"message": {
						"type": "string",
						"description": "The error message."
					},
					"success": {
						"type": "boolean",
						"description": "Indicates if the function was successful."
					},
					"user_op": {
						"type": "string",
						"description": "The user operation."
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "The transaction data."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The function parameters."
					},
					"function": {
						"type": "string",
						"description": "The function name."
					},
					"transaction": {
						"$ref": "#/components/schemas/RamsesVoterTransaction",
						"description": "The transaction data."
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object",
				"description": "Represents the result of executing a function on the Ramses Voter."
			},
			"RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/RamsesVoterExecuteFunctionResult"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RamsesVoterInputBody": {
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"data": {
						"type": "string",
						"description": "Additional data for the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value associated with the transaction."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce for the transaction."
					},
					"simulate": {
						"type": "boolean",
						"description": "Indicates if the transaction should be simulated."
					},
					"gas": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Indicates if the transaction is a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Indicates if the transaction is from an Externally Owned Account."
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address involved in the transaction."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID involved in the transaction."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Indicates if the transaction should be broadcasted."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Indicates if the nonce should always be incremented."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount to be transferred."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					},
					"pool": {
						"type": "string",
						"description": "The pool involved in the transaction."
					},
					"gauge": {
						"type": "string",
						"description": "The gauge involved in the transaction."
					},
					"weights": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The weights for the transaction."
					},
					"pool_vote": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The pool votes for the transaction."
					},
					"bribes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The bribes for the transaction."
					},
					"tokens": {
						"items": {
							"items": {
								"type": "string"
							},
							"type": "array"
						},
						"type": "array",
						"description": "The tokens involved in the transaction."
					},
					"fees": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The fees for the transaction."
					},
					"gauges": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The gauges involved in the transaction."
					},
					"token": {
						"type": "string",
						"description": "The token involved in the transaction."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"RippleInput": {
				"description": "Represents the input data required for Ripple transactions.",
				"properties": {
					"network": {
						"type": "string",
						"description": "The network on which the transaction will be executed. This is optional."
					},
					"private_key": {
						"type": "string",
						"description": "The private key used for signing the transaction. This is optional."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"RippleTransactionOutput": {
				"description": "Represents the output of a Ripple transaction.",
				"properties": {
					"signedTx": {
						"type": "string",
						"description": "The signed transaction."
					},
					"transaction_hash": {
						"type": "string",
						"description": "The transaction hash."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"RippleAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/RippleTransactionOutput",
						"description": "The data associated with the Ripple response."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RippleTransactionInput": {
				"description": "Represents the input data for a Ripple transaction.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"value": {
						"type": "number",
						"format": "double",
						"description": "The amount to be sent."
					},
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"compress": {
						"type": "boolean",
						"description": "Indicates whether to compress the public key."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"SolanaInput": {
				"description": "Represents the input parameters required for a Solana transaction.",
				"properties": {
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"private_key": {
						"type": "string",
						"description": "The private key of the account."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"SolanaTransactionOutput": {
				"description": "Represents the output of a Solana transaction.",
				"properties": {
					"signedTx": {
						"type": "string",
						"description": "The signed transaction."
					},
					"transaction_hash": {
						"type": "string",
						"description": "The transaction hash."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"SolanaAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/SolanaTransactionOutput",
						"description": "The data associated with the Solana response."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SolanaSignTransactionInput": {
				"description": "Represents the input required to sign a Solana transaction.",
				"properties": {
					"unsigned_tx": {
						"type": "string",
						"description": "The transaction to be signed."
					},
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					}
				},
				"required": [
					"unsigned_tx"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SolanaTransactionInput": {
				"description": "Represents the input data required for a Solana transaction.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"value": {
						"type": "number",
						"format": "double",
						"description": "The amount of value to be transferred in the transaction."
					},
					"network": {
						"type": "string",
						"description": "The network on which the transaction is to be executed."
					},
					"compress": {
						"type": "boolean",
						"description": "Indicates whether the transaction data should be compressed."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ThenaAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ThorSwapAPIResponse_Quote_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/Quote"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ThorSwapAPIResponse_string_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GasPrice": {
				"description": "Represents the gas price information for a specific blockchain.",
				"properties": {
					"lastTimestamp": {
						"type": "number",
						"format": "double",
						"description": "The timestamp of the last recorded gas price."
					},
					"chainId": {
						"type": "string",
						"description": "The identifier of the blockchain."
					},
					"unitName": {
						"type": "string",
						"description": "The unit name of the gas price (e.g., Gwei, Wei)."
					},
					"history": {
						"items": {
							"properties": {
								"timestamp": {
									"type": "number",
									"format": "double"
								},
								"value": {
									"type": "number",
									"format": "double"
								}
							},
							"required": [
								"timestamp",
								"value"
							],
							"type": "object"
						},
						"type": "array",
						"description": "The historical gas prices with their respective timestamps."
					},
					"average24h": {
						"type": "number",
						"format": "double",
						"description": "The average gas price over the last 24 hours."
					},
					"average7d": {
						"type": "number",
						"format": "double",
						"description": "The average gas price over the last 7 days."
					}
				},
				"required": [
					"lastTimestamp",
					"chainId",
					"unitName",
					"history",
					"average24h",
					"average7d"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ThorSwapAPIResponse_GasPrice_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/GasPrice"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ThorSwapAPIResponse_string-Array_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TronInput": {
				"description": "Represents the input data required for Tron network operations.",
				"properties": {
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"private_key": {
						"type": "string",
						"description": "The private key of the account."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"TronTransactionOutput": {
				"description": "Represents the output of a Tron transaction.",
				"properties": {
					"signedTx": {
						"type": "string",
						"description": "The signed transaction."
					},
					"transaction_hash": {
						"type": "string",
						"description": "The transaction hash."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"TronAPIResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "The success status of the operation."
					},
					"message": {
						"type": "string",
						"description": "The message associated with the operation."
					},
					"body": {
						"$ref": "#/components/schemas/InputBody",
						"description": "The data associated with the operation."
					},
					"address": {
						"type": "string",
						"description": "The address associated with the operation."
					},
					"data": {
						"$ref": "#/components/schemas/TronTransactionOutput",
						"description": "The data associated with the Tron response."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TronTransactionInput": {
				"description": "Represents an input for a Tron transaction.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"value": {
						"type": "number",
						"format": "double",
						"description": "The amount to be sent."
					},
					"network": {
						"type": "string",
						"description": "The network on which the transaction is taking place."
					},
					"compress": {
						"type": "boolean",
						"description": "Indicates whether to compress the public key."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UniswapV2Transaction": {
				"description": "Represents a UniswapV2 transaction.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data to include in the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value to send with the transaction."
					},
					"to": {
						"type": "string",
						"description": "The address of the recipient."
					},
					"from": {
						"type": "string",
						"description": "The address of the sender."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce for the transaction."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID for the transaction."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UniswapV2ExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "The simulation data."
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "The broadcasted transaction."
					},
					"message": {
						"type": "string",
						"description": "The broadcasted result of the transaction."
					},
					"success": {
						"type": "boolean",
						"description": "The message returned by the API."
					},
					"user_op": {
						"type": "string",
						"description": "Indicates whether the function was successful."
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "The data returned by the API."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters passed to the function."
					},
					"function": {
						"type": "string",
						"description": "The name of the function executed."
					},
					"transaction": {
						"$ref": "#/components/schemas/UniswapV2Transaction",
						"description": "The UniswapV2 transaction."
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object",
				"description": "Represents the result of executing a UniswapV2 function."
			},
			"UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/UniswapV2ExecuteFunctionResult"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UniswapV2InputBody": {
				"description": "Represents the input body for a UniswapV2 transaction.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"data": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"value": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"gasLimit": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"nonce": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"simulate": {
						"type": "boolean",
						"description": "The address of the token to swap."
					},
					"gas": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"gasPrice": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "The address of the token to swap."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "The address of the token to swap."
					},
					"contract_address": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "The address of the token to swap."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "The address of the token to swap."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					},
					"amountIn": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"amountInMax": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"amountOut": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"amountOutMin": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"amountADesired": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"amountBDesired": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"amountAMin": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"amountBMin": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"amountETHMin": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"amountTokenDesired": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"amountTokenMin": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"liquidity": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"path": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The address of the token to swap."
					},
					"deadline": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"approveMax": {
						"type": "boolean",
						"description": "The address of the token to swap."
					},
					"v": {
						"type": "number",
						"format": "double",
						"description": "The address of the token to swap."
					},
					"r": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"s": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"tokenA": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"tokenB": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"reserveA": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"reserveB": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"reserve": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"reserveETH": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"token": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"amountA": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"reserveIn": {
						"type": "string",
						"description": "The address of the token to swap."
					},
					"reserveOut": {
						"type": "string",
						"description": "The address of the token to swap."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UniswapV3Transaction": {
				"description": "Represents a Uniswap V3 transaction.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data payload of the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value to be sent with the transaction, in wei."
					},
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"from": {
						"type": "string",
						"description": "The sender address of the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction, in wei (optional)."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction (optional)."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas for EIP-1559 transactions, in wei (optional)."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas for EIP-1559 transactions, in wei (optional)."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce of the transaction."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of the transaction (optional)."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID of the network where the transaction is sent."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UniswapV3ExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "Optional response containing the simulation of asset changes."
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "Optional response indicating whether the transaction was broadcasted."
					},
					"message": {
						"type": "string",
						"description": "Optional message providing additional information about the execution."
					},
					"success": {
						"type": "boolean",
						"description": "Indicates whether the function execution was successful."
					},
					"user_op": {
						"type": "string",
						"description": "Optional user operation identifier."
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "Optional transaction data."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters passed to the executed function."
					},
					"function": {
						"type": "string",
						"description": "The name of the executed function."
					},
					"transaction": {
						"$ref": "#/components/schemas/UniswapV3Transaction",
						"description": "The transaction details of the executed function."
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object"
			},
			"UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/UniswapV3ExecuteFunctionResult"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UniswapV3InputBody": {
				"description": "Interface representing the input body for Uniswap V3 operations.\nExtends the InputBody interface.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"data": {
						"type": "string",
						"description": "The data to be sent with the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value of the transaction."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce of the transaction."
					},
					"simulate": {
						"type": "boolean",
						"description": "Indicates if the transaction should be simulated."
					},
					"gas": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Indicates if the transaction is a dry run."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Indicates if the transaction is from an externally owned account."
					},
					"contract_address": {
						"type": "string",
						"description": "The address of the contract."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Indicates if the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Indicates if the transaction should be broadcasted."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Indicates if the nonce should always be incremented."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount to be transferred."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					},
					"token0": {
						"type": "string",
						"description": "The address of the first token."
					},
					"token1": {
						"type": "string",
						"description": "The address of the second token."
					},
					"fee": {
						"type": "number",
						"format": "double",
						"description": "The fee tier of the pool."
					},
					"tickLower": {
						"type": "number",
						"format": "double",
						"description": "The lower tick of the position."
					},
					"tickUpper": {
						"type": "number",
						"format": "double",
						"description": "The upper tick of the position."
					},
					"amount0Desired": {
						"type": "string",
						"description": "The desired amount of token0."
					},
					"amount1Desired": {
						"type": "string",
						"description": "The desired amount of token1."
					},
					"amount0Min": {
						"type": "string",
						"description": "The minimum amount of token0."
					},
					"amount1Min": {
						"type": "string",
						"description": "The minimum amount of token1."
					},
					"recipient": {
						"type": "string",
						"description": "The recipient address."
					},
					"deadline": {
						"type": "string",
						"description": "The deadline for the transaction."
					},
					"tokenId": {
						"type": "string",
						"description": "The ID of the token."
					},
					"liquidity": {
						"type": "string",
						"description": "The liquidity of the position."
					},
					"token": {
						"type": "string",
						"description": "The address of the token."
					},
					"amount0Max": {
						"type": "string",
						"description": "The maximum amount of token0."
					},
					"amount1Max": {
						"type": "string",
						"description": "The maximum amount of token1."
					},
					"sqrtPriceX96": {
						"type": "string",
						"description": "The sqrt price of the pool."
					},
					"operator": {
						"type": "string",
						"description": "The operator address."
					},
					"spender": {
						"type": "string",
						"description": "The address of the spender."
					},
					"v": {
						"type": "number",
						"format": "double",
						"description": "The recovery id of the signature."
					},
					"r": {
						"type": "string",
						"description": "The r value of the signature."
					},
					"s": {
						"type": "string",
						"description": "The s value of the signature."
					},
					"amountMinimum": {
						"type": "string",
						"description": "The minimum amount."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UniswapV3NFTAPIResponse_any_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UniswapV3NFTAPIResponse_string_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UniswapV3NFTAPIResponse_boolean_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "boolean"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/UniswapV3ExecuteFunctionResult"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UniswapV3APIResponse_string_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VeTheNFTAPIResponse_string_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VeTheNFTAPIResponse_boolean_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "boolean"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VeTheNFTAPIResponse_LockedData_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/LockedData"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VeNFTTransaction": {
				"description": "Represents a transaction involving a VeNFT.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data payload of the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value being transferred in the transaction."
					},
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"from": {
						"type": "string",
						"description": "The sender address of the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas unit for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas unit for the transaction."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce of the transaction."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of the transaction."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID where the transaction is executed."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VeNFTExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "Optional response from simulating asset changes."
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "Optional response from broadcasting the raw transaction."
					},
					"message": {
						"type": "string",
						"description": "Optional message providing additional information about the execution."
					},
					"success": {
						"type": "boolean",
						"description": "Optional flag indicating if the execution was successful."
					},
					"user_op": {
						"type": "string",
						"description": "Optional user operation identifier."
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "Optional additional transaction data."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters passed to the function."
					},
					"function": {
						"type": "string",
						"description": "The name of the executed function."
					},
					"transaction": {
						"$ref": "#/components/schemas/VeNFTTransaction",
						"description": "The transaction associated with the function execution."
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object",
				"description": "Represents the result of executing a VeNFT function."
			},
			"VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/VeNFTExecuteFunctionResult"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VeNFTInputBody": {
				"description": "Interface representing the input body for VeNFT operations.",
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address."
					},
					"data": {
						"type": "string",
						"description": "Additional data for the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value of the transaction."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce for the transaction."
					},
					"simulate": {
						"type": "boolean",
						"description": "Indicates whether to simulate the transaction."
					},
					"gas": {
						"type": "string",
						"description": "The gas limit for the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Indicates whether to perform a dry run of the transaction."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Indicates whether the transaction is from an externally owned account."
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address involved in the transaction."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID involved in the transaction."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Indicates whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Indicates whether to broadcast the transaction."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Indicates whether to always increment the nonce."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount to be transferred."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					},
					"lock_duration": {
						"type": "string",
						"description": "The lock duration for the transaction."
					},
					"spender": {
						"type": "string",
						"description": "The spender address for the transaction."
					},
					"operator": {
						"type": "string",
						"description": "The operator address for the transaction."
					},
					"tokenId": {
						"type": "string",
						"description": "The token ID involved in the transaction."
					},
					"lock_value": {
						"type": "string",
						"description": "The lock value for the transaction."
					},
					"delegatee": {
						"type": "string",
						"description": "The delegatee address for the transaction."
					},
					"expiry": {
						"type": "string",
						"description": "The expiry time for the transaction."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UserPointHistoryData": {
				"properties": {
					"bias": {
						"type": "string"
					},
					"slope": {
						"type": "string"
					},
					"ts": {
						"type": "string"
					},
					"blk": {
						"type": "string"
					}
				},
				"required": [
					"bias",
					"slope",
					"ts",
					"blk"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VeTheNFTAPIResponse_UserPointHistoryData_": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/UserPointHistoryData"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VeTheNftVoterAPIResponse_string_": {
				"description": "Represents the structure of the API response for the VeTheNftVoter.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the\nAPI response."
					},
					"data": {
						"type": "string",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VeTheNftVoterAPIResponse_boolean_": {
				"description": "Represents the structure of the API response for the VeTheNftVoter.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the\nAPI response."
					},
					"data": {
						"type": "boolean",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VeTheNftVoterTransaction": {
				"description": "Represents a transaction for the VeTheNftVoter.",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data payload of the transaction."
					},
					"value": {
						"type": "string",
						"description": "The value to be transferred in the transaction, in wei."
					},
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction."
					},
					"from": {
						"type": "string",
						"description": "The sender address of the transaction."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction, in wei (optional)."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction (optional)."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas for the transaction, in wei (optional)."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas for the transaction, in wei (optional)."
					},
					"nonce": {
						"type": "number",
						"format": "double",
						"description": "The nonce of the transaction."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of the transaction (optional)."
					},
					"chainId": {
						"type": "string",
						"description": "The chain ID of the network where the transaction is to be executed."
					}
				},
				"required": [
					"data",
					"value",
					"to",
					"from",
					"nonce",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VeTheNftVoterExecuteFunctionResult": {
				"properties": {
					"simulation": {
						"$ref": "#/components/schemas/SimulateAssetChangesResponse",
						"description": "Optional simulation response indicating asset changes."
					},
					"broadcasted": {
						"$ref": "#/components/schemas/BroadCastRawTransactionResponse",
						"description": "Optional response from broadcasting the transaction."
					},
					"message": {
						"type": "string",
						"description": "Optional message providing additional information about the execution."
					},
					"success": {
						"type": "boolean",
						"description": "Optional flag indicating whether the execution was successful."
					},
					"user_op": {
						"type": "string",
						"description": "Optional user operation identifier."
					},
					"data": {
						"$ref": "#/components/schemas/Transaction",
						"description": "Optional data related to the transaction."
					},
					"params": {
						"items": {},
						"type": "array",
						"description": "The parameters passed to the function."
					},
					"function": {
						"type": "string",
						"description": "The name of the function that was executed."
					},
					"transaction": {
						"$ref": "#/components/schemas/VeTheNftVoterTransaction",
						"description": "The transaction associated with the execution."
					}
				},
				"required": [
					"params",
					"function",
					"transaction"
				],
				"type": "object",
				"description": "Represents the result of executing a function in the VeTheNftVoter."
			},
			"VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_": {
				"description": "Represents the structure of the API response for the VeTheNftVoter.",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates whether the API request was successful."
					},
					"message": {
						"type": "string",
						"description": "A message providing additional information about the\nAPI response."
					},
					"data": {
						"$ref": "#/components/schemas/VeTheNftVoterExecuteFunctionResult",
						"description": "The data returned by the API, if any."
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VeTheNftVoterInputBody": {
				"properties": {
					"to": {
						"type": "string",
						"description": "The recipient address of the transaction (optional)."
					},
					"data": {
						"type": "string",
						"description": "The data payload of the transaction (optional)."
					},
					"value": {
						"type": "string",
						"description": "The value to be sent with the transaction, in wei (optional)."
					},
					"gasLimit": {
						"type": "string",
						"description": "The gas limit for the transaction (optional)."
					},
					"nonce": {
						"type": "string",
						"description": "The nonce of the transaction (optional)."
					},
					"simulate": {
						"type": "boolean",
						"description": "Indicates whether to simulate the transaction (optional)."
					},
					"gas": {
						"type": "string",
						"description": "The gas limit for the transaction (optional)."
					},
					"gasPrice": {
						"type": "string",
						"description": "The gas price for the transaction, in wei (optional)."
					},
					"maxFeePerGas": {
						"type": "string",
						"description": "The maximum fee per gas."
					},
					"maxPriorityFeePerGas": {
						"type": "string",
						"description": "The maximum priority fee per gas."
					},
					"chain_id": {
						"type": "string",
						"description": "The chain ID."
					},
					"encoding": {
						"type": "string",
						"description": "The encoding type."
					},
					"type": {
						"type": "number",
						"format": "double",
						"description": "The type of transaction."
					},
					"accessList": {
						"items": {
							"$ref": "#/components/schemas/AccessTuple"
						},
						"type": "array",
						"description": "The access list for the transaction."
					},
					"blobGas": {
						"type": "string",
						"description": "The gas for blob transactions."
					},
					"blobGasFeeCap": {
						"type": "string",
						"description": "The gas fee cap for blob transactions."
					},
					"blobHashes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The hashes for blob transactions."
					},
					"dryrun": {
						"type": "boolean",
						"description": "Indicates whether to perform a dry run of the transaction (optional)."
					},
					"input": {
						"type": "string",
						"description": "The input data."
					},
					"EOA": {
						"type": "boolean",
						"description": "Indicates whether the transaction is from an externally owned account (optional)."
					},
					"contract_address": {
						"type": "string",
						"description": "The contract address involved in the transaction (optional)."
					},
					"token_id": {
						"type": "string",
						"description": "The token ID involved in the transaction (optional)."
					},
					"token_ids": {
						"type": "string",
						"description": "The token IDs."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the transaction is approved."
					},
					"broadcast": {
						"type": "boolean",
						"description": "Indicates whether to broadcast the transaction (optional)."
					},
					"alwaysIncrementNonce": {
						"type": "boolean",
						"description": "Indicates whether to always increment the nonce (optional)."
					},
					"asset": {
						"type": "string",
						"description": "The asset involved in the transaction."
					},
					"amount": {
						"type": "string",
						"description": "The amount to be transferred (optional)."
					},
					"interestRateMode": {
						"type": "number",
						"format": "double",
						"description": "The interest rate mode."
					},
					"referralCode": {
						"type": "number",
						"format": "double",
						"description": "The referral code."
					},
					"onBehalfOf": {
						"type": "string",
						"description": "The address on behalf of which the transaction is made."
					},
					"receiverAddress": {
						"type": "string",
						"description": "The receiver address."
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The assets involved in the transaction."
					},
					"amounts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The amounts involved in the transaction."
					},
					"modes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The modes of the transaction."
					},
					"params": {
						"type": "string",
						"description": "Additional parameters."
					},
					"rateMode": {
						"type": "number",
						"format": "double",
						"description": "The rate mode."
					},
					"useAsCollateral": {
						"type": "boolean",
						"description": "Whether to use as collateral."
					},
					"collateralAsset": {
						"type": "string",
						"description": "The collateral asset."
					},
					"debtAsset": {
						"type": "string",
						"description": "The debt asset."
					},
					"user": {
						"type": "string",
						"description": "The user involved in the transaction."
					},
					"debtToCover": {
						"type": "string",
						"description": "The debt to cover."
					},
					"receiveAToken": {
						"type": "boolean",
						"description": "Whether to receive a token."
					},
					"inputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenAmount"
						},
						"type": "array",
						"description": "The input tokens."
					},
					"outputTokens": {
						"items": {
							"$ref": "#/components/schemas/TokenProportion"
						},
						"type": "array",
						"description": "The output tokens."
					},
					"slippageLimitPercent": {
						"type": "number",
						"format": "double",
						"description": "The slippage limit percentage."
					},
					"minHealthFactor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The minimum health factor."
					},
					"premiums": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						],
						"description": "The premiums."
					},
					"initiator": {
						"type": "string",
						"description": "The initiator of the transaction."
					},
					"role": {
						"type": "string",
						"description": "The role of the user."
					},
					"account": {
						"type": "string",
						"description": "The account involved in the transaction."
					},
					"initialDeposit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The initial deposit."
					},
					"borrowAmount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						],
						"description": "The borrow amount."
					},
					"pool": {
						"type": "string",
						"description": "The pool address involved in the transaction (optional)."
					},
					"gauge": {
						"type": "string",
						"description": "The gauge address involved in the transaction (optional)."
					},
					"weights": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The weights for the pool votes (optional)."
					},
					"pool_vote": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The pool votes (optional)."
					},
					"gauge_type": {
						"type": "string",
						"description": "The type of the gauge (optional)."
					},
					"bribes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The bribes involved in the transaction (optional)."
					},
					"tokens": {
						"items": {
							"items": {
								"type": "string"
							},
							"type": "array"
						},
						"type": "array",
						"description": "The tokens involved in the transaction (optional)."
					},
					"fees": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The fees involved in the transaction (optional)."
					},
					"gauges": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The gauges involved in the transaction (optional)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"TokenConfig": {
				"properties": {
					"tradeTokens": {
						"items": {
							"$ref": "#/components/schemas/Token"
						},
						"type": "array"
					},
					"stablecoin": {
						"$ref": "#/components/schemas/Token"
					}
				},
				"required": [
					"tradeTokens",
					"stablecoin"
				],
				"type": "object"
			},
			"EmotionalState": {
				"properties": {
					"mood": {
						"type": "number",
						"format": "double"
					},
					"energy": {
						"type": "number",
						"format": "double"
					},
					"reactivity": {
						"type": "number",
						"format": "double"
					},
					"dominantEmotion": {
						"type": "string"
					}
				},
				"required": [
					"mood",
					"energy",
					"reactivity",
					"dominantEmotion"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PersonalityTraits": {
				"properties": {
					"openness": {
						"type": "number",
						"format": "double"
					},
					"conscientiousness": {
						"type": "number",
						"format": "double"
					},
					"extraversion": {
						"type": "number",
						"format": "double"
					},
					"agreeableness": {
						"type": "number",
						"format": "double"
					},
					"neuroticism": {
						"type": "number",
						"format": "double"
					},
					"confidence": {
						"type": "number",
						"format": "double"
					},
					"optimism": {
						"type": "number",
						"format": "double"
					},
					"formality": {
						"type": "number",
						"format": "double"
					},
					"humor": {
						"type": "number",
						"format": "double"
					},
					"empathy": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"openness",
					"conscientiousness",
					"extraversion",
					"agreeableness",
					"neuroticism",
					"confidence",
					"optimism",
					"formality",
					"humor",
					"empathy"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BotConfigType": {
				"properties": {
					"twitter_screen_name": {
						"type": "string"
					},
					"twitter_name": {
						"type": "string"
					},
					"is_production": {
						"type": "boolean"
					},
					"life_activity_log": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"personality_traits": {
						"$ref": "#/components/schemas/PersonalityTraits"
					},
					"emotional_state": {
						"$ref": "#/components/schemas/EmotionalState"
					},
					"twitter_posting_enabled": {
						"type": "boolean"
					},
					"eth_wallet": {
						"type": "string"
					},
					"running": {
						"type": "boolean"
					},
					"active": {
						"type": "boolean"
					},
					"session": {
						"type": "string"
					},
					"trading_style": {
						"type": "string"
					},
					"tweet_style": {
						"type": "string"
					},
					"twitter_id": {
						"type": "string"
					},
					"twitter_password": {
						"type": "string"
					},
					"twitter_email": {
						"type": "string"
					},
					"personality": {
						"type": "string"
					},
					"trade_tokens": {
						"$ref": "#/components/schemas/TokenConfig"
					},
					"moon_api_key": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"user_id": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"is_production",
					"trading_style",
					"tweet_style",
					"twitter_password",
					"twitter_email",
					"personality",
					"trade_tokens",
					"moon_api_key",
					"name",
					"user_id",
					"id"
				],
				"type": "object"
			},
			"PersonalityInput": {
				"properties": {
					"personality": {
						"type": "string"
					}
				},
				"required": [
					"personality"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GeneratedTweet": {
				"properties": {
					"replyTweets": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"screenshot": {
						"type": "string"
					},
					"replyTweetId": {
						"type": "string"
					},
					"text": {
						"type": "string"
					}
				},
				"required": [
					"replyTweets",
					"text"
				],
				"type": "object"
			}
		},
		"securitySchemes": {
			"BearerAuth": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header"
			},
			"OAuth2": {
				"type": "oauth2",
				"flows": {
					"password": {
						"tokenUrl": "https://vault-api.usemoon.ai/auth/oauth/openai/oauth",
						"scopes": {
							"authorization_code": "grants authorization_code"
						}
					}
				}
			},
			"ApiKeyAuth": {
				"type": "apiKey",
				"name": "x-api-key",
				"in": "header"
			}
		}
	},
	"info": {
		"title": "moon-vault-api",
		"version": "1.0.0",
		"license": {
			"name": "ISC"
		},
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/aave/v3/pool/{account}/getReserveData": {
			"get": {
				"operationId": "Aavev3PoolGetReserveData",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AavePoolAPIResponse containing the reserve data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AavePoolAPIResponse_any_"
								}
							}
						}
					}
				},
				"description": "Retrieves reserve data for a specific asset from the Aave pool.",
				"tags": [
					"AAVEv3 Pool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account identifier.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain chain ID.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the Aave pool.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The asset for which to retrieve reserve data.",
						"in": "query",
						"name": "asset",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/pool/{account}/getUserAccountData": {
			"get": {
				"operationId": "Aavev3PoolGetUserAccountData",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AavePoolAPIResponse containing the user account data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AavePoolAPIResponse_any_"
								}
							}
						}
					}
				},
				"description": "Retrieves user account data from the Aave pool.",
				"tags": [
					"AAVEv3 Pool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account identifier from the path.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token from the header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID from the query parameters.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address from the query parameters.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The user identifier from the query parameters.",
						"in": "query",
						"name": "user",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/pool/{address}/supply": {
			"post": {
				"operationId": "Aavev3PoolSupply",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AavePoolAPIResponse containing the result of the supply operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AavePoolAPIResponse_AavePoolExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Supplies assets to the Aave pool.",
				"tags": [
					"AAVEv3 Pool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the user supplying the assets.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing details for the supply operation.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AavePoolInputBody",
								"description": "- The input body containing details for the supply operation."
							}
						}
					}
				}
			}
		},
		"/aave/v3/pool/{address}/withdraw": {
			"post": {
				"operationId": "Aavev3PoolWithdraw",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AavePoolAPIResponse containing the result of the withdrawal operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AavePoolAPIResponse_AavePoolExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Withdraws assets from the Aave pool.",
				"tags": [
					"AAVEv3 Pool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address from which to withdraw assets.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body containing the withdrawal details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AavePoolInputBody",
								"description": "- The body containing the withdrawal details."
							}
						}
					}
				}
			}
		},
		"/aave/v3/pool/{address}/borrow": {
			"post": {
				"operationId": "Aavev3PoolBorrow",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AavePoolAPIResponse containing the result of the borrow operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AavePoolAPIResponse_AavePoolExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Borrows assets from the Aave pool.",
				"tags": [
					"AAVEv3 Pool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the borrower.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing details for the borrow operation.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AavePoolInputBody",
								"description": "- The input body containing details for the borrow operation."
							}
						}
					}
				}
			}
		},
		"/aave/v3/pool/{address}/repay": {
			"post": {
				"operationId": "Aavev3PoolRepay",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AavePoolAPIResponse containing the result of the repayment operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AavePoolAPIResponse_AavePoolExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Repays a loan on the Aave protocol.",
				"tags": [
					"AAVEv3 Pool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the borrower.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body of the request containing repayment details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AavePoolInputBody",
								"description": "- The body of the request containing repayment details."
							}
						}
					}
				}
			}
		},
		"/aave/v3/pool/{address}/setUserUseReserveAsCollateral": {
			"post": {
				"operationId": "Aavev3PoolSetUserUseReserveAsCollateral",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AavePoolAPIResponse containing the result of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AavePoolAPIResponse_AavePoolExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Sets the user's reserve as collateral in the Aave pool.",
				"tags": [
					"AAVEv3 Pool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the user.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body containing the Aave pool input data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AavePoolInputBody",
								"description": "- The body containing the Aave pool input data."
							}
						}
					}
				}
			}
		},
		"/aave/v3/pool/{address}/liquidationCall": {
			"post": {
				"operationId": "Aavev3PoolLiquidationCall",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AavePoolAPIResponse containing the result of the liquidation call.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AavePoolAPIResponse_AavePoolExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Handles the liquidation call to the Aave pool.",
				"tags": [
					"AAVEv3 Pool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address to be liquidated.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body containing the Aave pool input data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AavePoolInputBody",
								"description": "- The body containing the Aave pool input data."
							}
						}
					}
				}
			}
		},
		"/aave/v3/poolAddressProvider/{account}/getACLAdmin": {
			"get": {
				"operationId": "Aavev3PoolAddressProviderGetACLAdmin",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `PoolAddressProviderAPIResponse` containing the ACL admin address.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the ACL (Access Control List) admin address for a given account.",
				"tags": [
					"Pool Address Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account address to query.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the pool address provider.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/poolAddressProvider/{account}/getACLManager": {
			"get": {
				"operationId": "Aavev3PoolAddressProviderGetACLManager",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PoolAddressProviderAPIResponse containing the ACL Manager address.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the ACL Manager address from the Pool Address Provider.",
				"tags": [
					"Pool Address Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account path parameter.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID query parameter.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address query parameter.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/poolAddressProvider/{account}/getAddress": {
			"get": {
				"operationId": "Aavev3PoolAddressProviderGetAddress",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PoolAddressProviderAPIResponse containing the address.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves an address from the Pool Address Provider.",
				"tags": [
					"Pool Address Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account path parameter.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID from the query parameters.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address from the query parameters.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID from the query parameters.",
						"in": "query",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/poolAddressProvider/{account}/getMarketId": {
			"get": {
				"operationId": "Aavev3PoolAddressProviderGetMarketId",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PoolAddressProviderAPIResponse containing the market ID as a string.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the market ID from the Pool Address Provider.",
				"tags": [
					"Pool Address Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account path parameter.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID from the query parameters.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address from the query parameters.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/poolAddressProvider/{account}/getPool": {
			"get": {
				"operationId": "Aavev3PoolAddressProviderGetPool",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `PoolAddressProviderAPIResponse` containing the pool address.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the pool address from the Aave protocol.",
				"tags": [
					"Pool Address Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account identifier.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network identifier.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address to query.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/poolAddressProvider/{account}/getPoolConfigurator": {
			"get": {
				"operationId": "Aavev3PoolAddressProviderGetPoolConfigurator",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PoolAddressProviderAPIResponse containing the pool configurator.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the pool configurator for a given account.",
				"tags": [
					"Pool Address Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account identifier.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain identifier.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the pool.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/poolAddressProvider/{account}/getPriceOracle": {
			"get": {
				"operationId": "Aavev3PoolAddressProviderGetPriceOracle",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `PoolAddressProviderAPIResponse` containing the price oracle address.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the price oracle address from the Aave pool address provider.",
				"tags": [
					"Pool Address Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account identifier.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain chain identifier.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the pool address provider.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/poolAddressProvider/{address}/setACLAdmin": {
			"post": {
				"operationId": "Aavev3PoolAddressProviderSetACLAdmin",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PoolAddressProviderAPIResponse containing the result of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderAPIResponse_PoolAddressProviderExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Sets the ACL (Access Control List) admin for the specified address.",
				"tags": [
					"Pool Address Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address for which the ACL admin is being set.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body of the request containing additional parameters.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PoolAddressProviderInputBody",
								"description": "- The body of the request containing additional parameters."
							}
						}
					}
				}
			}
		},
		"/aave/v3/poolAddressProvider/{address}/setACLManager": {
			"post": {
				"operationId": "Aavev3PoolAddressProviderSetACLManager",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PoolAddressProviderAPIResponse containing the result of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderAPIResponse_PoolAddressProviderExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Sets the ACL Manager for the specified pool address provider.",
				"tags": [
					"Pool Address Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the pool address provider.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing the chain ID and other necessary information.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PoolAddressProviderInputBody",
								"description": "- The input body containing the chain ID and other necessary information."
							}
						}
					}
				}
			}
		},
		"/aave/v3/poolAddressProvider/{address}/setAddress": {
			"post": {
				"operationId": "Aavev3PoolAddressProviderSetAddress",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PoolAddressProviderAPIResponse containing the result of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderAPIResponse_PoolAddressProviderExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Sets the address for the Pool Address Provider.",
				"tags": [
					"Pool Address Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address to be set.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body containing the chain ID and other necessary information.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PoolAddressProviderInputBody",
								"description": "- The body containing the chain ID and other necessary information."
							}
						}
					}
				}
			}
		},
		"/aave/v3/poolAddressProvider/{address}/setMarketId": {
			"post": {
				"operationId": "Aavev3PoolAddressProviderSetMarketId",
				"responses": {
					"200": {
						"description": "A promise that resolves to a response object containing the result of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderAPIResponse_PoolAddressProviderExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Sets the market ID for the given pool address provider.",
				"tags": [
					"Pool Address Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the pool address provider.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing the chain ID and other necessary information.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PoolAddressProviderInputBody",
								"description": "- The input body containing the chain ID and other necessary information."
							}
						}
					}
				}
			}
		},
		"/aave/v3/poolAddressProvider/{address}/setPoolConfiguratorImpl": {
			"post": {
				"operationId": "Aavev3PoolAddressProviderSetPoolConfiguratorImpl",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PoolAddressProviderAPIResponse containing the result of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderAPIResponse_PoolAddressProviderExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Sets the Pool Configurator implementation for the given address.",
				"tags": [
					"Pool Address Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the pool.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body containing the pool address provider input data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PoolAddressProviderInputBody",
								"description": "- The body containing the pool address provider input data."
							}
						}
					}
				}
			}
		},
		"/aave/v3/poolAddressProvider/{address}/setPoolImpl": {
			"post": {
				"operationId": "Aavev3PoolAddressProviderSetPoolImpl",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PoolAddressProviderAPIResponse containing the result of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderAPIResponse_PoolAddressProviderExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Sets the pool implementation address for the given address.",
				"tags": [
					"Pool Address Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the pool.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body containing the pool address provider input data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PoolAddressProviderInputBody",
								"description": "- The body containing the pool address provider input data."
							}
						}
					}
				}
			}
		},
		"/aave/v3/poolAddressProviderRegistry/{account}/getAddressesProvider": {
			"get": {
				"operationId": "Aavev3PoolAddressProviderRegistryGetAddressesProvider",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `PoolAddressProviderRegistryAPIResponse` containing the addresses provider.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderRegistryAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the addresses provider from the Aave V3 Pool Address Provider Registry.",
				"tags": [
					"PoolAddressProviderRegistry"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account identifier.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain chain identifier.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the registry.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/poolAddressProviderRegistry/{account}/getATokenTotalSupply": {
			"get": {
				"operationId": "Aavev3PoolAddressProviderRegistryGetATokenTotalSupply",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PoolAddressProviderRegistryAPIResponse containing the total supply of the specified AToken as a string.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderRegistryAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the total supply of a specific AToken.",
				"tags": [
					"PoolAddressProviderRegistry"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account address.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the pool address provider registry.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The asset for which to get the total supply.",
						"in": "query",
						"name": "asset",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/poolAddressProviderRegistry/{account}/getAllATokens": {
			"get": {
				"operationId": "Aavev3PoolAddressProviderRegistryGetAllATokens",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PoolAddressProviderRegistryAPIResponse containing an array of ATokens.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderRegistryAPIResponse_any-Array_"
								}
							}
						}
					}
				},
				"description": "Retrieves all ATokens associated with the specified account.",
				"tags": [
					"PoolAddressProviderRegistry"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account identifier.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain chain identifier.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address to query.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/poolAddressProviderRegistry/{account}/getAllReservesTokens": {
			"get": {
				"operationId": "GetAllReservesTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderRegistryAPIResponse_any-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"PoolAddressProviderRegistry"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/poolAddressProviderRegistry/{account}/getDebtCeiling": {
			"get": {
				"operationId": "Aavev3PoolAddressProviderRegistryGetDebtCeiling",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PoolAddressProviderRegistryAPIResponse containing the debt ceiling as a string.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoolAddressProviderRegistryAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the debt ceiling for a specified asset from the Aave V3 Pool Address Provider Registry.",
				"tags": [
					"PoolAddressProviderRegistry"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account identifier.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain chain identifier.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the Pool Address Provider Registry.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The asset for which to retrieve the debt ceiling.",
						"in": "query",
						"name": "asset",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/rewards/{account}/rewardsByAsset": {
			"get": {
				"operationId": "AAVEv3RewardsGetRewardsByAsset",
				"responses": {
					"200": {
						"description": "Array of reward addresses available for the asset",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3RewardsAPIResponse_string-Array_"
								}
							}
						}
					}
				},
				"description": "Retrieves all rewards for a specific asset",
				"tags": [
					"AAVEv3Rewards"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- Account identifier for the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Authorization token from the request header",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Chain ID to target",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Asset address to query rewards for",
						"in": "query",
						"name": "asset",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/rewards/{account}/userRewards": {
			"get": {
				"operationId": "AAVEv3RewardsGetUserRewards",
				"responses": {
					"200": {
						"description": "Amount of rewards available for the user",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3RewardsAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Gets reward data for a specific user",
				"tags": [
					"AAVEv3Rewards"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- Account identifier for the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Authorization token from the request header",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Chain ID to target",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Array of asset addresses to check rewards for",
						"in": "query",
						"name": "assets",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- User address to check rewards for",
						"in": "query",
						"name": "user",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Reward token address",
						"in": "query",
						"name": "reward",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/rewards/{account}/rewardsData": {
			"get": {
				"operationId": "AAVEv3RewardsGetRewardsData",
				"responses": {
					"200": {
						"description": "Array of reward configuration data",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3RewardsAPIResponse_string-Array_"
								}
							}
						}
					}
				},
				"description": "Retrieves rewards configuration data for an asset",
				"tags": [
					"AAVEv3Rewards"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- Account identifier for the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Authorization token from the request header",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Chain ID to target",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Asset address to get rewards data for",
						"in": "query",
						"name": "asset",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Reward token address",
						"in": "query",
						"name": "reward",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/rewards/{address}/claimRewards": {
			"post": {
				"operationId": "AAVEv3RewardsClaimRewards",
				"responses": {
					"200": {
						"description": "Transaction result of the claim operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3RewardsAPIResponse_AAVEv3RewardsExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Claims rewards for the specified assets and rewards",
				"tags": [
					"AAVEv3Rewards"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- Address claiming the rewards",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Authorization token from the request header",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- Input parameters for claiming rewards",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AAVEv3RewardsInputBody",
								"description": "- Input parameters for claiming rewards"
							}
						}
					}
				}
			}
		},
		"/aave/v3/rewards/{address}/claimRewardsOnBehalf": {
			"post": {
				"operationId": "AAVEv3RewardsClaimRewardsOnBehalf",
				"responses": {
					"200": {
						"description": "Transaction result of the claim operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3RewardsAPIResponse_AAVEv3RewardsExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Claims rewards on behalf of another address",
				"tags": [
					"AAVEv3Rewards"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- Address claiming the rewards",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Authorization token from the request header",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- Input parameters for claiming rewards",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AAVEv3RewardsInputBody",
								"description": "- Input parameters for claiming rewards"
							}
						}
					}
				}
			}
		},
		"/aave/v3/rewards/{address}/claimRewardsToSelf": {
			"post": {
				"operationId": "AAVEv3RewardsClaimRewardsToSelf",
				"responses": {
					"200": {
						"description": "Transaction result of the claim operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3RewardsAPIResponse_AAVEv3RewardsExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Claims rewards to the calling address",
				"tags": [
					"AAVEv3Rewards"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- Address claiming the rewards",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Authorization token from the request header",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- Input parameters for claiming rewards",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AAVEv3RewardsInputBody",
								"description": "- Input parameters for claiming rewards"
							}
						}
					}
				}
			}
		},
		"/aave/v3/rewards/{address}/claimAllRewards": {
			"post": {
				"operationId": "AAVEv3RewardsClaimAllRewards",
				"responses": {
					"200": {
						"description": "Transaction result of the claim operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3RewardsAPIResponse_AAVEv3RewardsExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Claims all available rewards for the specified assets",
				"tags": [
					"AAVEv3Rewards"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- Address claiming the rewards",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Authorization token from the request header",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- Input parameters for claiming all rewards",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AAVEv3RewardsInputBody",
								"description": "- Input parameters for claiming all rewards"
							}
						}
					}
				}
			}
		},
		"/aave/v3/rewards/{address}/claimAllRewardsOnBehalf": {
			"post": {
				"operationId": "AAVEv3RewardsClaimAllRewardsOnBehalf",
				"responses": {
					"200": {
						"description": "Transaction result of the claim operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3RewardsAPIResponse_AAVEv3RewardsExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Claims all rewards on behalf of another address",
				"tags": [
					"AAVEv3Rewards"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- Address claiming the rewards",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Authorization token from the request header",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- Input parameters for claiming all rewards",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AAVEv3RewardsInputBody",
								"description": "- Input parameters for claiming all rewards"
							}
						}
					}
				}
			}
		},
		"/aave/v3/rewards/{address}/claimAllRewardsToSelf": {
			"post": {
				"operationId": "AAVEv3RewardsClaimAllRewardsToSelf",
				"responses": {
					"200": {
						"description": "Transaction result of the claim operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3RewardsAPIResponse_AAVEv3RewardsExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Claims all rewards to the calling address",
				"tags": [
					"AAVEv3Rewards"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- Address claiming the rewards",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Authorization token from the request header",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- Input parameters for claiming all rewards",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AAVEv3RewardsInputBody",
								"description": "- Input parameters for claiming all rewards"
							}
						}
					}
				}
			}
		},
		"/aave/v3/incentives/fullReservesIncentiveData": {
			"get": {
				"operationId": "AAVEv3IncentiveDataProviderGetFullReservesData",
				"responses": {
					"200": {
						"description": "Combined reserves and user incentive data",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3UiIncentiveDataProviderAPIResponse_FullReservesIncentiveData_"
								}
							}
						}
					}
				},
				"description": "Retrieves full incentive data for all reserves and user positions",
				"tags": [
					"AAVE v3 UI Incentive Data Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- Authorization token from request header",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Address of the incentive data provider contract",
						"in": "query",
						"name": "contract_address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Chain ID to target",
						"in": "query",
						"name": "chain_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Address of the pool address provider",
						"in": "query",
						"name": "provider",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Address of the user to get incentive data for",
						"in": "query",
						"name": "user",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/incentives/reservesIncentivesData": {
			"get": {
				"operationId": "AAVEv3IncentiveDataProviderGetReservesData",
				"responses": {
					"200": {
						"description": "Array of incentive data for each reserve",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3UiIncentiveDataProviderAPIResponse_AggregatedReserveIncentiveData-Array_"
								}
							}
						}
					}
				},
				"description": "Retrieves incentive data for all reserves in the pool",
				"tags": [
					"AAVE v3 UI Incentive Data Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- Authorization token from request header",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Address of the incentive data provider contract",
						"in": "query",
						"name": "contract_address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Chain ID to target",
						"in": "query",
						"name": "chain_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Address of the pool address provider",
						"in": "query",
						"name": "provider",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/incentives/userReservesIncentivesData": {
			"get": {
				"operationId": "AAVEv3IncentiveDataProviderGetUserReservesData",
				"responses": {
					"200": {
						"description": "Array of incentive data for the user's reserve positions",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3UiIncentiveDataProviderAPIResponse_UserReserveIncentiveData-Array_"
								}
							}
						}
					}
				},
				"description": "Retrieves incentive data for a user's positions in all reserves",
				"tags": [
					"AAVE v3 UI Incentive Data Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- Authorization token from request header",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Address of the incentive data provider contract",
						"in": "query",
						"name": "contract_address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Chain ID to target",
						"in": "query",
						"name": "chain_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Address of the pool address provider",
						"in": "query",
						"name": "provider",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Address of the user to get incentive data for",
						"in": "query",
						"name": "user",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/pool-data/eth-currency-unit": {
			"get": {
				"operationId": "aaveV3UiPoolDataProviderEthCurrencyUnit",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AAVEv3UiPoolDataProviderAPIResponse containing the ETH currency unit as a string.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3UiPoolDataProviderAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the ETH currency unit from the AAVE V3 UI Pool Data Provider.",
				"tags": [
					"AAVE v3 UI Pool Data Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The contract address to query.",
						"in": "query",
						"name": "contract_address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID to query.",
						"in": "query",
						"name": "chain_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/pool-data/reserves-data": {
			"get": {
				"operationId": "GetReservesData",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3UiPoolDataProviderAPIResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"AAVE v3 UI Pool Data Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "contract_address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chain_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "provider",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/pool-data/reserves-list": {
			"get": {
				"operationId": "aaveV3UiPoolDataProviderReservesList",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AAVEv3UiPoolDataProviderAPIResponse containing an array of reserve addresses.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3UiPoolDataProviderAPIResponse_string-Array_"
								}
							}
						}
					}
				},
				"description": "Retrieves the list of reserves from the AAVE V3 UI Pool Data Provider.",
				"tags": [
					"AAVE v3 UI Pool Data Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The contract address to query.",
						"in": "query",
						"name": "contract_address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID to query.",
						"in": "query",
						"name": "chain_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The provider to use for querying the reserves list.",
						"in": "query",
						"name": "provider",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/pool-data/user-reserves-data": {
			"get": {
				"operationId": "aaveV3UiPoolDataProviderUserReservesData",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AAVEv3UiPoolDataProviderAPIResponse containing an array of UserReserveData.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3UiPoolDataProviderAPIResponse_UserReserveData-Array_"
								}
							}
						}
					}
				},
				"description": "Retrieves the user's reserve data from the AAVE v3 UI Pool Data Provider.",
				"tags": [
					"AAVE v3 UI Pool Data Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The contract address of the AAVE v3 UI Pool Data Provider.",
						"in": "query",
						"name": "contract_address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID where the contract is deployed.",
						"in": "query",
						"name": "chain_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The provider address.",
						"in": "query",
						"name": "provider",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The user address whose reserve data is to be fetched.",
						"in": "query",
						"name": "user",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/pool-data/market-reference-currency-price-in-usd-proxy-aggregator": {
			"get": {
				"operationId": "aaveV3UiPoolDataProviderMarketReferenceCurrencyPriceInUsdProxyAggregator",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AAVEv3UiPoolDataProviderAPIResponse containing the market reference currency price in USD.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3UiPoolDataProviderAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the market reference currency price in USD using the proxy aggregator.",
				"tags": [
					"AAVE v3 UI Pool Data Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The contract address to query.",
						"in": "query",
						"name": "contract_address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID to query.",
						"in": "query",
						"name": "chain_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/pool-data/network-base-token-price-in-usd-proxy-aggregator": {
			"get": {
				"operationId": "aaveV3UiPoolDataProviderNetworkBaseTokenPriceInUsdProxyAggregator",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AAVEv3UiPoolDataProviderAPIResponse containing the network base token price in USD using the proxy aggregator.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3UiPoolDataProviderAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "\nRetrieves the network base token price in USD using the proxy aggregator.",
				"tags": [
					"AAVE v3 UI Pool Data Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The contract address to query.",
						"in": "query",
						"name": "contract_address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID to query.",
						"in": "query",
						"name": "chain_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/wallet-balance/balance-of": {
			"get": {
				"operationId": "aaveV3WalletBalanceOf",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AAVEv3WalletBalanceProviderAPIResponse containing the balance as a string.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3WalletBalanceProviderAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the balance of a specific token for a user from the AAVE v3 Wallet Balance Provider.",
				"tags": [
					"AAVE v3 Wallet Balance Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the contract to query.",
						"in": "query",
						"name": "contract_address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chain_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the user whose balance is being queried.",
						"in": "query",
						"name": "user",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the token to query the balance for.",
						"in": "query",
						"name": "token_address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/aave/v3/wallet-balance/batch-balance-of": {
			"get": {
				"operationId": "aaveV3WalletBatchBalanceOf",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AAVEv3WalletBalanceProviderAPIResponse containing an array of balances as strings.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3WalletBalanceProviderAPIResponse_string-Array_"
								}
							}
						}
					}
				},
				"description": "Retrieves the batch balance of multiple users for specified tokens.",
				"tags": [
					"AAVE v3 Wallet Balance Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the contract.",
						"in": "query",
						"name": "contract_address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chain_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- An array of user addresses to retrieve balances for.",
						"in": "query",
						"name": "users",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- An array of token addresses to retrieve balances for.",
						"in": "query",
						"name": "tokens",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				]
			}
		},
		"/aave/v3/wallet-balance/user-wallet-balances": {
			"get": {
				"operationId": "aaveV3WalletUserWalletBalances",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the user's wallet balances.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AAVEv3WalletBalanceProviderAPIResponse__tokens-string-Array--balances-string-Array--__"
								}
							}
						}
					}
				},
				"description": "Retrieves the wallet balances for a user from the AAVE v3 Wallet Balance Provider.",
				"tags": [
					"AAVE v3 Wallet Balance Provider"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The contract address to query.",
						"in": "query",
						"name": "contract_address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID to query.",
						"in": "query",
						"name": "chain_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The provider to use for querying balances.",
						"in": "query",
						"name": "provider",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The user address to query balances for.",
						"in": "query",
						"name": "user",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/accounts": {
			"post": {
				"operationId": "Accounts_createEthereumAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the success status, message, and data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Creates a new account using the provided authorization token and account input data.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data required to create a new account.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateAccountInput",
								"description": "- The input data required to create a new account."
							}
						}
					}
				}
			},
			"get": {
				"operationId": "Accounts_listEthereumAccounts",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the list of accounts.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Lists accounts using the provided authorization token.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/accounts/{accountName}": {
			"get": {
				"operationId": "Accounts_getEthreumAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "\n\nRetrieves the account details for a given account name.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to retrieve.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "Accounts_deleteEthereumAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object indicating the success or failure of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Deletes an account based on the provided account name.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to be deleted.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/accounts/{accountName}/nonce": {
			"get": {
				"operationId": "Accounts_EthereumGetNonce",
				"responses": {
					"200": {
						"description": "A promise that resolves to a NonceAPIResponse object containing the nonce.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NonceAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the nonce for a given account.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to retrieve the nonce for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/accounts/{accountName}/balance": {
			"get": {
				"operationId": "Accounts_EthereumGetNativeBalance",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BalanceAPIResponse object containing the balance information.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BalanceAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the balance of a specified account.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to retrieve the balance for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/accounts/{accountName}/suggest-gas": {
			"get": {
				"operationId": "Accounts_suggestGasPrice",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TransactionAPIResponse object containing the suggested gas price.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionAPIResponse"
								}
							}
						}
					}
				},
				"description": "Suggests the gas price for a given account and chain ID.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account for which to suggest the gas price.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/accounts/{accountName}/estimate": {
			"post": {
				"operationId": "Accounts_estimateGas",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TransactionAPIResponse object containing the result of the gas estimation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionAPIResponse"
								}
							}
						}
					}
				},
				"description": "Estimates the gas required for a transaction.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account for which to estimate gas.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing transaction details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The input body containing transaction details."
							}
						}
					}
				}
			}
		},
		"/accounts/{accountName}/transfer-eth": {
			"post": {
				"operationId": "Accounts_transferEth",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TransactionAPIResponse object.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionAPIResponse"
								}
							}
						}
					}
				},
				"description": "Transfers Ethereum from one account to another.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account from which Ethereum will be transferred.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing transfer details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The input body containing transfer details."
							}
						}
					}
				}
			}
		},
		"/accounts/{accountName}/sign-message": {
			"post": {
				"operationId": "Accounts_signEthreumMessage",
				"responses": {
					"200": {
						"description": "A promise that resolves to a SignMessageAPIResponse object containing the result of the sign message operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SignMessageAPIResponse"
								}
							}
						}
					}
				},
				"description": "Signs a message using the provided account name and authorization token.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to sign the message with.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body of the request containing the message to be signed.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SignMessage",
								"description": "- The body of the request containing the message to be signed."
							}
						}
					}
				}
			}
		},
		"/accounts/{accountName}/sign-transaction": {
			"post": {
				"operationId": "Accounts_signEthereumTransaction",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TransactionAPIResponse object containing the result of the transaction signing.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionAPIResponse"
								}
							}
						}
					}
				},
				"description": "Signs a transaction for the specified account.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account for which the transaction is to be signed.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing transaction details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The input body containing transaction details."
							}
						}
					}
				}
			}
		},
		"/accounts/{accountName}/export": {
			"get": {
				"operationId": "Accounts_exportEthreumAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ExportAccountAPIResponse object containing the account details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ExportAccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Exports the account details including address, private key, and public key.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to be exported.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/accounts/{accountName}/sign-typed-data": {
			"post": {
				"operationId": "Accounts_signEthereumTypedData",
				"responses": {
					"200": {
						"description": "A promise that resolves to a SignMessageAPIResponse object containing the result of the signing operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SignMessageAPIResponse"
								}
							}
						}
					}
				},
				"description": "Handles the signing of typed data for a given account.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account for which the data is to be signed.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The data to be signed.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SignTypedData",
								"description": "- The data to be signed."
							}
						}
					}
				}
			}
		},
		"/accounts/{accountName}/deploy": {
			"post": {
				"operationId": "Accounts_deployContract",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TransactionAPIResponse indicating the success or failure of the deployment.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionAPIResponse"
								}
							}
						}
					}
				},
				"description": "Deploys a contract using the provided account name and deployment input.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to deploy the contract to.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The deployment input data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeployInput",
								"description": "- The deployment input data."
							}
						}
					}
				}
			}
		},
		"/accounts/{accountName}/broadcast-tx": {
			"post": {
				"operationId": "Accounts_broadcastEthreeumTransaction",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BroadCastRawTransactionAPIResponse object.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BroadCastRawTransactionAPIResponse"
								}
							}
						}
					}
				},
				"description": "Broadcasts a transaction using the provided account name and transaction details.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to broadcast the transaction from.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The transaction details to be broadcasted.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BroadcastInput",
								"description": "- The transaction details to be broadcasted."
							}
						}
					}
				}
			}
		},
		"/accounts/encode-data": {
			"post": {
				"operationId": "Accounts_encodeAbiData",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the encoded data, success status, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AbiEncodeOutput"
								}
							}
						}
					}
				},
				"description": "Encodes data using the provided ABI and function parameters.",
				"tags": [
					"Accounts"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input object containing the ABI, function name, and parameters.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AbiEncodeInput",
								"description": "- The input object containing the ABI, function name, and parameters."
							}
						}
					}
				}
			}
		},
		"/allora/inference": {
			"get": {
				"operationId": "GetPriceInference",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AlloraInferenceResponse object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AlloraInferenceResponse"
								}
							}
						}
					}
				},
				"description": "Get price inference for a specific asset and timeframe",
				"tags": [
					"Allora"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The asset to get inference for (ETH or BTC)",
						"in": "query",
						"name": "asset",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Asset"
						}
					},
					{
						"description": "- The timeframe for the inference (5m or 8h)",
						"in": "query",
						"name": "timeframe",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/TimeFrame"
						}
					},
					{
						"description": "- The current price of the asset",
						"in": "query",
						"name": "currentPrice",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/allora/log-return-to-percentage": {
			"get": {
				"operationId": "LogReturnToPercentage",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the percentage change",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"properties": {
												"percentageChange": {
													"type": "number",
													"format": "double"
												}
											},
											"required": [
												"percentageChange"
											],
											"type": "object"
										},
										"message": {
											"type": "string"
										},
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"message",
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Convert log return to percentage",
				"tags": [
					"Allora"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The log return to convert",
						"in": "query",
						"name": "logReturn",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/allora/implied-future-price": {
			"get": {
				"operationId": "ImpliedFuturePrice",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the implied future price",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"properties": {
												"impliedFuturePrice": {
													"type": "number",
													"format": "double"
												}
											},
											"required": [
												"impliedFuturePrice"
											],
											"type": "object"
										},
										"message": {
											"type": "string"
										},
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"message",
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Calculate implied future price",
				"tags": [
					"Allora"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The current price of the asset",
						"in": "query",
						"name": "currentPrice",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The log return",
						"in": "query",
						"name": "logReturn",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/bitcoin": {
			"get": {
				"operationId": "BitcoinListAccounts",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Lists the accounts associated with the provided authorization token.",
				"tags": [
					"Bitcoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "Bitcoin_BitcoinCreateAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account creation result.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Creates a new Bitcoin account.",
				"tags": [
					"Bitcoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data required to create a Bitcoin account.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BitcoinInput",
								"description": "- The input data required to create a Bitcoin account."
							}
						}
					}
				}
			}
		},
		"/bitcoin/{accountName}": {
			"get": {
				"operationId": "Bitcoin_BitcoinGetAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the account information for a given account name.",
				"tags": [
					"Bitcoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to retrieve.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/bitcoin/{accountName}/sign-tx": {
			"post": {
				"operationId": "Bitcoin_BitcoinSignTransaction",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BitcoinAPIResponse object containing the signed transaction data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BitcoinAPIResponse"
								}
							}
						}
					}
				},
				"description": "Signs a Bitcoin transaction using the provided account name and transaction input.",
				"tags": [
					"Bitcoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to sign the transaction for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The transaction input details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BitcoinTransactionInput",
								"description": "- The transaction input details."
							}
						}
					}
				}
			}
		},
		"/bitcoin/{accountName}/src20-inscription": {
			"post": {
				"operationId": "Bitcoin_BitcoinCreateSRC20Inscription",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BitcoinAPIResponse object containing the result of the inscription creation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BitcoinAPIResponse"
								}
							}
						}
					}
				},
				"description": "Creates an SRC20 inscription using the provided account name and inscription input.",
				"tags": [
					"Bitcoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account for which the inscription is being created.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data for the SRC20 inscription.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SRC20InscriptionInput",
								"description": "- The input data for the SRC20 inscription."
							}
						}
					}
				}
			}
		},
		"/bitcoin/{accountName}/brc20-tx": {
			"post": {
				"operationId": "Bitcoin_BitcoinCreateBRC20Transaction",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BitcoinAPIResponse object containing the transaction data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BitcoinAPIResponse"
								}
							}
						}
					}
				},
				"description": "Creates a BRC20 transaction.",
				"tags": [
					"Bitcoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account for which the transaction is being created.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data for the BRC20 transaction.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BRC20TransactionInput",
								"description": "- The input data for the BRC20 transaction."
							}
						}
					}
				}
			}
		},
		"/bitcoin/{accountName}/generate-unsigned-psbt": {
			"post": {
				"operationId": "Bitcoin_BitcoinGenerateUnsignedPSBTHex",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BitcoinAPIResponse containing the unsigned PSBT hex string.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BitcoinAPIResponse"
								}
							}
						}
					}
				},
				"description": "Generates an unsigned PSBT (Partially Signed Bitcoin Transaction) hex string.",
				"tags": [
					"Bitcoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account for which to generate the PSBT.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data required to generate the unsigned PSBT.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UnsignedPSBTInput",
								"description": "- The input data required to generate the unsigned PSBT."
							}
						}
					}
				}
			}
		},
		"/bitcoin/{accountName}/export": {
			"post": {
				"operationId": "Bitcoin_BitcoinExportAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Exports the account details for the specified account name.",
				"tags": [
					"Bitcoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to be exported.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/bitcoin/{accountName}/delete": {
			"post": {
				"operationId": "Bitcoin_BitcoinDeleteAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the result of the deletion operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Deletes a Bitcoin account.",
				"tags": [
					"Bitcoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to be deleted.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/bitcoincash/accounts": {
			"get": {
				"operationId": "BitcoinCashListAccounts",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BitcoinCashAPIResponse containing an array of AccountResponse objects.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BitcoinCashAPIResponse_AccountResponse_"
								}
							}
						}
					}
				},
				"description": "Lists Bitcoin Cash accounts associated with the provided authorization token.",
				"tags": [
					"BitcoinCash"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "BitcoinCash_BitcoinCashCreateAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BitcoinCashAPIResponse containing the account response.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BitcoinCashAPIResponse_AccountResponse_"
								}
							}
						}
					}
				},
				"description": "Creates a new Bitcoin Cash account.",
				"tags": [
					"BitcoinCash"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data required to create a Bitcoin Cash account.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BitcoinCashInput",
								"description": "- The input data required to create a Bitcoin Cash account."
							}
						}
					}
				}
			}
		},
		"/bitcoincash/accounts/{accountName}": {
			"get": {
				"operationId": "BitcoinCash_BitcoinCashGetAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BitcoinCashAPIResponse containing the account information.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BitcoinCashAPIResponse_AccountResponse_"
								}
							}
						}
					}
				},
				"description": "Reads the account information for a given account name.",
				"tags": [
					"BitcoinCash"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to read.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/bitcoincash/accounts/{accountName}/export": {
			"post": {
				"operationId": "BitcoinCash_BitcoinCashExportAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BitcoinCashAPIResponse containing the account details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BitcoinCashAPIResponse_AccountResponse_"
								}
							}
						}
					}
				},
				"description": "Exports the account details for the specified account name.",
				"tags": [
					"BitcoinCash"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to export.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/bitcoincash/accounts/{accountName}/delete": {
			"post": {
				"operationId": "BitcoinCash_BitcoinCashDeleteAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BitcoinCashAPIResponse containing the deleted account information.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BitcoinCashAPIResponse_AccountResponse_"
								}
							}
						}
					}
				},
				"description": "Deletes a Bitcoin Cash account.",
				"tags": [
					"BitcoinCash"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to be deleted.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/bitcoincash/accounts/{accountName}/sign-tx": {
			"post": {
				"operationId": "BitcoinCash_BitcoinCashSignTransaction",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BitcoinCashAPIResponse containing the signed transaction output.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BitcoinCashAPIResponse_BitcoinCashTransactionOutput_"
								}
							}
						}
					}
				},
				"description": "Signs a Bitcoin Cash transaction.",
				"tags": [
					"BitcoinCash"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to sign the transaction for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The transaction input data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BitcoinCashTransactionInput",
								"description": "- The transaction input data."
							}
						}
					}
				}
			}
		},
		"/bitcoincash/accounts/{accountName}/memo-sign-tx": {
			"post": {
				"operationId": "BitcoinCash_BitcoinCashSignTransactionWithMemo",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BitcoinCashAPIResponse containing the signed transaction output.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BitcoinCashAPIResponse_BitcoinCashTransactionOutput_"
								}
							}
						}
					}
				},
				"description": "Signs a Bitcoin Cash transaction with a memo.",
				"tags": [
					"BitcoinCash"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to sign the transaction for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data for the Bitcoin Cash transaction.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BitcoinCashTransactionInput",
								"description": "- The input data for the Bitcoin Cash transaction."
							}
						}
					}
				}
			}
		},
		"/bitcoincash/accounts/{accountName}/sign-btc-tx": {
			"post": {
				"operationId": "BitcoinCash_BitcoinCashSignBitcoinTransaction",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BitcoinCashAPIResponse containing the signed transaction.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BitcoinCashAPIResponse__signed_tx-string__"
								}
							}
						}
					}
				},
				"description": "Signs a Bitcoin transaction for the specified account.",
				"tags": [
					"BitcoinCash"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to sign the transaction for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing the network, inputs, and outputs.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"outputs": {
										"type": "string"
									},
									"inputs": {
										"type": "string"
									},
									"network": {
										"type": "string"
									}
								},
								"required": [
									"outputs",
									"inputs",
									"network"
								],
								"type": "object",
								"description": "- The request body containing the network, inputs, and outputs."
							}
						}
					}
				}
			}
		},
		"/bitcoincash/accounts/{accountName}/generate-unsigned-psbt": {
			"post": {
				"operationId": "BitcoinCash_BitcoinCashGenerateUnsignedPSBTHex",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BitcoinCashAPIResponse containing the PSBT hex string.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BitcoinCashAPIResponse__psbt_hex-string__"
								}
							}
						}
					}
				},
				"description": "Generates an unsigned PSBT (Partially Signed Bitcoin Transaction) hex string.",
				"tags": [
					"BitcoinCash"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account for which to generate the PSBT.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data required to generate the unsigned PSBT.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UnsignedPSBTInput",
								"description": "- The input data required to generate the unsigned PSBT."
							}
						}
					}
				}
			}
		},
		"/bitcoincash/accounts/{accountName}/sign-psbt-with-key-path-and-script-path": {
			"post": {
				"operationId": "BitcoinCash_BitcoinCashSignPSBTWithKeyPathAndScriptPath",
				"responses": {
					"200": {
						"description": "A promise that resolves to a BitcoinCashAPIResponse containing the signed PSBT in hexadecimal format.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BitcoinCashAPIResponse__signed_psbt_hex-string__"
								}
							}
						}
					}
				},
				"description": "Signs a Partially Signed Bitcoin Transaction (PSBT) using a key path and script path.",
				"tags": [
					"BitcoinCash"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to use for signing.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for authentication.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing the network and PSBT in hexadecimal format.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"psbt_hex": {
										"type": "string"
									},
									"network": {
										"type": "string"
									}
								},
								"required": [
									"psbt_hex",
									"network"
								],
								"type": "object",
								"description": "- The request body containing the network and PSBT in hexadecimal format."
							}
						}
					}
				}
			}
		},
		"/data/analysis/{symbol}/{timeframe}": {
			"get": {
				"operationId": "Charts_GetChartAnalysis",
				"responses": {
					"200": {
						"description": "A promise that resolves to a ChartAnalysisAPIResponse object containing the analysis data, success status, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChartAnalysisAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the chart analysis for a given trading symbol and timeframe.",
				"tags": [
					"Data"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The trading view symbol for which the chart analysis is requested.",
						"in": "path",
						"name": "symbol",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The timeframe for the chart analysis. Defaults to \"1D\". Can be \"1D\", \"4H\", or \"1H\".",
						"in": "path",
						"name": "timeframe",
						"required": true,
						"schema": {
							"default": "1D",
							"type": "string",
							"enum": [
								"1D",
								"4H",
								"1H",
								"15m"
							]
						}
					}
				]
			}
		},
		"/components": {
			"get": {
				"operationId": "Components_getComponents",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `ComponentAPIResponse` containing an array of `ComponentDefinition` objects.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ComponentAPIResponse_ComponentDefinition-Array_"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of components from the database.",
				"tags": [
					"Components"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "Components_createComponent",
				"responses": {
					"200": {
						"description": "A promise that resolves to a ComponentAPIResponse containing the newly created component or an error message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ComponentAPIResponse_ComponentDefinition_"
								}
							}
						}
					}
				},
				"description": "Creates a new component in the database.",
				"tags": [
					"Components"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The component data to be created, excluding the \"id\" field.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_ComponentDefinition.id_",
								"description": "- The component data to be created, excluding the \"id\" field."
							}
						}
					}
				}
			}
		},
		"/components/{id}": {
			"get": {
				"operationId": "Components_getComponent",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `ComponentAPIResponse` containing the `ComponentDefinition`.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ComponentAPIResponse_ComponentDefinition_"
								}
							}
						}
					}
				},
				"description": "Retrieves a component by its ID.",
				"tags": [
					"Components"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ID of the component to retrieve.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "Components_updateComponent",
				"responses": {
					"200": {
						"description": "A promise that resolves to a ComponentAPIResponse indicating the success or failure of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ComponentAPIResponse_ComponentDefinition_"
								}
							}
						}
					}
				},
				"description": "\nUpdates a component in the database.",
				"tags": [
					"Components"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "The ID of the component.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The partial component data to be updated.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_ComponentDefinition_",
								"description": "The partial component data to be updated."
							}
						}
					}
				}
			}
		},
		"/components/search": {
			"get": {
				"operationId": "Components_searchComponents",
				"responses": {
					"200": {
						"description": "A promise that resolves to a ComponentAPIResponse containing an array of ComponentMatch objects.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ComponentAPIResponse_ComponentMatch-Array_"
								}
							}
						}
					}
				},
				"description": "Searches for components similar to the specified query.",
				"tags": [
					"Components"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The query to search for.",
						"in": "query",
						"name": "query",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The similarity threshold for the search.",
						"in": "query",
						"name": "threshold",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The maximum number of results to return.",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/components/{id}/embedding": {
			"post": {
				"operationId": "Components_updateEmbedding",
				"responses": {
					"200": {
						"description": "A promise that resolves to a ComponentAPIResponse indicating the success or failure of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ComponentAPIResponse_void_"
								}
							}
						}
					}
				},
				"description": "Updates the embedding of a component's description.",
				"tags": [
					"Components"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ID of the component.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing the description.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"description": {
										"type": "string"
									}
								},
								"required": [
									"description"
								],
								"type": "object",
								"description": "- The request body containing the description."
							}
						}
					}
				}
			}
		},
		"/components/{id}/embedding/force": {
			"post": {
				"operationId": "Components_forceEmbedding",
				"responses": {
					"200": {
						"description": "A promise that resolves to a ComponentAPIResponse indicating the success or failure of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ComponentAPIResponse_void_"
								}
							}
						}
					}
				},
				"description": "Forces the embedding of a description for a component.",
				"tags": [
					"Components"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ID of the component.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing the description.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"description": {
										"type": "string"
									}
								},
								"required": [
									"description"
								],
								"type": "object",
								"description": "- The request body containing the description."
							}
						}
					}
				}
			}
		},
		"/components/capabilities": {
			"get": {
				"operationId": "Components_getComponentCapabilitiesDescription",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `ComponentAPIResponse` containing an array of partial `ComponentDefinition` objects.\nEach object includes the `xml_tag` and `description` of a component.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ComponentAPIResponse_Partial_ComponentDefinition_-Array_"
								}
							}
						}
					}
				},
				"description": "Retrieves the capabilities description of components from the database.",
				"tags": [
					"Components"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token provided in the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/cookiefun/kols": {
			"get": {
				"operationId": "CookieFun_GetKOLList",
				"responses": {
					"200": {
						"description": "A promise that resolves to a KOLListAPIResponse object containing the KOL list.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/KOLListAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of key opinion leaders (KOLs).",
				"tags": [
					"CookieFun"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The number of results to return (optional).",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The sorting criteria (optional).",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The filter criteria (optional).",
						"in": "query",
						"name": "filter",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The page number for pagination (optional).",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/cookiefun/kols/{username}/network": {
			"get": {
				"operationId": "CookieFun_GetKOLNetwork",
				"responses": {
					"200": {
						"description": "A promise that resolves to a KOLNetworkAPIResponse object containing the KOL's network information.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/KOLNetworkAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the network information for a specific KOL.",
				"tags": [
					"CookieFun"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The username of the KOL.",
						"in": "path",
						"name": "username",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The depth of the network to retrieve (optional).",
						"in": "query",
						"name": "depth",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The filter criteria for the network (optional).",
						"in": "query",
						"name": "filter",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The metric to analyze the network (optional).",
						"in": "query",
						"name": "metric",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/cookiefun/kols/{username}/community": {
			"get": {
				"operationId": "CookieFun_GetKOLCommunity",
				"responses": {
					"200": {
						"description": "A promise that resolves to a CommunityMetricsAPIResponse object containing the community metrics.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CommunityMetricsAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves community metrics for a specific KOL.",
				"tags": [
					"CookieFun"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The username of the KOL.",
						"in": "path",
						"name": "username",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The time period for the metrics.",
						"in": "query",
						"name": "period",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The specific metrics to retrieve.",
						"in": "query",
						"name": "metrics",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- The filter criteria for the community (optional).",
						"in": "query",
						"name": "filter",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/cookiefun/tweets/trending": {
			"get": {
				"operationId": "CookieFun_GetTrendingTweets",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TrendingTweetsAPIResponse object containing the trending tweets.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TrendingTweetsAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves trending tweets.",
				"tags": [
					"CookieFun"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The metrics to include for each tweet.",
						"in": "query",
						"name": "metrics",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- The time period for the trending tweets.",
						"in": "query",
						"name": "period",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The number of trending tweets to retrieve (optional).",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The category of tweets to retrieve (optional).",
						"in": "query",
						"name": "category",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/cookiefun/narratives/trending": {
			"get": {
				"operationId": "CookieFun_GetTrendingNarratives",
				"responses": {
					"200": {
						"description": "A promise that resolves to a NarrativeTrendsAPIResponse object containing the trending narratives.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NarrativeTrendsAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves trending narratives.",
				"tags": [
					"CookieFun"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The timeframe for the trending narratives.",
						"in": "query",
						"name": "timeframe",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The minimum threshold for trend strength (optional).",
						"in": "query",
						"name": "threshold",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The category of narratives to retrieve (optional).",
						"in": "query",
						"name": "category",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/cookiefun/tokens/{tokenId}/analytics": {
			"get": {
				"operationId": "CookieFun_GetTokenAnalytics",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TokenAnalyticsAPIResponse object containing the token analytics.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TokenAnalyticsAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves token analytics.",
				"tags": [
					"CookieFun"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ID of the token.",
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The metrics to retrieve for the token.",
						"in": "query",
						"name": "metrics",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- The time period for the analytics.",
						"in": "query",
						"name": "period",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The interval for the data points.",
						"in": "query",
						"name": "interval",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/cookiefun/tokens/trending": {
			"get": {
				"operationId": "CookieFun_GetTrendingTokens",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TrendingTokensAPIResponse object containing the trending tokens.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TrendingTokensAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves trending tokens.",
				"tags": [
					"CookieFun"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The metrics to include for each token.",
						"in": "query",
						"name": "metrics",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- The sorting criteria for the trending tokens.",
						"in": "query",
						"name": "sort",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The filter criteria for the trending tokens (optional).",
						"in": "query",
						"name": "filter",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The number of trending tokens to retrieve (optional).",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/cookiefun/predictive/{metric}": {
			"get": {
				"operationId": "CookieFun_GetPredictiveMetrics",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PredictiveMetricsAPIResponse object containing the predictive metrics.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PredictiveMetricsAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves predictive metrics.",
				"tags": [
					"CookieFun"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The specific metric to predict.",
						"in": "path",
						"name": "metric",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The target for the prediction.",
						"in": "query",
						"name": "target",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The time horizon for the prediction.",
						"in": "query",
						"name": "horizon",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The minimum confidence level for the prediction (optional).",
						"in": "query",
						"name": "confidence",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/cosmos": {
			"get": {
				"operationId": "Cosmos_CosmosListAccounts",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `CosmosAccountListAPIResponse` object containing the list of accounts.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CosmosAccountListAPIResponse"
								}
							}
						}
					}
				},
				"description": "Lists Cosmos accounts associated with the provided authorization token.",
				"tags": [
					"Cosmos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "Cosmos_CosmosCreateAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `CosmosAccountAPIResponse` object.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CosmosAccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Creates a new Cosmos account.",
				"tags": [
					"Cosmos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing optional network information.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"network": {
										"type": "string"
									}
								},
								"type": "object",
								"description": "- The request body containing optional network information."
							}
						}
					}
				}
			}
		},
		"/cosmos/{accountName}": {
			"get": {
				"operationId": "Cosmos_CosmosGetAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `CosmosAccountAPIResponse` object containing the account data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CosmosAccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves account information from the Cosmos SDK.",
				"tags": [
					"Cosmos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token provided in the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to retrieve.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "Cosmos_CosmosDeleteAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `BaseCosmosAPIResponse` indicating the success or failure of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseCosmosAPIResponse"
								}
							}
						}
					}
				},
				"description": "Deletes an account in the Cosmos SDK.",
				"tags": [
					"Cosmos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token provided in the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to be deleted.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/cosmos/{accountName}/export": {
			"post": {
				"operationId": "Cosmos_CosmosExportAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `BaseCosmosAPIResponse` indicating the success or failure of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseCosmosAPIResponse"
								}
							}
						}
					}
				},
				"description": "Exports a Cosmos account.",
				"tags": [
					"Cosmos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token provided in the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to be exported.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/cosmos/{accountName}/sign-transfer": {
			"post": {
				"operationId": "Cosmos_CosmosSignTransferTransaction",
				"responses": {
					"200": {
						"description": "A promise that resolves to a CosmosTransactionAPIResponse object containing the transaction data, success status, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CosmosTransactionAPIResponse"
								}
							}
						}
					}
				},
				"description": "Signs a transfer transaction using the provided authorization token and account name.",
				"tags": [
					"Cosmos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token provided in the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to sign the transaction for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The transfer input details required for the transaction.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CosmosTransferInput",
								"description": "- The transfer input details required for the transaction."
							}
						}
					}
				}
			}
		},
		"/cosmos/{accountName}/sign-message": {
			"post": {
				"operationId": "Cosmos_CosmosSignMessage",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `CosmosSignedMessageAPIResponse` object containing the signed message data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CosmosSignedMessageAPIResponse"
								}
							}
						}
					}
				},
				"description": "Signs a message using the Cosmos SDK.",
				"tags": [
					"Cosmos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to sign the message for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data required to sign the message.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CosmosSignMessageInput",
								"description": "- The input data required to sign the message."
							}
						}
					}
				}
			}
		},
		"/cosmos/{accountName}/sign-ibc-transfer": {
			"post": {
				"operationId": "Cosmos_CosmosSignIBCTransferTransaction",
				"responses": {
					"200": {
						"description": "A promise that resolves to a CosmosTransactionAPIResponse object containing the transaction data, success status, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CosmosTransactionAPIResponse"
								}
							}
						}
					}
				},
				"description": "Signs an IBC transfer transaction for a given account.",
				"tags": [
					"Cosmos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account for which the transaction is being signed.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data for the Cosmos IBC transfer transaction.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CosmosIBCTransferInput",
								"description": "- The input data for the Cosmos IBC transfer transaction."
							}
						}
					}
				}
			}
		},
		"/data/{address}/balance": {
			"get": {
				"operationId": "Data_GetWalletTokenBalances",
				"responses": {
					"200": {
						"description": "A promise that resolves to a WalletBalanceAPIResponse object containing the balance data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WalletBalanceAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the wallet balance for a given address.",
				"tags": [
					"Data"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The wallet address to retrieve the balance for.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network to query.",
						"in": "query",
						"name": "chain",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Optional flag to exclude native currency from the balance.",
						"in": "query",
						"name": "excludeNative",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					}
				]
			}
		},
		"/data/{address}/history": {
			"get": {
				"operationId": "Data_GetWalletTransactionHistory",
				"responses": {
					"200": {
						"description": "A promise that resolves to a WalletHistoryAPIResponse object containing the wallet history data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WalletHistoryAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the wallet history for a given address and blockchain chain.",
				"tags": [
					"Data"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The wallet address to retrieve history for.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain chain to retrieve history from.",
						"in": "query",
						"name": "chain",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/data/token-metadata": {
			"get": {
				"operationId": "Data_GetTokensMetadata",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `TokenMetadataAPIResponse` object containing the metadata, success status, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TokenMetadataAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves token metadata from the Moralis service.",
				"tags": [
					"Data"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network identifier.",
						"in": "query",
						"name": "chain",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- An array of token addresses to fetch metadata for.",
						"in": "query",
						"name": "addresses",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				]
			}
		},
		"/data/{address}/nfts": {
			"get": {
				"operationId": "Data_GetWalletNFTs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NFTsAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Data"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chain",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/data/{address}/portfolio": {
			"get": {
				"operationId": "Data_GetUserWalletPortfolio",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `PortfolioAPIResponse` object.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PortfolioAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the user's portfolio based on the provided wallet address.",
				"tags": [
					"Data"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The wallet address of the user.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The page number for pagination (default is 1).",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 1,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The number of items per page for pagination (default is 100).",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 100,
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/data/portfolio/status/{jobId}": {
			"get": {
				"operationId": "Data_GetPortfolioFetchStatus",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PortfolioAPIResponse object containing the status of the job.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PortfolioAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the status of a portfolio job.",
				"tags": [
					"Data"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ID of the job to retrieve the status for.",
						"in": "path",
						"name": "jobId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/data/query": {
			"post": {
				"operationId": "Data_ExecuteCustomSupabaseQuery",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the success status, message, and data.",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Executes a query using the LLMSupabaseQueryGenerator and returns the result.",
				"tags": [
					"Data"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The query string to be executed.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "string",
								"description": "- The query string to be executed."
							}
						}
					}
				}
			}
		},
		"/data/{address}/debank/tokens": {
			"get": {
				"operationId": "Data_GetUserDebankTokenList",
				"responses": {
					"200": {
						"description": "A promise that resolves to a WalletBalanceAPIResponse object containing the token list.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WalletBalanceAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the user's token list from Debank, with Supabase caching.",
				"tags": [
					"Data"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The wallet address of the user.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID to fetch tokens for.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/data/{address}/debank/complex-protocols": {
			"get": {
				"operationId": "Data_GetUserDebankComplexProtocolList",
				"responses": {
					"200": {
						"description": "A promise that resolves to a PortfolioAPIResponse object containing the complex protocol list.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DebankPortfolioAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the user's complex protocol list from Debank, with Supabase caching.",
				"tags": [
					"Data"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The wallet address of the user.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID to fetch complex protocols for.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/data/{address}/debank/all-tokens": {
			"get": {
				"operationId": "GetAllDebankUserTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"message": {
													"type": "string"
												},
												"success": {
													"type": "boolean"
												},
												"data": {}
											},
											"required": [
												"message",
												"success",
												"data"
											],
											"type": "object"
										},
										{
											"properties": {
												"data": {},
												"success": {
													"type": "boolean"
												},
												"message": {}
											},
											"required": [
												"success",
												"message"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Data"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "isAll",
						"required": true,
						"schema": {
							"type": "boolean"
						}
					}
				]
			}
		},
		"/dogecoin": {
			"get": {
				"operationId": "DogeCoinListAccounts",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Lists the accounts associated with the provided Dogecoin token.",
				"tags": [
					"DogeCoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token for accessing Dogecoin accounts.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "Dogecoin_DogeCoinCreateNewAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account creation result.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Creates a new Dogecoin account.",
				"tags": [
					"DogeCoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data required to create a Dogecoin account.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DogeCoinInput",
								"description": "- The input data required to create a Dogecoin account."
							}
						}
					}
				}
			}
		},
		"/dogecoin/{accountName}": {
			"get": {
				"operationId": "Dogecoin_DogeCoinGetAccountDetails",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the account information for a given account name.",
				"tags": [
					"DogeCoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to retrieve.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/dogecoin/{accountName}/sign-tx": {
			"post": {
				"operationId": "Dogecoin_DogeCoinSignTransaction",
				"responses": {
					"200": {
						"description": "A promise that resolves to a DogeCoinAPIResponse object containing the transaction data, success status, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DogeCoinAPIResponse"
								}
							}
						}
					}
				},
				"description": "Signs a Dogecoin transaction.",
				"tags": [
					"DogeCoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account for which the transaction is being signed.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The transaction input data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DogeCoinTransactionInput",
								"description": "- The transaction input data."
							}
						}
					}
				}
			}
		},
		"/dogecoin/{accountName}/export": {
			"post": {
				"operationId": "Dogecoin_DogeCoinExportAccountDetails",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Exports the account details for a given account name.",
				"tags": [
					"DogeCoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to be exported.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/dogecoin/{accountName}/delete": {
			"post": {
				"operationId": "Dogecoin_DogeCoinDeleteAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the result of the deletion operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Deletes a Dogecoin account.",
				"tags": [
					"DogeCoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to be deleted.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/dogecoin/{accountName}/memo-sign-tx": {
			"post": {
				"operationId": "Dogecoin_DogeCoinSignTransactionWithMemo",
				"responses": {
					"200": {
						"description": "A promise that resolves to a DogeCoinAPIResponse object containing the signed transaction data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DogeCoinAPIResponse"
								}
							}
						}
					}
				},
				"description": "Signs a Dogecoin transaction with a memo.",
				"tags": [
					"DogeCoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to sign the transaction for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The transaction input data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DogeCoinTransactionInput",
								"description": "- The transaction input data."
							}
						}
					}
				}
			}
		},
		"/ens/resolve": {
			"post": {
				"operationId": "ENSResolve",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `EnsResolveAPIResponse` object containing the resolution result.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EnsResolveAPIResponse"
								}
							}
						}
					}
				},
				"description": "Resolves an ENS (Ethereum Name Service) name to its corresponding address.",
				"tags": [
					"ENS"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token for accessing the ENS service.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data required for ENS resolution.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EnsResolveInput",
								"description": "- The input data required for ENS resolution."
							}
						}
					}
				}
			}
		},
		"/ens/reverse": {
			"post": {
				"operationId": "ENSReverseResolve",
				"responses": {
					"200": {
						"description": "- A promise that resolves to an `ENSReverseResolveAPIResponse` object containing the reverse resolution result.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ENSReverseResolveAPIResponse"
								}
							}
						}
					}
				},
				"description": "Resolves an ENS (Ethereum Name Service) address to its corresponding name.",
				"tags": [
					"ENS"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token for accessing the ENS service.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data required for ENS reverse resolution.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ENSReverseResolveInput",
								"description": "- The input data required for ENS reverse resolution."
							}
						}
					}
				}
			}
		},
		"/eos": {
			"get": {
				"operationId": "ListEosAccounts",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the list of accounts, \na success flag, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Lists EOS accounts associated with the provided authorization token.",
				"tags": [
					"eos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateEosAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the result of the account creation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Creates a new EOS account.",
				"tags": [
					"eos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data required to create the EOS account.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EosInput",
								"description": "- The input data required to create the EOS account."
							}
						}
					}
				}
			}
		},
		"/eos/{accountName}": {
			"get": {
				"operationId": "GetEosAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account data, success status, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves account information from the EOS blockchain.",
				"tags": [
					"eos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the EOS account to retrieve information for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/eos/{accountName}/sign-tx": {
			"post": {
				"operationId": "SignEosTransaction",
				"responses": {
					"200": {
						"description": "A promise that resolves to an EosAPIResponse object containing the transaction data, success status, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EosAPIResponse"
								}
							}
						}
					}
				},
				"description": "Signs an EOS transaction.",
				"tags": [
					"eos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The EOS account name from the request path.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The transaction input data from the request body.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EosTransactionInput",
								"description": "- The transaction input data from the request body."
							}
						}
					}
				}
			}
		},
		"/eos/{accountName}/export": {
			"post": {
				"operationId": "ExportEosAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Exports the account information for a given EOS account name.",
				"tags": [
					"eos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the EOS account to export.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/eos/{accountName}/delete": {
			"post": {
				"operationId": "DeleteEosAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the result of the deletion operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Deletes an EOS account.",
				"tags": [
					"eos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the EOS account to be deleted.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc1155/{name}/balance-of": {
			"post": {
				"operationId": "Erc1155_erc1155BalanceOf",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TransactionAPIResponse containing the balance information",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the balance of an ERC1155 token for a specific account.",
				"tags": [
					"ERC1155"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name identifier for the request",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing ERC1155 parameters",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Erc1155Request",
								"description": "- The request body containing ERC1155 parameters"
							}
						}
					}
				}
			}
		},
		"/erc1155/{name}/balance-of-batch": {
			"post": {
				"operationId": "Erc1155_erc1155BalanceOfBatch",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TransactionAPIResponse containing the balances",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves balances for multiple token IDs and accounts in a batch operation.",
				"tags": [
					"ERC1155"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name identifier for the request",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing arrays of accounts and token IDs",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Erc1155Request",
								"description": "- The request body containing arrays of accounts and token IDs"
							}
						}
					}
				}
			}
		},
		"/erc1155/{name}/set-approval-for-all": {
			"post": {
				"operationId": "Erc1155_erc1155SetApprovalForAll",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TransactionAPIResponse containing the approval transaction",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionAPIResponse"
								}
							}
						}
					}
				},
				"description": "Enables or disables approval for a third party (\"operator\") to manage all tokens.",
				"tags": [
					"ERC1155"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name identifier for the request",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing operator address and approval status",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Erc1155Request",
								"description": "- The request body containing operator address and approval status"
							}
						}
					}
				}
			}
		},
		"/erc1155/{name}/is-approved-for-all": {
			"post": {
				"operationId": "Erc1155_erc1155IsApprovedForAll",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TransactionAPIResponse containing the approval status",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionAPIResponse"
								}
							}
						}
					}
				},
				"description": "Queries if an address is approved to manage all tokens of another address.",
				"tags": [
					"ERC1155"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name identifier for the request",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing owner and operator addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Erc1155Request",
								"description": "- The request body containing owner and operator addresses"
							}
						}
					}
				}
			}
		},
		"/erc1155/{name}/safe-transfer-from": {
			"post": {
				"operationId": "Erc1155_erc1155SafeTransferFrom",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TransactionAPIResponse containing the transfer transaction",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionAPIResponse"
								}
							}
						}
					}
				},
				"description": "Safely transfers a single token between addresses.",
				"tags": [
					"ERC1155"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name identifier for the request",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing transfer details",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Erc1155Request",
								"description": "- The request body containing transfer details"
							}
						}
					}
				}
			}
		},
		"/erc1155/{name}/safe-batch-transfer-from": {
			"post": {
				"operationId": "Erc1155_erc1155SafeBatchTransferFrom",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TransactionAPIResponse containing the batch transfer transaction",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionAPIResponse"
								}
							}
						}
					}
				},
				"description": "Safely transfers multiple tokens between addresses in a batch operation.",
				"tags": [
					"ERC1155"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name identifier for the request",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing batch transfer details",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Erc1155Request",
								"description": "- The request body containing batch transfer details"
							}
						}
					}
				}
			}
		},
		"/erc20/{account}/decimals": {
			"get": {
				"operationId": "Erc20_GetERC20TokenDecimals",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC20APIResponse object containing the number of decimals for the ERC20 token.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC20APIResponse_number_"
								}
							}
						}
					}
				},
				"description": "Retrieves the number of decimals for the provided ERC20 token.",
				"tags": [
					"ERC20"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account address for the ERC20 token.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for accessing the ERC20 token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID for the ERC20 token.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The contract address for the ERC20 token.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc20/{account}/symbol": {
			"get": {
				"operationId": "Erc20_GetERC20TokenSymbol",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC20APIResponse containing the token symbol.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC20APIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the symbol of an ERC20 token.",
				"tags": [
					"ERC20"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account address.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the ERC20 token contract.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc20/{account}/name": {
			"get": {
				"operationId": "Erc20_GetERC20TokenName",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC20APIResponse containing the token name.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC20APIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the name of an ERC20 token.",
				"tags": [
					"ERC20"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account address.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain chain ID.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC20 token contract address.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc20/{account}/totalSupply": {
			"get": {
				"operationId": "Erc20_GetERC20TokenTotalSupply",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `ERC20APIResponse` containing the total supply of the token as a string.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC20APIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the total supply of an ERC20 token.",
				"tags": [
					"ERC20"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account address.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain chain ID.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC20 token contract address.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc20/{account}/balanceOf": {
			"get": {
				"operationId": "Erc20_GetERC20TokenBalance",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `ERC20APIResponse` containing the balance as a string.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC20APIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the balance of a specified ERC20 token for a given account.",
				"tags": [
					"ERC20"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the account to retrieve the balance for.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for accessing the ERC20 instance.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the ERC20 token contract.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc20/{account}/allowance": {
			"get": {
				"operationId": "Erc20_GetERC20TokenAllowance",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC20APIResponse containing the allowance as a string.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC20APIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the allowance of a specified ERC20 token for a given owner and spender.",
				"tags": [
					"ERC20"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account address making the request.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The contract address of the ERC20 token.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the token owner.",
						"in": "query",
						"name": "owner",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the spender.",
						"in": "query",
						"name": "spender",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc20/{address}/approve": {
			"post": {
				"operationId": "Erc20_ApproveERC20TokenSpending",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC20APIResponse containing the result of the approve function.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC20APIResponse_ERC20ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Approves a specified address to spend tokens on behalf of the user.",
				"tags": [
					"ERC20"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address to be approved.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body of the request containing contract address and chain ID.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ERC20InputBody",
								"description": "- The body of the request containing contract address and chain ID."
							}
						}
					}
				}
			}
		},
		"/erc20/{address}/transfer": {
			"post": {
				"operationId": "Erc20_TransferERC20Token",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC20APIResponse containing the result of the transfer.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC20APIResponse_ERC20ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Transfers ERC20 tokens to a specified address.",
				"tags": [
					"ERC20"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address to transfer tokens to.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body of the request containing transfer details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ERC20InputBody",
								"description": "- The body of the request containing transfer details."
							}
						}
					}
				}
			}
		},
		"/erc20/{address}/transferFrom": {
			"post": {
				"operationId": "Erc20_TransferFromERC20Token",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC20APIResponse containing the result of the transfer function.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC20APIResponse_ERC20ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Transfers tokens from one address to another.",
				"tags": [
					"ERC20"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address from which the tokens will be transferred.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body containing the contract address and chain ID.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ERC20InputBody",
								"description": "- The body containing the contract address and chain ID."
							}
						}
					}
				}
			}
		},
		"/erc4626/{account}/asset": {
			"get": {
				"operationId": "Erc4626_getERC4626Asset",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the underlying asset address of the ERC4626 vault.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{account}/totalAssets": {
			"get": {
				"operationId": "Erc4626_getERC4626TotalAssets",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Gets the total amount of underlying assets held by the vault.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{account}/convertToShares": {
			"get": {
				"operationId": "Erc4626_getERC4626ConvertToShares",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Calculates the amount of shares that would be minted for a given amount of assets.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The amount of assets to deposit",
						"in": "query",
						"name": "assets",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{account}/convertToAssets": {
			"get": {
				"operationId": "Erc4626_getERC4626ConvertToAssets",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Calculates the amount of assets that would be withdrawn for a given amount of shares.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The amount of shares to redeem",
						"in": "query",
						"name": "shares",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{account}/maxDeposit": {
			"get": {
				"operationId": "Erc4626_getERC4626MaxDeposit",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Returns the maximum amount of assets that can be deposited in a single transaction.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the receiver",
						"in": "query",
						"name": "receiver",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{address}/deposit": {
			"post": {
				"operationId": "Erc4626_depositToERC4626",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Deposits assets into the vault and mints shares to the receiver.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the receiver",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing the contract address, chain ID, and amount",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The input body containing the contract address, chain ID, and amount"
							}
						}
					}
				}
			}
		},
		"/erc4626/{address}/withdraw": {
			"post": {
				"operationId": "Erc4626_withdrawFromERC4626",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Withdraws assets from the vault to the receiver.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the receiver",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing the contract address, chain ID, and amount",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The input body containing the contract address, chain ID, and amount"
							}
						}
					}
				}
			}
		},
		"/erc4626/{account}/maxMint": {
			"get": {
				"operationId": "Erc4626_getERC4626MaxMint",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Returns the maximum amount of shares that can be minted in a single transaction.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the receiver",
						"in": "query",
						"name": "receiver",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{account}/maxWithdraw": {
			"get": {
				"operationId": "Erc4626_getERC4626MaxWithdraw",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Returns the maximum amount of assets that can be withdrawn in a single transaction.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the owner",
						"in": "query",
						"name": "owner",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{account}/maxRedeem": {
			"get": {
				"operationId": "Erc4626_getERC4626MaxRedeem",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Returns the maximum amount of shares that can be redeemed in a single transaction.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the owner",
						"in": "query",
						"name": "owner",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{account}/previewDeposit": {
			"get": {
				"operationId": "Erc4626_getERC4626PreviewDeposit",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Simulates the amount of shares that would be received for a deposit of assets.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The amount of assets to deposit",
						"in": "query",
						"name": "assets",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{account}/previewMint": {
			"get": {
				"operationId": "Erc4626_getERC4626PreviewMint",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Simulates the amount of assets needed for minting a specific amount of shares.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The amount of shares to mint",
						"in": "query",
						"name": "shares",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{account}/previewWithdraw": {
			"get": {
				"operationId": "Erc4626_getERC4626PreviewWithdraw",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Simulates the amount of shares needed to withdraw a specific amount of assets.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The amount of assets to withdraw",
						"in": "query",
						"name": "assets",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{account}/previewRedeem": {
			"get": {
				"operationId": "Erc4626_getERC4626PreviewRedeem",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Simulates the amount of assets that would be received for redeeming shares.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The amount of shares to redeem",
						"in": "query",
						"name": "shares",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{address}/mint": {
			"post": {
				"operationId": "Erc4626_mintERC4626Shares",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Mints shares to the receiver by depositing exact amount of assets.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the receiver",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing the contract address, chain ID, and amount",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The input body containing the contract address, chain ID, and amount"
							}
						}
					}
				}
			}
		},
		"/erc4626/{address}/redeem": {
			"post": {
				"operationId": "Erc4626_redeemERC4626Shares",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Redeems shares from owner and sends exact amount of assets to receiver.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the receiver",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing the contract address, chain ID, and amount",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The input body containing the contract address, chain ID, and amount"
							}
						}
					}
				}
			}
		},
		"/erc4626/{account}/totalSupply": {
			"get": {
				"operationId": "Erc4626_getERC4626TotalSupply",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Gets the total supply of shares.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{account}/balanceOf": {
			"get": {
				"operationId": "Erc4626_getERC4626BalanceOf",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Gets the balance of shares for an account.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{account}/allowance": {
			"get": {
				"operationId": "Erc4626_getERC4626Allowance",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Gets the amount of shares that an owner has allowed a spender to use.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account making the request",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The blockchain network ID",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ERC4626 vault contract address",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the owner",
						"in": "query",
						"name": "owner",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the spender",
						"in": "query",
						"name": "spender",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc4626/{address}/approve": {
			"post": {
				"operationId": "Erc4626_approveERC4626",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Approves a spender to transfer a specific amount of shares.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the spender",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing the contract address, chain ID, and amount",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The input body containing the contract address, chain ID, and amount"
							}
						}
					}
				}
			}
		},
		"/erc4626/{address}/transfer": {
			"post": {
				"operationId": "Erc4626_transferERC4626",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Transfers shares to a specified address.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the receiver",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing the contract address, chain ID, and amount",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The input body containing the contract address, chain ID, and amount"
							}
						}
					}
				}
			}
		},
		"/erc4626/{address}/transferFrom": {
			"post": {
				"operationId": "Erc4626_transferFromERC4626",
				"responses": {
					"200": {
						"description": "The API response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC4626APIResponse"
								}
							}
						}
					}
				},
				"description": "Transfers shares from one address to another.",
				"tags": [
					"ERC4626"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the receiver",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing the contract address, chain ID, and amount",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The input body containing the contract address, chain ID, and amount"
							}
						}
					}
				}
			}
		},
		"/erc721/{account}/balanceOf": {
			"get": {
				"operationId": "Erc721_getERC721BalanceOf",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC721APIResponse containing the balance of the account.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC721APIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the balance of ERC721 tokens for a given account.",
				"tags": [
					"ERC721"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The account address to query the balance for.",
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for accessing the ERC721 instance.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The contract address of the ERC721 token.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc721/{tokenId}/ownerOf": {
			"get": {
				"operationId": "Erc721_getERC721OwnerOf",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `ERC721APIResponse` containing the owner address if successful, or an error message if not.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC721APIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the owner of a specified ERC721 token.",
				"tags": [
					"ERC721"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ID of the token to query.",
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the ERC721 contract.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc721/name": {
			"get": {
				"operationId": "Erc721_getERC721Name",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC721APIResponse containing the token name.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC721APIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the name of an ERC721 token.",
				"tags": [
					"ERC721"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the ERC721 contract.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc721/symbol": {
			"get": {
				"operationId": "Erc721_getERC721Symbol",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `ERC721APIResponse` containing the symbol of the ERC721 token.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC721APIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the symbol of an ERC721 token.",
				"tags": [
					"ERC721"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the ERC721 contract.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc721/{tokenId}/tokenURI": {
			"get": {
				"operationId": "Erc721_getERC721TokenURI",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `ERC721APIResponse` containing the token URI.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC721APIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the token URI for a given ERC721 token.",
				"tags": [
					"ERC721"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ID of the token to retrieve the URI for.",
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the ERC721 contract.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc721/{tokenId}/getApproved": {
			"get": {
				"operationId": "Erc721_getERC721Approved",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `ERC721APIResponse` object containing the approval status.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC721APIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the approved address for a specific ERC721 token.",
				"tags": [
					"ERC721"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ID of the token to check approval for.",
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the ERC721 contract.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc721/{owner}/{operator}/isApprovedForAll": {
			"get": {
				"operationId": "Erc721_getERC721IsApprovedForAll",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC721APIResponse indicating whether the operator is approved for all assets of the owner.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC721APIResponse"
								}
							}
						}
					}
				},
				"description": "Checks if an operator is approved to manage all assets of a given owner.",
				"tags": [
					"ERC721"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the owner of the assets.",
						"in": "path",
						"name": "owner",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the operator to check for approval.",
						"in": "path",
						"name": "operator",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the ERC721 contract.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/erc721/{address}/approve": {
			"post": {
				"operationId": "Erc721_approveERC721",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC721APIResponse indicating the success or failure of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC721APIResponse"
								}
							}
						}
					}
				},
				"description": "Approves an ERC721 token for a given address.",
				"tags": [
					"ERC721"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address to approve the token for.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing contract address and chain ID.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The request body containing contract address and chain ID."
							}
						}
					}
				}
			}
		},
		"/erc721/{address}/setApprovalForAll": {
			"post": {
				"operationId": "Erc721_setApprovalForAllERC721",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC721APIResponse indicating success or failure.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC721APIResponse"
								}
							}
						}
					}
				},
				"description": "Sets approval for all ERC721 tokens for a given address.",
				"tags": [
					"ERC721"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address to set approval for.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing contract address and chain ID.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The request body containing contract address and chain ID."
							}
						}
					}
				}
			}
		},
		"/erc721/{address}/transferFrom": {
			"post": {
				"operationId": "Erc721_transferFromERC721",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC721APIResponse indicating the success or failure of the transfer.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC721APIResponse"
								}
							}
						}
					}
				},
				"description": "Transfers an ERC721 token from one address to another.",
				"tags": [
					"ERC721"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address from which the token is being transferred.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing the contract address and chain ID.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The input body containing the contract address and chain ID."
							}
						}
					}
				}
			}
		},
		"/erc721/{address}/safeTransferFrom": {
			"post": {
				"operationId": "Erc721_safeTransferFromERC721",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC721APIResponse indicating the success or failure of the transfer.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC721APIResponse"
								}
							}
						}
					}
				},
				"description": "Safely transfers an ERC721 token from one address to another.",
				"tags": [
					"ERC721"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address from which the token is being transferred.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing the contract address and chain ID.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The request body containing the contract address and chain ID."
							}
						}
					}
				}
			}
		},
		"/erc721/{address}/safeTransferFromWithData": {
			"post": {
				"operationId": "Erc721_safeTransferFromWithDataERC721",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ERC721APIResponse indicating the success or failure of the transfer.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ERC721APIResponse"
								}
							}
						}
					}
				},
				"description": "Safely transfers an ERC721 token from one address to another with additional data.",
				"tags": [
					"ERC721"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address to transfer the token to.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing the contract address and chain ID.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InputBody",
								"description": "- The input body containing the contract address and chain ID."
							}
						}
					}
				}
			}
		},
		"/financial-datasets/company-facts/{ticker}": {
			"get": {
				"operationId": "FinancialDatasets_GetCompanyFacts",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `CompanyFactsAPIResponse` object containing the company facts.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CompanyFactsAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the company facts for a given ticker symbol.",
				"tags": [
					"Financial Datasets"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ticker symbol of the company.",
						"in": "path",
						"name": "ticker",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/financial-datasets/income-statements/{ticker}": {
			"get": {
				"operationId": "FinancialDatasets_GetIncomeStatements",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `IncomeStatementsAPIResponse` object containing the income statements.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IncomeStatementsAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the income statements for a given ticker symbol.",
				"tags": [
					"Financial Datasets"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ticker symbol of the company.",
						"in": "path",
						"name": "ticker",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The period type of the income statements.",
						"in": "query",
						"name": "period",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"annual",
								"quarterly",
								"ttm"
							]
						}
					},
					{
						"description": "- The maximum number of income statements to return.",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The CIK number of the company.",
						"in": "query",
						"name": "cik",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/financial-datasets/balance-sheets/{ticker}": {
			"get": {
				"operationId": "FinancialDatasets_GetBalanceSheets",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `BalanceSheetsAPIResponse` object containing the balance sheets.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BalanceSheetsAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the balance sheets for a given ticker symbol.",
				"tags": [
					"Financial Datasets"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ticker symbol of the company.",
						"in": "path",
						"name": "ticker",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The period type of the balance sheets.",
						"in": "query",
						"name": "period",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"annual",
								"quarterly",
								"ttm"
							]
						}
					},
					{
						"description": "- The maximum number of balance sheets to return.",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The CIK number of the company.",
						"in": "query",
						"name": "cik",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/financial-datasets/cash-flow-statements/{ticker}": {
			"get": {
				"operationId": "FinancialDatasets_GetCashFlowStatements",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `CashFlowStatementsAPIResponse` object containing the cash flow statements.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CashFlowStatementsAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the cash flow statements for a given ticker symbol.",
				"tags": [
					"Financial Datasets"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ticker symbol of the company.",
						"in": "path",
						"name": "ticker",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The period type of the cash flow statements.",
						"in": "query",
						"name": "period",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"annual",
								"quarterly",
								"ttm"
							]
						}
					},
					{
						"description": "- The maximum number of cash flow statements to return.",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The CIK number of the company.",
						"in": "query",
						"name": "cik",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/financial-datasets/segmented-revenues/{ticker}": {
			"get": {
				"operationId": "FinancialDatasets_GetSegmentedRevenues",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `SegmentedRevenuesAPIResponse` object containing the segmented revenues.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SegmentedRevenuesAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the segmented revenues for a given ticker symbol.",
				"tags": [
					"Financial Datasets"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ticker symbol of the company.",
						"in": "path",
						"name": "ticker",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The period type of the segmented revenues.",
						"in": "query",
						"name": "period",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"annual",
								"quarterly"
							]
						}
					},
					{
						"description": "- The maximum number of segmented revenues to return.",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The CIK number of the company.",
						"in": "query",
						"name": "cik",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/financial-datasets/all-financials/{ticker}": {
			"get": {
				"operationId": "FinancialDatasets_GetAllFinancials",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `AllFinancialsAPIResponse` object containing all financials.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AllFinancialsAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves all financials for a given ticker symbol.",
				"tags": [
					"Financial Datasets"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ticker symbol of the company.",
						"in": "path",
						"name": "ticker",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The period type of the financials.",
						"in": "query",
						"name": "period",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"annual",
								"quarterly",
								"ttm"
							]
						}
					},
					{
						"description": "- The maximum number of financials to return.",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The CIK number of the company.",
						"in": "query",
						"name": "cik",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/financial-datasets/available-tickers": {
			"get": {
				"operationId": "FinancialDatasets_GetAvailableTickers",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `AvailableTickersAPIResponse` object containing the available tickers.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AvailableTickersAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the available tickers.",
				"tags": [
					"Financial Datasets"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/financial-datasets/insider-transactions/{ticker}": {
			"get": {
				"operationId": "FinancialDatasets_GetInsiderTransactions",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `InsiderTransactionsAPIResponse` object containing the insider transactions.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InsiderTransactionsAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the insider transactions for a given ticker symbol.",
				"tags": [
					"Financial Datasets"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ticker symbol of the company.",
						"in": "path",
						"name": "ticker",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The maximum number of insider transactions to return.",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/financial-datasets/options-chain/{ticker}": {
			"get": {
				"operationId": "FinancialDatasets_GetOptionsChain",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `OptionsChainAPIResponse` object containing the options chain.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OptionsChainAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the options chain for a given ticker symbol.",
				"tags": [
					"Financial Datasets"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ticker symbol of the company.",
						"in": "path",
						"name": "ticker",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The strike price of the options.",
						"in": "query",
						"name": "strike_price",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The type of option (call or put).",
						"in": "query",
						"name": "option_type",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"call",
								"put"
							]
						}
					},
					{
						"description": "- The expiration date of the options.",
						"in": "query",
						"name": "expiration_date",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/financial-datasets/prices/{ticker}": {
			"get": {
				"operationId": "FinancialDatasets_GetPrices",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `PricesAPIResponse` object containing the price data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PricesAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the price data for a given ticker symbol.",
				"tags": [
					"Financial Datasets"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ticker symbol of the company.",
						"in": "path",
						"name": "ticker",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The interval of the price data.",
						"in": "query",
						"name": "interval",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/PriceInterval"
						}
					},
					{
						"description": "- The interval multiplier of the price data.",
						"in": "query",
						"name": "interval_multiplier",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The start date of the price data.",
						"in": "query",
						"name": "start_date",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The end date of the price data.",
						"in": "query",
						"name": "end_date",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The maximum number of price data to return.",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/financial-datasets/search-financials": {
			"post": {
				"operationId": "FinancialDatasets_SearchFinancials",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `SearchFinancialsAPIResponse` object containing the search results.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SearchFinancialsAPIResponse"
								}
							}
						}
					}
				},
				"description": "Searches financials for a given search request.",
				"tags": [
					"Financial Datasets"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The search request.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SearchRequest",
								"description": "- The search request."
							}
						}
					}
				}
			}
		},
		"/financial-datasets/price-snapshot/{ticker}": {
			"get": {
				"operationId": "FinancialDatasets_GetPriceSnapshot",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `PriceSnapshotAPIResponse` object containing the price snapshot.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PriceSnapshotAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the price snapshot for a given ticker symbol.",
				"tags": [
					"Financial Datasets"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The ticker symbol of the company.",
						"in": "path",
						"name": "ticker",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/financial-datasets/search-line-items": {
			"post": {
				"operationId": "FinancialDatasets_SearchFinancialsByLineItems",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `LineItemsSearchAPIResponse` object containing the search results.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LineItemsSearchAPIResponse"
								}
							}
						}
					}
				},
				"description": "Searches financials by line items.",
				"tags": [
					"Financial Datasets"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The search request.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"limit": {
										"type": "number",
										"format": "double"
									},
									"period": {
										"type": "string",
										"enum": [
											"annual",
											"quarterly",
											"ttm"
										]
									},
									"tickers": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"line_items": {
										"items": {
											"type": "string"
										},
										"type": "array"
									}
								},
								"required": [
									"tickers",
									"line_items"
								],
								"type": "object",
								"description": "- The search request."
							}
						}
					}
				}
			}
		},
		"/jupiter/programIdToLabel": {
			"get": {
				"operationId": "JUPITER_getProgramIdToLabel",
				"responses": {
					"200": {
						"description": "A promise that resolves to a JupiterAPIResponse containing the program ID to label mapping.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JupiterAPIResponse_Record_string.string__"
								}
							}
						}
					}
				},
				"description": "Retrieves the program ID to label mapping.",
				"tags": [
					"Jupiter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/jupiter/indexedRouteMap": {
			"get": {
				"operationId": "JUPITER_getIndexedRouteMap",
				"responses": {
					"200": {
						"description": "A promise that resolves to a JupiterAPIResponse containing the indexed route map.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JupiterAPIResponse_any_"
								}
							}
						}
					}
				},
				"description": "Retrieves the indexed route map.",
				"tags": [
					"Jupiter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- A boolean value indicating whether to only include direct routes in the map.",
						"in": "query",
						"name": "onlyDirectRoutes",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					}
				]
			}
		},
		"/jupiter/tokens": {
			"get": {
				"operationId": "JUPITER_getTokens",
				"responses": {
					"200": {
						"description": "A promise that resolves to a JupiterAPIResponse containing the tokens available on the Jupiter platform.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JupiterAPIResponse_string-Array_"
								}
							}
						}
					}
				},
				"description": "Retrieves the tokens available on the Jupiter platform.",
				"tags": [
					"Jupiter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/jupiter/{accountName}/quote": {
			"post": {
				"operationId": "JUPITER_getQuote",
				"responses": {
					"200": {
						"description": "A promise that resolves to a JupiterAPIResponse containing the tokens available on the Jupiter platform.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JupiterAPIResponse_JupiterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Retrieves the tokens available on the Jupiter platform.",
				"tags": [
					"Jupiter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to perform the swap for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body for the Jupiter swap operation, excluding the account name.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_JupiterInputBody.accountName_",
								"description": "- The input body for the Jupiter swap operation, excluding the account name."
							}
						}
					}
				}
			}
		},
		"/jupiter/{accountName}/swap": {
			"post": {
				"operationId": "JUPITER_swap",
				"responses": {
					"200": {
						"description": "A promise that resolves to a JupiterAPIResponse containing the result of the swap operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JupiterAPIResponse_JupiterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Handles the swap operation for a given account.",
				"tags": [
					"Jupiter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to perform the swap for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body for the Jupiter swap operation, excluding the account name.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_JupiterInputBody.accountName_",
								"description": "- The input body for the Jupiter swap operation, excluding the account name."
							}
						}
					}
				}
			}
		},
		"/jupiter/{accountName}/swapInstructions": {
			"post": {
				"operationId": "JUPITER_getSwapInstructions",
				"responses": {
					"200": {
						"description": "A promise that resolves to a JupiterAPIResponse containing the result of the swap instructions execution.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JupiterAPIResponse_JupiterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Retrieves swap instructions for a given account.",
				"tags": [
					"Jupiter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account for which to retrieve swap instructions.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body of the request, omitting the account name.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_JupiterInputBody.accountName_",
								"description": "- The body of the request, omitting the account name."
							}
						}
					}
				}
			}
		},
		"/jupiter/{accountName}/createLimitOrder": {
			"post": {
				"operationId": "JUPITER_createLimitOrder",
				"responses": {
					"200": {
						"description": "A promise that resolves to a JupiterAPIResponse containing the result of the limit order creation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JupiterAPIResponse_JupiterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Creates a limit order for a given account.",
				"tags": [
					"Jupiter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to create the limit order for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body for creating a limit order.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateLimitOrderBody",
								"description": "- The input body for creating a limit order."
							}
						}
					}
				}
			}
		},
		"/jupiter/{accountName}/cancelLimitOrders": {
			"post": {
				"operationId": "JUPITER_cancelLimitOrders",
				"responses": {
					"200": {
						"description": "A promise that resolves to a JupiterAPIResponse containing the result of the cancellation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JupiterAPIResponse_JupiterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Cancels limit orders for a given account.",
				"tags": [
					"Jupiter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to cancel limit orders for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"orders": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"computeUnitPrice": {
										"type": "string"
									},
									"maker": {
										"type": "string"
									}
								},
								"required": [
									"maker"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/jupiter/openOrders": {
			"get": {
				"operationId": "JUPITER_getOpenOrders",
				"responses": {
					"200": {
						"description": "A promise that resolves to a JupiterAPIResponse containing the open orders.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JupiterAPIResponse_JupiterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Retrieves open orders for a given wallet address.",
				"tags": [
					"Jupiter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The wallet address to get open orders for.",
						"in": "query",
						"name": "wallet",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Optional input mint address to filter orders.",
						"in": "query",
						"name": "inputMint",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Optional output mint address to filter orders.",
						"in": "query",
						"name": "outputMint",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/jupiter/orderHistory": {
			"get": {
				"operationId": "JUPITER_getOrderHistory",
				"responses": {
					"200": {
						"description": "A promise that resolves to a JupiterAPIResponse containing the order history.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JupiterAPIResponse_JupiterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Retrieves order history for a given wallet address.",
				"tags": [
					"Jupiter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The wallet address to get order history for.",
						"in": "query",
						"name": "wallet",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The page number for pagination.",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 1,
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/lending-pool/flash-loan-premium": {
			"get": {
				"operationId": "LendingPool_getFlashLoanPremiumTotal",
				"responses": {
					"200": {
						"description": "A promise that resolves to a LendingPoolAPIResponse containing the total flash loan premium.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_number_"
								}
							}
						}
					}
				},
				"description": "Retrieves the total flash loan premium for a given lending pool.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the lending pool.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lending-pool/revision": {
			"get": {
				"operationId": "LendingPool_getLendingPoolRevision",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `LendingPoolAPIResponse` containing the revision number of the lending pool.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_number_"
								}
							}
						}
					}
				},
				"description": "Retrieves the revision number of a lending pool.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the lending pool.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID where the lending pool is located.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lending-pool/max-reserves": {
			"get": {
				"operationId": "LendingPool_getMaxNumberReserves",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `LendingPoolAPIResponse` containing the maximum number of reserves.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_number_"
								}
							}
						}
					}
				},
				"description": "Retrieves the maximum number of reserves from the lending pool.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the lending pool.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID where the lending pool is located.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lending-pool/max-stable-rate-borrow-size-percent": {
			"get": {
				"operationId": "LendingPool_getMaxStableRateBorrowSizePercent",
				"responses": {
					"200": {
						"description": "A promise that resolves to a LendingPoolAPIResponse containing the maximum stable rate borrow size percentage.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_number_"
								}
							}
						}
					}
				},
				"description": "Retrieves the maximum stable rate borrow size percentage from the lending pool.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the lending pool.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lending-pool/{accountName}/borrow": {
			"post": {
				"operationId": "LendingPool_borrow",
				"responses": {
					"200": {
						"description": "A promise that resolves to a LendingPoolAPIResponse containing the result of the borrow operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_LendingPoolExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Handles the borrowing process from the lending pool.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account requesting the borrow.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body of the request containing lending pool input details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LendingPoolInputBody",
								"description": "- The body of the request containing lending pool input details."
							}
						}
					}
				}
			}
		},
		"/lending-pool/{accountName}/deposit": {
			"post": {
				"operationId": "LendingPool_deposit",
				"responses": {
					"200": {
						"description": "A promise that resolves to a LendingPoolAPIResponse containing the result of the deposit operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_LendingPoolExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Handles the deposit operation for a lending pool.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account making the deposit.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body of the request containing deposit details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LendingPoolInputBody",
								"description": "- The body of the request containing deposit details."
							}
						}
					}
				}
			}
		},
		"/lending-pool/{accountName}/flash-loan": {
			"post": {
				"operationId": "LendingPool_flashLoan",
				"responses": {
					"200": {
						"description": "A promise that resolves to a LendingPoolAPIResponse containing the result of the flash loan execution.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_LendingPoolExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Executes a flash loan operation on the lending pool.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account requesting the flash loan.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing details for the flash loan.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LendingPoolInputBody",
								"description": "- The input body containing details for the flash loan."
							}
						}
					}
				}
			}
		},
		"/lending-pool/{accountName}/repay": {
			"post": {
				"operationId": "LendingPool_repay",
				"responses": {
					"200": {
						"description": "A promise that resolves to a LendingPoolAPIResponse containing the result of the repayment operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_LendingPoolExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Repays a loan in the lending pool.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to repay the loan for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body containing the lending pool input details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LendingPoolInputBody",
								"description": "- The body containing the lending pool input details."
							}
						}
					}
				}
			}
		},
		"/lending-pool/{accountName}/swap-borrow-rate-mode": {
			"post": {
				"operationId": "LendingPool_swapBorrowRateMode",
				"responses": {
					"200": {
						"description": "A promise that resolves to a LendingPoolAPIResponse containing the result of the swap operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_LendingPoolExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Swaps the borrow rate mode for a given account in the lending pool.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account for which the borrow rate mode is to be swapped.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing the contract address and chain ID.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LendingPoolInputBody",
								"description": "- The input body containing the contract address and chain ID."
							}
						}
					}
				}
			}
		},
		"/lending-pool/{accountName}/set-user-use-reserve-as-collateral": {
			"post": {
				"operationId": "LendingPool_setUserUseReserveAsCollateral",
				"responses": {
					"200": {
						"description": "A promise that resolves to a LendingPoolAPIResponse containing the result of the operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_LendingPoolExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Sets the user's reserve as collateral.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the user's account.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body containing lending pool input data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LendingPoolInputBody",
								"description": "- The body containing lending pool input data."
							}
						}
					}
				}
			}
		},
		"/lending-pool/{accountName}/liquidation-call": {
			"post": {
				"operationId": "LendingPool_liquidationCall",
				"responses": {
					"200": {
						"description": "A promise that resolves to a LendingPoolAPIResponse containing the result of the liquidation call.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_LendingPoolExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Handles the liquidation call for a lending pool.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to be liquidated.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The body of the request containing necessary parameters.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LendingPoolInputBody",
								"description": "- The body of the request containing necessary parameters."
							}
						}
					}
				}
			}
		},
		"/lending-pool/reserve-data": {
			"get": {
				"operationId": "LendingPool_getReserveData",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `LendingPoolAPIResponse` containing the reserve data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_any_"
								}
							}
						}
					}
				},
				"description": "Retrieves reserve data for a specific asset from the lending pool.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the lending pool.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The asset for which to retrieve reserve data.",
						"in": "query",
						"name": "asset",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lending-pool/user-account-data": {
			"get": {
				"operationId": "LendingPool_getUserAccountData",
				"responses": {
					"200": {
						"description": "A promise that resolves to a LendingPoolAPIResponse containing the user account data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_any_"
								}
							}
						}
					}
				},
				"description": "Retrieves user account data from the lending pool.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the lending pool.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The user address for which to retrieve account data.",
						"in": "query",
						"name": "user",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lending-pool/reserves-list": {
			"get": {
				"operationId": "LendingPool_getReservesList",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `LendingPoolAPIResponse` containing an array of reserve addresses.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_string-Array_"
								}
							}
						}
					}
				},
				"description": "Retrieves the list of reserves from the lending pool.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the lending pool.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lending-pool/addresses-provider": {
			"get": {
				"operationId": "LendingPool_getAddressesProvider",
				"responses": {
					"200": {
						"description": "A promise that resolves to a LendingPoolAPIResponse containing the addresses provider.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_string_"
								}
							}
						}
					}
				},
				"description": "Retrieves the addresses provider from the lending pool instance.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address query parameter.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID query parameter.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lending-pool/paused": {
			"get": {
				"operationId": "LendingPool_isPaused",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `LendingPoolAPIResponse` containing a boolean indicating whether the lending pool is paused.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LendingPoolAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"description": "Checks if the lending pool is paused.",
				"tags": [
					"LendingPool"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the lending pool from the query parameters.",
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain ID of the lending pool from the query parameters.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/leverager/addresses-provider": {
			"get": {
				"operationId": "Leverager_getAddressesProvider",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/leverager/default-admin-role": {
			"get": {
				"operationId": "Leverager_getDefaultAdminRole",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/leverager/lending-pool": {
			"get": {
				"operationId": "Leverager_getLendingPool",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/leverager/min-hf": {
			"get": {
				"operationId": "Leverager_getMinHF",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/leverager/paused": {
			"get": {
				"operationId": "Leverager_isPaused",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/leverager/weth": {
			"get": {
				"operationId": "Leverager_getWETH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/leverager/role-admin": {
			"get": {
				"operationId": "Leverager_getRoleAdmin",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "role",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/leverager/has-role": {
			"get": {
				"operationId": "Leverager_hasRole",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "role",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/leverager/supports-interface": {
			"get": {
				"operationId": "Leverager_supportsInterface",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "interfaceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/leverager/{accountName}/deleverage-erc20": {
			"post": {
				"operationId": "Leverager_deleverageERC20",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_LeveragerExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LeveragerInputBody"
							}
						}
					}
				}
			}
		},
		"/leverager/{accountName}/deleverage-native": {
			"post": {
				"operationId": "Leverager_deleverageNative",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_LeveragerExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LeveragerInputBody"
							}
						}
					}
				}
			}
		},
		"/leverager/{accountName}/execute-operation": {
			"post": {
				"operationId": "Leverager_executeOperation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_LeveragerExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LeveragerInputBody"
							}
						}
					}
				}
			}
		},
		"/leverager/{accountName}/grant-role": {
			"post": {
				"operationId": "Leverager_grantRole",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_LeveragerExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LeveragerInputBody"
							}
						}
					}
				}
			}
		},
		"/leverager/{accountName}/leverage-erc20": {
			"post": {
				"operationId": "Leverager_leverageERC20",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_LeveragerExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LeveragerInputBody"
							}
						}
					}
				}
			}
		},
		"/leverager/{accountName}/leverage-native": {
			"post": {
				"operationId": "Leverager_leverageNative",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_LeveragerExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LeveragerInputBody"
							}
						}
					}
				}
			}
		},
		"/leverager/{accountName}/pause": {
			"post": {
				"operationId": "Leverager_pause",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_LeveragerExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LeveragerInputBody"
							}
						}
					}
				}
			}
		},
		"/leverager/{accountName}/renounce-role": {
			"post": {
				"operationId": "Leverager_renounceRole",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_LeveragerExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LeveragerInputBody"
							}
						}
					}
				}
			}
		},
		"/leverager/{accountName}/revoke-role": {
			"post": {
				"operationId": "Leverager_revokeRole",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_LeveragerExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LeveragerInputBody"
							}
						}
					}
				}
			}
		},
		"/leverager/{accountName}/unpause": {
			"post": {
				"operationId": "Leverager_unpause",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LeveragerAPIResponse_LeveragerExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"Leverager"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LeveragerInputBody"
							}
						}
					}
				}
			}
		},
		"/lifi/quote": {
			"get": {
				"operationId": "LIFI_getQuote",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ApiResponse containing the quote data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Quote_"
								}
							}
						}
					}
				},
				"description": "Retrieves a quote for a token swap between different chains.",
				"security": [],
				"parameters": [
					{
						"description": "- The source blockchain identifier.",
						"in": "query",
						"name": "fromChain",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The destination blockchain identifier.",
						"in": "query",
						"name": "toChain",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The token address on the source chain.",
						"in": "query",
						"name": "fromToken",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The token address on the destination chain.",
						"in": "query",
						"name": "toToken",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The amount of the source token to swap.",
						"in": "query",
						"name": "fromAmount",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the sender on the source chain.",
						"in": "query",
						"name": "fromAddress",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address of the recipient on the destination chain (optional).",
						"in": "query",
						"name": "toAddress",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The order preference for the quote ('BEST_VALUE', 'BEST_FEE', 'BEST_FEE_GAS') (optional).",
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"BEST_VALUE",
								"BEST_FEE",
								"BEST_FEE_GAS"
							]
						}
					},
					{
						"description": "- The maximum acceptable slippage percentage (optional).",
						"in": "query",
						"name": "slippage",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The integrator identifier (optional).",
						"in": "query",
						"name": "integrator",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The fee amount (optional).",
						"in": "query",
						"name": "fee",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The referrer identifier (optional).",
						"in": "query",
						"name": "referrer",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- A list of allowed bridges (optional).",
						"in": "query",
						"name": "allowBridges",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- A list of allowed exchanges (optional).",
						"in": "query",
						"name": "allowExchanges",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- A list of denied bridges (optional).",
						"in": "query",
						"name": "denyBridges",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- A list of denied exchanges (optional).",
						"in": "query",
						"name": "denyExchanges",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- A list of preferred bridges (optional).",
						"in": "query",
						"name": "preferBridges",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- A list of preferred exchanges (optional).",
						"in": "query",
						"name": "preferExchanges",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				]
			}
		},
		"/lifi/{accountName}/quote": {
			"post": {
				"operationId": "LIFI_postQuote",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ApiResponse containing the quote details, signed transaction, and broadcast information.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PostQuote_"
								}
							}
						}
					}
				},
				"description": "Handles the retrieval of a quote for a token swap between different chains.",
				"security": [],
				"parameters": [
					{
						"description": "- The name of the account requesting the quote.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain from which the token swap will originate.",
						"in": "query",
						"name": "fromChain",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The chain to which the token swap will be sent.",
						"in": "query",
						"name": "toChain",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The token to be swapped from.",
						"in": "query",
						"name": "fromToken",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The token to be swapped to.",
						"in": "query",
						"name": "toToken",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The amount of the token to be swapped from.",
						"in": "query",
						"name": "fromAmount",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address from which the token swap will originate.",
						"in": "query",
						"name": "fromAddress",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- (Optional) The address to which the token swap will be sent.",
						"in": "query",
						"name": "toAddress",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- (Optional) The order preference for the quote (BEST_VALUE, BEST_FEE, BEST_FEE_GAS).",
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"BEST_VALUE",
								"BEST_FEE",
								"BEST_FEE_GAS"
							]
						}
					},
					{
						"description": "- (Optional) The acceptable slippage percentage for the swap.",
						"in": "query",
						"name": "slippage",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- (Optional) The integrator identifier.",
						"in": "query",
						"name": "integrator",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- (Optional) The fee for the swap.",
						"in": "query",
						"name": "fee",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- (Optional) The referrer identifier.",
						"in": "query",
						"name": "referrer",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- (Optional) The list of allowed bridges for the swap.",
						"in": "query",
						"name": "allowBridges",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- (Optional) The list of allowed exchanges for the swap.",
						"in": "query",
						"name": "allowExchanges",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- (Optional) The list of denied bridges for the swap.",
						"in": "query",
						"name": "denyBridges",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- (Optional) The list of denied exchanges for the swap.",
						"in": "query",
						"name": "denyExchanges",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- (Optional) The list of preferred bridges for the swap.",
						"in": "query",
						"name": "preferBridges",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"description": "- (Optional) The list of preferred exchanges for the swap.",
						"in": "query",
						"name": "preferExchanges",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				]
			}
		},
		"/lifi/status": {
			"get": {
				"operationId": "LIFI_getStatus",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ApiResponse containing the status of the transaction.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_StatusResponse_"
								}
							}
						}
					}
				},
				"description": "Retrieves the status of a transaction based on the provided transaction hash.",
				"security": [],
				"parameters": [
					{
						"description": "- The hash of the transaction to retrieve the status for.",
						"in": "query",
						"name": "txHash",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lifi/chains": {
			"get": {
				"operationId": "LIFI_getChains",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ApiResponse containing the supported chains.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainsResponse_"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of supported chains.",
				"security": [],
				"parameters": [
					{
						"description": "- Optional parameter to filter chains by type ('EVM' or 'SOL').",
						"in": "query",
						"name": "optionalChainTypes",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"EVM",
								"SOL"
							]
						}
					}
				]
			}
		},
		"/lifi/tools": {
			"get": {
				"operationId": "GetTools",
				"responses": {
					"200": {
						"description": "- A promise that resolves to an ApiResponse containing the tools data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ToolsResponse_"
								}
							}
						}
					}
				},
				"description": "Retrieves tools based on the provided chains.",
				"security": [],
				"parameters": [
					{
						"description": "- Optional query parameter specifying the chains to filter tools.",
						"in": "query",
						"name": "chains",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lifi/tokens": {
			"get": {
				"operationId": "LIFI_getTokens",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ApiResponse containing the tokens data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_TokensResponse_"
								}
							}
						}
					}
				},
				"description": "Fetches tokens from the LiFi service.",
				"security": [],
				"parameters": []
			}
		},
		"/lifi/token": {
			"get": {
				"operationId": "LIFI_getTokenDetails",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ApiResponse containing the token details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_TokenDetails_"
								}
							}
						}
					}
				},
				"description": "Fetches the details of a specified token on a given blockchain.",
				"security": [],
				"parameters": [
					{
						"description": "- The blockchain on which the token resides.",
						"in": "query",
						"name": "chain",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The address or symbol of the token to fetch details for.",
						"in": "query",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lifi/connections": {
			"get": {
				"operationId": "LIFI_getConnections",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ApiResponse containing the connections response.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ConnectionsResponse_"
								}
							}
						}
					}
				},
				"description": "Retrieves connections between specified chains and tokens.",
				"security": [],
				"parameters": [
					{
						"description": "- The source blockchain identifier.",
						"in": "query",
						"name": "fromChain",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The destination blockchain identifier.",
						"in": "query",
						"name": "toChain",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The source token identifier.",
						"in": "query",
						"name": "fromToken",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The destination token identifier.",
						"in": "query",
						"name": "toToken",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Optional parameter to specify types of chains.",
						"in": "query",
						"name": "chainTypes",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lifi/allPossibleConnections": {
			"get": {
				"operationId": "LIFI_getAllPossibleConnections",
				"responses": {
					"200": {
						"description": "A promise that resolves to an ApiResponse containing TokenInfoByChainId.\nThe response indicates success or failure and includes a message and data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_TokenInfoByChainId_"
								}
							}
						}
					}
				},
				"description": "Retrieves all possible connections for a given chain and token.",
				"security": [],
				"parameters": [
					{
						"description": "- The target chain identifier.",
						"in": "query",
						"name": "toChain",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The target token identifier.",
						"in": "query",
						"name": "toToken",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/litecoin": {
			"get": {
				"operationId": "ListLitecoinAccounts",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Lists the accounts associated with the provided authorization token.",
				"tags": [
					"Litecoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "Litecoin_CreateLitecoinAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account creation result.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Creates a new Litecoin account.",
				"tags": [
					"Litecoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data required to create a Litecoin account.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LitecoinInput",
								"description": "- The input data required to create a Litecoin account."
							}
						}
					}
				}
			}
		},
		"/litecoin/{accountName}": {
			"get": {
				"operationId": "Litecoin_GetLitecoinAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account data, success status, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves account information for a specified account name.",
				"tags": [
					"Litecoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token provided in the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to retrieve information for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/litecoin/{accountName}/sign-tx": {
			"post": {
				"operationId": "Litecoin_SignLitecoinTransaction",
				"responses": {
					"200": {
						"description": "A promise that resolves to a LitecoinAPIResponse object containing the transaction data, success status, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LitecoinAPIResponse"
								}
							}
						}
					}
				},
				"description": "Signs a Litecoin transaction.",
				"tags": [
					"Litecoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to sign the transaction for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The transaction input details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LitecoinTransactionInput",
								"description": "- The transaction input details."
							}
						}
					}
				}
			}
		},
		"/litecoin/{accountName}/export": {
			"post": {
				"operationId": "Litecoin_ExportLitecoinAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account data, success status, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Exports the account information for a given account name.",
				"tags": [
					"Litecoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to be exported.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/litecoin/{accountName}/delete": {
			"post": {
				"operationId": "Litecoin_DeleteLitecoinAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the result of the deletion operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Deletes a Litecoin account.",
				"tags": [
					"Litecoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to be deleted.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/litecoin/{accountName}/memo-sign-tx": {
			"post": {
				"operationId": "Litecoin_SignLitecoinTransactionWithMemo",
				"responses": {
					"200": {
						"description": "A promise that resolves to a LitecoinAPIResponse object containing the transaction data, success status, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LitecoinAPIResponse"
								}
							}
						}
					}
				},
				"description": "Signs a Litecoin transaction with a memo.",
				"tags": [
					"Litecoin"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The account name from the request path.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The transaction input details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LitecoinTransactionInput",
								"description": "- The transaction input details."
							}
						}
					}
				}
			}
		},
		"/lynex/data/assets": {
			"get": {
				"operationId": "GetAssets",
				"responses": {
					"200": {
						"description": "A promise that resolves to a `LynexAPIResponse` containing the assets data, success status, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the assets using the provided authorization token.",
				"tags": [
					"Lynex"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/data/assets/{address}": {
			"get": {
				"operationId": "GetAssetByAddress",
				"responses": {
					"200": {
						"description": "A promise that resolves to a LynexAPIResponse containing the asset data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves an asset by its address.",
				"tags": [
					"Lynex"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The address of the asset to retrieve.",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/data/pools": {
			"get": {
				"operationId": "GetPools",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Lynex"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/data/pools/{address}": {
			"get": {
				"operationId": "GetPoolByAddress",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Lynex"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/data/pools/type/{type}": {
			"get": {
				"operationId": "GetPoolsByType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Lynex"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "type",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/data/pools/top-apr": {
			"get": {
				"operationId": "GetTopAPRPools",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Lynex"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/lynex/data/tvl": {
			"get": {
				"operationId": "GetTotalValueLocked",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Lynex"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/data/vote-distribution": {
			"get": {
				"operationId": "CalculateOptimalVoteDistribution",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Lynex"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "totalVotes",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "maxPools",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/lynex/nft/balanceOf": {
			"get": {
				"operationId": "GetBalanceOf",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "owner",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/ownerOf": {
			"get": {
				"operationId": "GetOwnerOf",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/tokenURI": {
			"get": {
				"operationId": "GetTokenURI",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/lockDetails": {
			"get": {
				"operationId": "GetLockDetails",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/{address}/createLock": {
			"post": {
				"operationId": "CreateLock",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/increaseLockAmount": {
			"post": {
				"operationId": "IncreaseLockAmount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/increaseUnlockTime": {
			"post": {
				"operationId": "IncreaseUnlockTime",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/totalSupply": {
			"get": {
				"operationId": "GetTotalSupply",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/tokenOfOwnerByIndex": {
			"get": {
				"operationId": "GetTokenOfOwnerByIndex",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "owner",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "index",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/tokenByIndex": {
			"get": {
				"operationId": "GetTokenByIndex",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "index",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/{address}/delegate": {
			"post": {
				"operationId": "Delegate",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/merge": {
			"post": {
				"operationId": "Merge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/split": {
			"post": {
				"operationId": "Split",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/claim": {
			"post": {
				"operationId": "Claim",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/unlockPermanent": {
			"post": {
				"operationId": "UnlockPermanent",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/name": {
			"get": {
				"operationId": "GetName",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/symbol": {
			"get": {
				"operationId": "GetSymbol",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/getApproved": {
			"get": {
				"operationId": "GetApproved",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/isApprovedForAll": {
			"get": {
				"operationId": "IsApprovedForAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "owner",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "operator",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/balanceOfNFT": {
			"get": {
				"operationId": "GetBalanceOfNFT",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/balanceOfNFTAt": {
			"get": {
				"operationId": "GetBalanceOfNFTAt",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "timestamp",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/totalNftsMinted": {
			"get": {
				"operationId": "GetTotalNftsMinted",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/delegates": {
			"get": {
				"operationId": "GetDelegates",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "timestamp",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/getVotes": {
			"get": {
				"operationId": "GetVotes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/getPastVotes": {
			"get": {
				"operationId": "GetPastVotes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "timestamp",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/vestedPayout": {
			"get": {
				"operationId": "GetVestedPayout",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/vestedPayoutAtTime": {
			"get": {
				"operationId": "GetVestedPayoutAtTime",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "timestamp",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/vestingPayout": {
			"get": {
				"operationId": "GetVestingPayout",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/vestingPeriod": {
			"get": {
				"operationId": "GetVestingPeriod",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_VestingPeriodData_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/nft/{address}/approve": {
			"post": {
				"operationId": "Approve",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/setApprovalForAll": {
			"post": {
				"operationId": "SetApprovalForAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/transferFrom": {
			"post": {
				"operationId": "TransferFrom",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/safeTransferFrom": {
			"post": {
				"operationId": "SafeTransferFrom",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/burn": {
			"post": {
				"operationId": "Burn",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/createDelegatedLockFor": {
			"post": {
				"operationId": "CreateDelegatedLockFor",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/createLockFor": {
			"post": {
				"operationId": "CreateLockFor",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/checkpoint": {
			"post": {
				"operationId": "Checkpoint",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/checkpointDelegatee": {
			"post": {
				"operationId": "CheckpointDelegatee",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/setClaimApproval": {
			"post": {
				"operationId": "SetClaimApproval",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/setClaimApprovalForAll": {
			"post": {
				"operationId": "SetClaimApprovalForAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/delegateBySig": {
			"post": {
				"operationId": "DelegateBySig",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/nft/{address}/globalCheckpoint": {
			"post": {
				"operationId": "GlobalCheckpoint",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/router/factory": {
			"get": {
				"operationId": "GetFactory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexRouterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/router/wETH": {
			"get": {
				"operationId": "GetWETH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexRouterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/router/getAmountOut": {
			"get": {
				"operationId": "GetAmountOut",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexRouterAPIResponse__amountOut-string--stable-boolean__"
								}
							}
						}
					}
				},
				"tags": [
					"LynexRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "amountIn",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenIn",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenOut",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/router/getAmountsOut": {
			"get": {
				"operationId": "GetAmountsOut",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexRouterAPIResponse_string-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "amountIn",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "routes",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/router/{address}/addLiquidity": {
			"post": {
				"operationId": "AddLiquidity",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexRouterAPIResponse_LynexRouterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexRouterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/router/{address}/addLiquidityETH": {
			"post": {
				"operationId": "AddLiquidityETH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexRouterAPIResponse_LynexRouterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexRouterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/router/{address}/swapExactTokensForTokens": {
			"post": {
				"operationId": "SwapExactTokensForTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexRouterAPIResponse_LynexRouterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexRouterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/router/{address}/swapExactETHForTokens": {
			"post": {
				"operationId": "SwapExactETHForTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexRouterAPIResponse_LynexRouterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexRouterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/router/{address}/swapExactTokensForETH": {
			"post": {
				"operationId": "SwapExactTokensForETH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexRouterAPIResponse_LynexRouterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexRouterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/voter/totalWeight": {
			"get": {
				"operationId": "GetTotalWeight",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/voter/weights": {
			"get": {
				"operationId": "GetWeights",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "pool",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/voter/isGauge": {
			"get": {
				"operationId": "IsGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "gauge",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/voter/isWhitelisted": {
			"get": {
				"operationId": "IsWhitelisted",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/voter/lastVoted": {
			"get": {
				"operationId": "GetLastVoted",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "voter",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/voter/poolVoteLength": {
			"get": {
				"operationId": "GetPoolVoteLength",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "voter",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/lynex/voter/{address}/vote": {
			"post": {
				"operationId": "Vote",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/voter/{address}/reset": {
			"post": {
				"operationId": "Reset",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/voter/{address}/poke": {
			"post": {
				"operationId": "Poke",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/voter/{address}/createGauge": {
			"post": {
				"operationId": "CreateGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/voter/{address}/killGauge": {
			"post": {
				"operationId": "KillGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/voter/{address}/reviveGauge": {
			"post": {
				"operationId": "ReviveGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/voter/{address}/notifyRewardAmount": {
			"post": {
				"operationId": "NotifyRewardAmount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/voter/{address}/distribute": {
			"post": {
				"operationId": "Distribute",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/voter/{address}/claimBribes": {
			"post": {
				"operationId": "ClaimBribes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/voter/{address}/claimFees": {
			"post": {
				"operationId": "ClaimFees",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/voter/{address}/claimRewards": {
			"post": {
				"operationId": "ClaimRewards",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/voter/{address}/whitelist": {
			"post": {
				"operationId": "Whitelist",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LynexVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/lynex/voter/{address}/voteWithOptimalDistribution": {
			"post": {
				"operationId": "VoteWithOptimalDistribution",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"LynexVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/LynexVoterInputBody"
									},
									{
										"properties": {
											"maxPools": {
												"type": "number",
												"format": "double"
											},
											"totalVotes": {
												"type": "number",
												"format": "double"
											}
										},
										"required": [
											"totalVotes"
										],
										"type": "object"
									}
								]
							}
						}
					}
				}
			}
		},
		"/makefuntoken/{account}/CLFactory": {
			"get": {
				"operationId": "MakeFunToken_GetCLFactory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MakeFunTokenHelperAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"MakeFunToken"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/makefuntoken/{account}/maxTick": {
			"get": {
				"operationId": "MakeFunToken_GetMaxTick",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MakeFunTokenHelperAPIResponse_number_"
								}
							}
						}
					}
				},
				"tags": [
					"MakeFunToken"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/makefuntoken/{account}/minTick": {
			"get": {
				"operationId": "MakeFunToken_GetMinTick",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MakeFunTokenHelperAPIResponse_number_"
								}
							}
						}
					}
				},
				"tags": [
					"MakeFunToken"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/makefuntoken/{address}/makeToken": {
			"post": {
				"operationId": "MakeFunToken_MakeToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MakeFunTokenHelperAPIResponse_MakeFunTokenHelperExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"MakeFunToken"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/MakeFunTokenHelperInputBody"
							}
						}
					}
				}
			}
		},
		"/makefuntoken/{address}/setTickLimits": {
			"post": {
				"operationId": "MakeFunToken_SetTickLimits",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MakeFunTokenHelperAPIResponse_MakeFunTokenHelperExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"MakeFunToken"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/MakeFunTokenHelperInputBody"
							}
						}
					}
				}
			}
		},
		"/makefuntoken/{address}/setSupplyLimits": {
			"post": {
				"operationId": "MakeFunToken_SetSupplyLimits",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MakeFunTokenHelperAPIResponse_MakeFunTokenHelperExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"MakeFunToken"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/MakeFunTokenHelperInputBody"
							}
						}
					}
				}
			}
		},
		"/multicall/create-job": {
			"post": {
				"operationId": "CreateJob",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/MultiCallInputBody"
							}
						}
					}
				}
			}
		},
		"/multicall/execute-job/{jobId}": {
			"post": {
				"operationId": "ExecuteJob",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "jobId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multicall/job-result/{jobId}": {
			"get": {
				"operationId": "GetJobResult",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "jobId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multicall/schedule-job": {
			"post": {
				"operationId": "ScheduleJob",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ScheduleJobBody"
							}
						}
					}
				}
			}
		},
		"/multicall/unschedule-job/{jobId}": {
			"post": {
				"operationId": "UnscheduleJob",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "jobId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multicall/scheduled-jobs": {
			"get": {
				"operationId": "GetScheduledJobs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse_any-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multicall/jobs": {
			"get": {
				"operationId": "ListJobs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse_Jobs-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multicall/job/{jobId}": {
			"get": {
				"operationId": "GetJob",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse_Jobs_"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "jobId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteJob",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "jobId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multicall/flows": {
			"post": {
				"operationId": "CreateFlow",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateFlowBody"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "ListFlows",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse_Flow-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multicall/flows/{flowId}": {
			"get": {
				"operationId": "GetFlow",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse_Flow_"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "flowId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateFlow",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "flowId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateFlowBody"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteFlow",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "flowId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multicall/user-defined-functions": {
			"post": {
				"operationId": "CreateUserDefinedFunction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"functionBody": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								},
								"required": [
									"functionBody",
									"name"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "ListUserDefinedFunctions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse_any-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multicall/user-defined-functions/{functionId}": {
			"delete": {
				"operationId": "DeleteUserDefinedFunction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "functionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multicall/notifications": {
			"get": {
				"operationId": "GetNotifications",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse_any-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multicall/notifications/{notificationId}/mark-as-read": {
			"post": {
				"operationId": "MarkNotificationAsRead",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MultiCallAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"MultiCall"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "notificationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/odos/{accountName}/swap": {
			"post": {
				"operationId": "ODOS_SwapTokens",
				"responses": {
					"200": {
						"description": "A promise that resolves to an OdosAPIResponse containing the result of the swap operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OdosAPIResponse_OdosExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Handles the swap operation for the given account.",
				"tags": [
					"Odos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account to perform the swap for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing the swap details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OdosSwapInputBody",
								"description": "- The input body containing the swap details."
							}
						}
					}
				}
			}
		},
		"/odos/{accountName}/get-quote": {
			"post": {
				"operationId": "ODOS_GetQuote",
				"responses": {
					"200": {
						"description": "A promise that resolves to an OdosAPIResponse containing the result of the quote request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OdosAPIResponse_OdosExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Retrieves a quote for a given account and input body.",
				"tags": [
					"Odos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the account for which the quote is being retrieved.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The authorization token for the request.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input body containing the details for the quote request.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OdosSwapInputBody",
								"description": "- The input body containing the details for the quote request."
							}
						}
					}
				}
			}
		},
		"/odos/{accountName}/get-zap-quote": {
			"post": {
				"operationId": "GetZapQuote",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OdosAPIResponse_OdosExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"Odos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OdosSwapInputBody"
							}
						}
					}
				}
			}
		},
		"/odos/{accountName}/zap": {
			"post": {
				"operationId": "Zap",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OdosAPIResponse_OdosExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"Odos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OdosSwapInputBody"
							}
						}
					}
				}
			}
		},
		"/odos/assemble-transaction": {
			"post": {
				"operationId": "ODOS_AssembleTransaction",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `OdosAPIResponse` containing the result of the transaction assembly.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OdosAPIResponse_OdosExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Assembles a transaction using the provided authorization token and request body.",
				"tags": [
					"Odos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing the transaction details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AssembleRequest",
								"description": "- The request body containing the transaction details."
							}
						}
					}
				}
			}
		},
		"/odos/supported-chains": {
			"get": {
				"operationId": "ODOS_GetSupportedChains",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `OdosAPIResponse` containing the result of the supported chains.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OdosAPIResponse_OdosExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Retrieves the supported blockchain networks from the Odos API.",
				"tags": [
					"Odos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token provided in the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/odos/contract-info": {
			"get": {
				"operationId": "ODOS_GetContractInfo",
				"responses": {
					"200": {
						"description": "A promise that resolves to an OdosAPIResponse containing the contract information.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OdosAPIResponse_OdosExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Retrieves contract information from the Odos API.",
				"tags": [
					"Odos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The version of the API to use, expected to be 'v2'.",
						"in": "query",
						"name": "version",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"v2"
							]
						}
					},
					{
						"description": "- The chain ID for which the contract information is requested.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/odos/router-address": {
			"get": {
				"operationId": "ODOS_GetRouterAddress",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `OdosAPIResponse` containing the `OdosExecuteFunctionResult`.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OdosAPIResponse_OdosExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Retrieves the router address for the specified version and chain ID.",
				"tags": [
					"Odos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The version of the API to use, default is 'v2'.",
						"in": "query",
						"name": "version",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"v2"
							]
						}
					},
					{
						"description": "- The ID of the blockchain network.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/odos/executor-address": {
			"get": {
				"operationId": "ODOS_GetExecutorAddress",
				"responses": {
					"200": {
						"description": "A promise that resolves to an OdosAPIResponse containing the executor address.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OdosAPIResponse_OdosExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Retrieves the executor address from the Odos API.",
				"tags": [
					"Odos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The API version, expected to be 'v2'.",
						"in": "query",
						"name": "version",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"v2"
							]
						}
					},
					{
						"description": "- The chain ID for which the executor address is requested.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/odos/liquidity-sources": {
			"get": {
				"operationId": "ODOS_GetLiquiditySources",
				"responses": {
					"200": {
						"description": "A promise that resolves to an OdosAPIResponse containing the result of the liquidity sources query.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OdosAPIResponse_OdosExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Retrieves liquidity sources for a given chain ID.",
				"tags": [
					"Odos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain to query for liquidity sources.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/odos/supported-tokens": {
			"get": {
				"operationId": "ODOS_GetSupportedTokens",
				"responses": {
					"200": {
						"description": "A promise that resolves to an `OdosAPIResponse` containing the supported tokens.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OdosAPIResponse_OdosExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Retrieves the supported tokens for a given blockchain network.",
				"tags": [
					"Odos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain network to query.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/odos/current-block": {
			"get": {
				"operationId": "ODOS_GetCurrentBlock",
				"responses": {
					"200": {
						"description": "A promise that resolves to an OdosAPIResponse containing the current block information.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OdosAPIResponse_OdosExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"description": "Retrieves the current block information for a given blockchain.",
				"tags": [
					"Odos"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The ID of the blockchain to query.",
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/onramper/currencies": {
			"get": {
				"operationId": "OnRamperGetSupportedCurrencies",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SupportedCurrenciesResponse"
								}
							}
						}
					}
				},
				"tags": [
					"onramper"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "type",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/onramper/payment-types": {
			"get": {
				"operationId": "OnRamperGetSupportedPaymentTypes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SupportedPaymentTypesCurrencyResponse"
								}
							}
						}
					}
				},
				"tags": [
					"onramper"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "fiat",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "country",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "type",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/onramper/payment-types/fiat": {
			"get": {
				"operationId": "OnRamperGetSupportedPaymentTypesFiat",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SupportedPaymentTypesCurrencyResponse"
								}
							}
						}
					}
				},
				"tags": [
					"onramper"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "fiat",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "country",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/onramper/defaults": {
			"get": {
				"operationId": "OnRamperGetSupportedDefaultsAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SupportedDefaultResponse"
								}
							}
						}
					}
				},
				"tags": [
					"onramper"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "country",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "type",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/onramper/assets": {
			"get": {
				"operationId": "OnRamperGetSupportedAssets",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SupportedAssetResponse"
								}
							}
						}
					}
				},
				"tags": [
					"onramper"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "source",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "country",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/onramper/onramps": {
			"get": {
				"operationId": "OnRamperGetSupportedOnRampsAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetSupportedOnRampsResponse"
								}
							}
						}
					}
				},
				"tags": [
					"onramper"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/onramper/quotes/buy": {
			"get": {
				"operationId": "OnRamperGetQuotesBuy",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Quotes"
								}
							}
						}
					}
				},
				"tags": [
					"onramper"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "fiat",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "crypto",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "amount",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "paymentMethod",
						"required": false,
						"schema": {
							"default": "creditcard",
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "uuid",
						"required": false,
						"schema": {
							"default": "",
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "clientName",
						"required": false,
						"schema": {
							"default": "",
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "country",
						"required": false,
						"schema": {
							"default": "",
							"type": "string"
						}
					}
				]
			}
		},
		"/onramper/quotes/sell": {
			"get": {
				"operationId": "OnRamperGetQuotesSell",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SellQuotes"
								}
							}
						}
					}
				},
				"tags": [
					"onramper"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "fiat",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "crypto",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "amount",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "paymentMethod",
						"required": false,
						"schema": {
							"default": "creditcard",
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "uuid",
						"required": false,
						"schema": {
							"default": "",
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "clientName",
						"required": false,
						"schema": {
							"default": "",
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "country",
						"required": false,
						"schema": {
							"default": "",
							"type": "string"
						}
					}
				]
			}
		},
		"/onramper/fund/${accountName}": {
			"post": {
				"operationId": "OnRamperCheckout",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"onramper"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TransactionInput"
							}
						}
					}
				}
			}
		},
		"/opensea/{account}/createOffer": {
			"post": {
				"operationId": "CreateOffer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenSeaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"OpenSea"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OpenSeaNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/opensea/{account}/createCollectionOffer": {
			"post": {
				"operationId": "CreateCollectionOffer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenSeaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"OpenSea"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OpenSeaCollectionInputBody"
							}
						}
					}
				}
			}
		},
		"/opensea/{account}/collection/{slug}": {
			"get": {
				"operationId": "GetCollection",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenSeaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"OpenSea"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "slug",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": false,
						"schema": {
							"default": "1",
							"type": "string"
						}
					}
				]
			}
		},
		"/opensea/{account}/nft/{address}/{tokenId}": {
			"get": {
				"operationId": "GetNFT",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenSeaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"OpenSea"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": false,
						"schema": {
							"default": "1",
							"type": "string"
						}
					}
				]
			}
		},
		"/opensea/{account}/wrapEth": {
			"post": {
				"operationId": "WrapEth",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenSeaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"OpenSea"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"chainId": {
										"type": "string"
									},
									"amountInEth": {
										"type": "string"
									}
								},
								"required": [
									"chainId",
									"amountInEth"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/opensea/{account}/unwrapWeth": {
			"post": {
				"operationId": "UnwrapWeth",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenSeaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"OpenSea"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"chainId": {
										"type": "string"
									},
									"amountInEth": {
										"type": "string"
									}
								},
								"required": [
									"chainId",
									"amountInEth"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/ping": {
			"get": {
				"operationId": "GetMessage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PingResponse"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": []
			}
		},
		"/polymarket/{account}/createOrder": {
			"post": {
				"operationId": "CreateOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_CreateOrderResponse_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOrderBody"
							}
						}
					}
				}
			}
		},
		"/polymarket/{account}/createMarketBuyOrder": {
			"post": {
				"operationId": "CreateMarketBuyOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_CreateMarketBuyOrderResponse_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateMarketBuyOrderBody"
							}
						}
					}
				}
			}
		},
		"/polymarket/{account}/postOrder": {
			"post": {
				"operationId": "PostOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_PostOrderResponse_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PostOrderBody"
							}
						}
					}
				}
			}
		},
		"/polymarket/{account}/cancelOrder": {
			"post": {
				"operationId": "CancelOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_CancelOrderResponse_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CancelOrderBody"
							}
						}
					}
				}
			}
		},
		"/polymarket/{account}/cancelOrders": {
			"post": {
				"operationId": "CancelOrders",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_CancelOrdersResponse_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CancelOrdersBody"
							}
						}
					}
				}
			}
		},
		"/polymarket/{account}/cancelMarketOrders": {
			"post": {
				"operationId": "CancelMarketOrders",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_CancelMarketOrdersResponse_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CancelMarketOrdersBody"
							}
						}
					}
				}
			}
		},
		"/polymarket/{account}/updateBalanceAllowance": {
			"post": {
				"operationId": "UpdateBalanceAllowance",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_UpdateBalanceAllowanceResponse_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateBalanceAllowanceBody"
							}
						}
					}
				}
			}
		},
		"/polymarket/{account}/dropNotifications": {
			"post": {
				"operationId": "DropNotifications",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_DropNotificationsResponse_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DropNotificationsBody"
							}
						}
					}
				}
			}
		},
		"/polymarket/{account}/markets": {
			"get": {
				"operationId": "GetMarkets",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_PaginationPayload_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "nextCursor",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/polymarket/{account}/approveForPolymarket": {
			"post": {
				"operationId": "ApproveForPolymarket",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ApproveForPolymarketBody"
							}
						}
					}
				}
			}
		},
		"/polymarket/{account}/market/{conditionID}": {
			"get": {
				"operationId": "GetMarket",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "conditionID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/polymarket/{account}/orderBook": {
			"get": {
				"operationId": "GetOrderBook",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_OrderBookSummary_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/polymarket/{account}/openOrders": {
			"get": {
				"operationId": "GetOpenOrders",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_OpenOrdersResponse_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "marketHash",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "outcomeId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "assetId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "nextCursor",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/polymarket/{account}/order/{orderID}": {
			"get": {
				"operationId": "GetOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_OpenOrder_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "orderID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/polymarket/{account}/trades": {
			"get": {
				"operationId": "GetTrades",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_Trade-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "maker_address",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "market",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "asset_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "before",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "after",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "nextCursor",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/polymarket/{account}/notifications": {
			"get": {
				"operationId": "GetNotifications",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_Notification-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/polymarket/{account}/balanceAllowance": {
			"get": {
				"operationId": "GetBalanceAllowance",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_BalanceAllowanceResponse_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "asset_type",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "token_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/polymarket/{account}/pricesHistory": {
			"get": {
				"operationId": "GetPricesHistory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_MarketPrice-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "market",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "startTs",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "endTs",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "fidelity",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "interval",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/polymarket/{account}/marketTradeEvents/{conditionID}": {
			"get": {
				"operationId": "GetMarketTradeEvents",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PolymarketAPIResponse_MarketTradeEvent-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"Polymarket"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "conditionID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/data/pools": {
			"get": {
				"operationId": "GetPools",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Ramses"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/data/pools/{address}": {
			"get": {
				"operationId": "GetPoolByAddress",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Ramses"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/data/pools/type/{type}": {
			"get": {
				"operationId": "GetPoolsByType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Ramses"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "type",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/data/pools/top-apr": {
			"get": {
				"operationId": "GetTopAPRPools",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Ramses"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/ramses/data/tokens": {
			"get": {
				"operationId": "GetTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Ramses"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/data/info": {
			"get": {
				"operationId": "GetInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Ramses"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/data/tvl": {
			"get": {
				"operationId": "GetTotalValueLocked",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Ramses"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/data/vote-distribution": {
			"get": {
				"operationId": "CalculateOptimalVoteDistribution",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Ramses"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "totalVotes",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "maxPools",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/ramses/nft/balanceOf": {
			"get": {
				"operationId": "GetBalanceOf",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "owner",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/nft/ownerOf": {
			"get": {
				"operationId": "GetOwnerOf",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/nft/{address}/approve": {
			"post": {
				"operationId": "Approve",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_RamsesNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/nft/{address}/createLock": {
			"post": {
				"operationId": "CreateLock",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_RamsesNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/nft/{address}/increaseAmount": {
			"post": {
				"operationId": "IncreaseAmount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_RamsesNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/nft/{address}/increaseUnlockTime": {
			"post": {
				"operationId": "IncreaseUnlockTime",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_RamsesNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/nft/{address}/withdraw": {
			"post": {
				"operationId": "Withdraw",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_RamsesNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/nft/tokenURI": {
			"get": {
				"operationId": "GetTokenURI",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/nft/totalSupply": {
			"get": {
				"operationId": "GetTotalSupply",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/nft/{address}/delegate": {
			"post": {
				"operationId": "Delegate",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_RamsesNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/nft/{address}/transferFrom": {
			"post": {
				"operationId": "TransferFrom",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_RamsesNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/nft/{address}/merge": {
			"post": {
				"operationId": "Merge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_RamsesNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/nft/{address}/split": {
			"post": {
				"operationId": "Split",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_RamsesNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/nft/balanceOfNFT": {
			"get": {
				"operationId": "GetBalanceOfNFT",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/nft/locked": {
			"get": {
				"operationId": "GetLocked",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_LockedData_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/nft/getVotes": {
			"get": {
				"operationId": "GetVotes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/nft/getPastVotes": {
			"get": {
				"operationId": "GetPastVotes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "blockNumber",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/nft/delegates": {
			"get": {
				"operationId": "GetDelegates",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/nft/{address}/abstain": {
			"post": {
				"operationId": "Abstain",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_RamsesNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/nft/{address}/attach": {
			"post": {
				"operationId": "Attach",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_RamsesNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/nft/{address}/detach": {
			"post": {
				"operationId": "Detach",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesNFTAPIResponse_RamsesNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/router/{address}/UNSAFE_swapExactTokensForTokens": {
			"post": {
				"operationId": "UNSAFE_swapExactTokensForTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse_RamsesRouterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesRouterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/router/{address}/addLiquidity": {
			"post": {
				"operationId": "AddLiquidity",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse_RamsesRouterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesRouterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/router/{address}/addLiquidityETH": {
			"post": {
				"operationId": "AddLiquidityETH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse_RamsesRouterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesRouterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/router/{address}/removeLiquidity": {
			"post": {
				"operationId": "RemoveLiquidity",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse_RamsesRouterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesRouterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/router/{address}/removeLiquidityETH": {
			"post": {
				"operationId": "RemoveLiquidityETH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse_RamsesRouterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesRouterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/router/{address}/swapExactTokensForTokens": {
			"post": {
				"operationId": "SwapExactTokensForTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse_RamsesRouterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesRouterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/router/{address}/swapExactETHForTokens": {
			"post": {
				"operationId": "SwapExactETHForTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse_RamsesRouterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesRouterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/router/{address}/swapExactTokensForETH": {
			"post": {
				"operationId": "SwapExactTokensForETH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse_RamsesRouterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesRouterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/router/factory": {
			"get": {
				"operationId": "GetFactory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/router/getAmountOut": {
			"get": {
				"operationId": "GetAmountOut",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse__amountOut-string--stable-boolean__"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "amountIn",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenIn",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenOut",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/router/getAmountsOut": {
			"get": {
				"operationId": "GetAmountsOut",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse_string-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "amountIn",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "routes",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/router/getReserves": {
			"get": {
				"operationId": "GetReserves",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse__reserve0%3Astring--reserve1%3Astring__"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenA",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenB",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "stable",
						"required": true,
						"schema": {
							"type": "boolean"
						}
					}
				]
			}
		},
		"/ramses/router/isPair": {
			"get": {
				"operationId": "IsPair",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "pair",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/router/pairFor": {
			"get": {
				"operationId": "PairFor",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenA",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenB",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "stable",
						"required": true,
						"schema": {
							"type": "boolean"
						}
					}
				]
			}
		},
		"/ramses/router/quoteAddLiquidity": {
			"get": {
				"operationId": "QuoteAddLiquidity",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse__amountA-string--amountB-string--liquidity-string--__"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenA",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenB",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "stable",
						"required": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "amountADesired",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "amountBDesired",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/router/quoteRemoveLiquidity": {
			"get": {
				"operationId": "QuoteRemoveLiquidity",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse__amountA-string--amountB-string__"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenA",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenB",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "stable",
						"required": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "liquidity",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/router/sortTokens": {
			"get": {
				"operationId": "SortTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse_SortedTokens_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenA",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenB",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/router/weth": {
			"get": {
				"operationId": "GetWeth",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesRouterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesRouter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/voter/totalWeight": {
			"get": {
				"operationId": "GetTotalWeight",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/voter/weights": {
			"get": {
				"operationId": "GetWeights",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "pool",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/voter/isGauge": {
			"get": {
				"operationId": "IsGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "gauge",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/voter/isWhitelisted": {
			"get": {
				"operationId": "IsWhitelisted",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/voter/lastVoted": {
			"get": {
				"operationId": "GetLastVoted",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ramses/voter/{address}/vote": {
			"post": {
				"operationId": "Vote",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/voter/{address}/reset": {
			"post": {
				"operationId": "Reset",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/voter/{address}/poke": {
			"post": {
				"operationId": "Poke",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/voter/{address}/attachTokenToGauge": {
			"post": {
				"operationId": "AttachTokenToGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/voter/{address}/detachTokenFromGauge": {
			"post": {
				"operationId": "DetachTokenFromGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/voter/{address}/createGauge": {
			"post": {
				"operationId": "CreateGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/voter/{address}/killGauge": {
			"post": {
				"operationId": "KillGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/voter/{address}/reviveGauge": {
			"post": {
				"operationId": "ReviveGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/voter/{address}/notifyRewardAmount": {
			"post": {
				"operationId": "NotifyRewardAmount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/voter/{address}/distribute": {
			"post": {
				"operationId": "Distribute",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/voter/{address}/claimBribes": {
			"post": {
				"operationId": "ClaimBribes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/voter/{address}/claimFees": {
			"post": {
				"operationId": "ClaimFees",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/voter/{address}/claimRewards": {
			"post": {
				"operationId": "ClaimRewards",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/voter/{address}/whitelist": {
			"post": {
				"operationId": "Whitelist",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RamsesVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/ramses/voter/{address}/voteWithOptimalDistribution": {
			"post": {
				"operationId": "VoteWithOptimalDistribution",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"RamsesVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/RamsesVoterInputBody"
									},
									{
										"properties": {
											"maxPools": {
												"type": "number",
												"format": "double"
											},
											"totalVotes": {
												"type": "number",
												"format": "double"
											}
										},
										"required": [
											"totalVotes"
										],
										"type": "object"
									}
								]
							}
						}
					}
				}
			}
		},
		"/ripple": {
			"get": {
				"operationId": "ListRippleAccounts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"ripple"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateRippleAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"ripple"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RippleInput"
							}
						}
					}
				}
			}
		},
		"/ripple/{accountName}": {
			"get": {
				"operationId": "GetRippleAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"ripple"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ripple/{accountName}/sign-tx": {
			"post": {
				"operationId": "SignRippleTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RippleAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"ripple"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RippleTransactionInput"
							}
						}
					}
				}
			}
		},
		"/ripple/{accountName}/export": {
			"post": {
				"operationId": "ExportRippleAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"ripple"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ripple/{accountName}/delete": {
			"post": {
				"operationId": "DeleteRippleAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"ripple"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/solana": {
			"get": {
				"operationId": "ListSolanaAccounts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Solana"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateSolanaAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Solana"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SolanaInput"
							}
						}
					}
				}
			}
		},
		"/solana/{accountName}": {
			"get": {
				"operationId": "GetSolanaAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Solana"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/solana/{accountName}/sign-tx": {
			"post": {
				"operationId": "SignSolanaTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SolanaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Solana"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SolanaSignTransactionInput"
							}
						}
					}
				}
			}
		},
		"/solana/{accountName}/multi-sign-tx": {
			"post": {
				"operationId": "MultiSignSolanaTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SolanaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Solana"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SolanaSignTransactionInput"
							}
						}
					}
				}
			}
		},
		"/solana/{accountName}/transfer": {
			"post": {
				"operationId": "TransferSolanaTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SolanaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Solana"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SolanaTransactionInput"
							}
						}
					}
				}
			}
		},
		"/solana/{accountName}/transfer-tokens": {
			"post": {
				"operationId": "TransferTokensSignSolanaTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SolanaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Solana"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SolanaTransactionInput"
							}
						}
					}
				}
			}
		},
		"/solana/{accountName}/export": {
			"post": {
				"operationId": "ExportSolanaAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Solana"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/solana/{accountName}/delete": {
			"post": {
				"operationId": "DeleteSolanaAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Solana"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/data/fusions": {
			"get": {
				"operationId": "GetFusions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ThenaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Thena"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/data/fusions/{address}": {
			"get": {
				"operationId": "GetFusionByAddress",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ThenaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Thena"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/data/fusions/type/{type}": {
			"get": {
				"operationId": "GetFusionsByType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ThenaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Thena"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "type",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/data/fusions/top-apr": {
			"get": {
				"operationId": "GetTopAPRFusions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ThenaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Thena"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/thena/data/tvl": {
			"get": {
				"operationId": "GetTotalValueLocked",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ThenaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Thena"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/data/tokens/top": {
			"get": {
				"operationId": "GetTopTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ThenaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Thena"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/thena/data/pairs/top": {
			"get": {
				"operationId": "GetTopPairs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ThenaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Thena"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/thena/data/vote-distribution": {
			"get": {
				"operationId": "CalculateOptimalVoteDistribution",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ThenaAPIResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Thena"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "totalVotes",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "maxFusions",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/thorswap/quote": {
			"get": {
				"operationId": "GetQuote",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ThorSwapAPIResponse_Quote_"
								}
							}
						}
					}
				},
				"tags": [
					"ThorSwap"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sellAsset",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "buyAsset",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sellAmount",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "senderAddress",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "recipientAddress",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "slippage",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "providers",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"in": "query",
						"name": "preferredProvider",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "affiliateAddress",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "affiliateBasisPoints",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "allowSmartContractRecipient",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					}
				]
			}
		},
		"/thorswap/swap": {
			"post": {
				"operationId": "Swap",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ThorSwapAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"ThorSwap"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"chainId": {
										"type": "string"
									},
									"accountName": {
										"type": "string"
									},
									"provider": {
										"type": "string"
									},
									"recipientAddress": {
										"type": "string"
									},
									"senderAddress": {
										"type": "string"
									},
									"toAsset": {
										"type": "string"
									},
									"fromAsset": {
										"type": "string"
									},
									"amount": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"chainId",
									"accountName",
									"recipientAddress",
									"senderAddress",
									"toAsset",
									"fromAsset",
									"amount"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/thorswap/gasPrice": {
			"get": {
				"operationId": "GetGasPrice",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ThorSwapAPIResponse_GasPrice_"
								}
							}
						}
					}
				},
				"tags": [
					"ThorSwap"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thorswap/supportedChains": {
			"get": {
				"operationId": "GetSupportedChains",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ThorSwapAPIResponse_string-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"ThorSwap"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thorswap/supportedProviders": {
			"get": {
				"operationId": "GetSupportedProviders",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ThorSwapAPIResponse_string-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"ThorSwap"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tron": {
			"get": {
				"operationId": "Tron_ListTronAccounts",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account data, success status, and a message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Lists accounts using the provided authorization token.",
				"tags": [
					"Tron"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "Tron_CreateTronAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account creation result.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Creates a new account using the provided TronInput data.",
				"tags": [
					"Tron"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The input data required to create a Tron account.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TronInput",
								"description": "- The input data required to create a Tron account."
							}
						}
					}
				}
			}
		},
		"/tron/{accountName}": {
			"get": {
				"operationId": "Tron_GetTronAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves account information from the Tron blockchain.",
				"tags": [
					"Tron"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to retrieve information for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tron/{accountName}/sign-tx": {
			"post": {
				"operationId": "Tron_SignTronTransaction",
				"responses": {
					"200": {
						"description": "A promise that resolves to a TronAPIResponse containing the signed transaction data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TronAPIResponse"
								}
							}
						}
					}
				},
				"description": "Signs a Tron transaction using the provided account name and transaction input.",
				"tags": [
					"Tron"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to sign the transaction for.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The transaction input data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TronTransactionInput",
								"description": "- The transaction input data."
							}
						}
					}
				}
			}
		},
		"/tron/{accountName}/export": {
			"post": {
				"operationId": "Tron_ExportTronAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the account details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Exports the account details for the specified account name.",
				"tags": [
					"Tron"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to be exported.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tron/{accountName}/delete": {
			"post": {
				"operationId": "Tron_DeleteTronAccount",
				"responses": {
					"200": {
						"description": "A promise that resolves to an AccountAPIResponse object containing the result of the deletion operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountAPIResponse"
								}
							}
						}
					}
				},
				"description": "Deletes an account using the provided account name and authorization token.",
				"tags": [
					"Tron"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "- The authorization token from the request header.",
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The name of the account to be deleted.",
						"in": "path",
						"name": "accountName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/uniswap/v2/router/{account}/WETH": {
			"get": {
				"operationId": "GetWETH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/uniswap/v2/router/{account}/addLiquidity": {
			"post": {
				"operationId": "AddLiquidity",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/addLiquidityETH": {
			"post": {
				"operationId": "AddLiquidityETH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/getAmountIn": {
			"post": {
				"operationId": "GetAmountIn",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/getAmountOut": {
			"post": {
				"operationId": "GetAmountOut",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/getAmountsIn": {
			"post": {
				"operationId": "GetAmountsIn",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/getAmountsOut": {
			"post": {
				"operationId": "GetAmountsOut",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/quote": {
			"post": {
				"operationId": "Quote",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/removeLiquidity": {
			"post": {
				"operationId": "RemoveLiquidity",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/removeLiquidityETH": {
			"post": {
				"operationId": "RemoveLiquidityETH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/removeLiquidityETHSupportingFeeOnTransferTokens": {
			"post": {
				"operationId": "RemoveLiquidityETHSupportingFeeOnTransferTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/removeLiquidityETHWithPermit": {
			"post": {
				"operationId": "RemoveLiquidityETHWithPermit",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/removeLiquidityETHWithPermitSupportingFeeOnTransferTokens": {
			"post": {
				"operationId": "RemoveLiquidityETHWithPermitSupportingFeeOnTransferTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/removeLiquidityWithPermit": {
			"post": {
				"operationId": "RemoveLiquidityWithPermit",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/swapETHForExactTokens": {
			"post": {
				"operationId": "SwapETHForExactTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/swapExactETHForTokens": {
			"post": {
				"operationId": "SwapExactETHForTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/swapExactETHForTokensSupportingFeeOnTransferTokens": {
			"post": {
				"operationId": "SwapExactETHForTokensSupportingFeeOnTransferTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/swapExactTokensForETH": {
			"post": {
				"operationId": "SwapExactTokensForETH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/swapExactTokensForETHSupportingFeeOnTransferTokens": {
			"post": {
				"operationId": "SwapExactTokensForETHSupportingFeeOnTransferTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/swapExactTokensForTokens": {
			"post": {
				"operationId": "SwapExactTokensForTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/swapExactTokensForTokensSupportingFeeOnTransferTokens": {
			"post": {
				"operationId": "SwapExactTokensForTokensSupportingFeeOnTransferTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/swapTokensForExactETH": {
			"post": {
				"operationId": "SwapTokensForExactETH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v2/router/{account}/swapTokensForExactTokens": {
			"post": {
				"operationId": "SwapTokensForExactTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV2Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV2InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/{address}/mint": {
			"post": {
				"operationId": "Mint",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/{address}/increaseLiquidity": {
			"post": {
				"operationId": "IncreaseLiquidity",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/{address}/decreaseLiquidity": {
			"post": {
				"operationId": "DecreaseLiquidity",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/{address}/collect": {
			"post": {
				"operationId": "Collect",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/{address}/burn": {
			"post": {
				"operationId": "Burn",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/{address}/createAndInitializePoolIfNecessary": {
			"post": {
				"operationId": "CreateAndInitializePoolIfNecessary",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/{address}/approve": {
			"post": {
				"operationId": "Approve",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/{address}/setApprovalForAll": {
			"post": {
				"operationId": "SetApprovalForAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/{address}/transferFrom": {
			"post": {
				"operationId": "TransferFrom",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/{address}/permit": {
			"post": {
				"operationId": "Permit",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/{address}/multicall": {
			"post": {
				"operationId": "Multicall",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/{address}/sweepToken": {
			"post": {
				"operationId": "SweepToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/{address}/unwrapWETH9": {
			"post": {
				"operationId": "UnwrapWETH9",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/{address}/refundETH": {
			"post": {
				"operationId": "RefundETH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/nft/positions": {
			"get": {
				"operationId": "Positions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/tokenOfOwnerByIndex": {
			"get": {
				"operationId": "TokenOfOwnerByIndex",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "owner",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "index",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/balanceOf": {
			"get": {
				"operationId": "BalanceOf",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "owner",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/DOMAIN_SEPARATOR": {
			"get": {
				"operationId": "DOMAIN_SEPARATOR",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/PERMIT_TYPEHASH": {
			"get": {
				"operationId": "PERMIT_TYPEHASH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/WETH9": {
			"get": {
				"operationId": "WETH9",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/factory": {
			"get": {
				"operationId": "Factory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/name": {
			"get": {
				"operationId": "Name",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/symbol": {
			"get": {
				"operationId": "Symbol",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/tokenURI": {
			"get": {
				"operationId": "TokenURI",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/baseURI": {
			"get": {
				"operationId": "BaseURI",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/ownerOf": {
			"get": {
				"operationId": "OwnerOf",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/getApproved": {
			"get": {
				"operationId": "GetApproved",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/isApprovedForAll": {
			"get": {
				"operationId": "IsApprovedForAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "owner",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "operator",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/totalSupply": {
			"get": {
				"operationId": "TotalSupply",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/tokenByIndex": {
			"get": {
				"operationId": "TokenByIndex",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "index",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/uniswap/v3/nft/supportsInterface": {
			"get": {
				"operationId": "SupportsInterface",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3NFTAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3NFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "interfaceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/uniswap/v3/router/{address}/exactInput": {
			"post": {
				"operationId": "ExactInput",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/router/{address}/exactInputSingle": {
			"post": {
				"operationId": "ExactInputSingle",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/router/{address}/exactOutput": {
			"post": {
				"operationId": "ExactOutput",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/router/{address}/exactOutputSingle": {
			"post": {
				"operationId": "ExactOutputSingle",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/router/{address}/multicall": {
			"post": {
				"operationId": "Multicall",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/router/{address}/refundETH": {
			"post": {
				"operationId": "RefundETH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/router/{address}/selfPermit": {
			"post": {
				"operationId": "SelfPermit",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/router/{address}/selfPermitAllowed": {
			"post": {
				"operationId": "SelfPermitAllowed",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/router/{address}/selfPermitAllowedIfNecessary": {
			"post": {
				"operationId": "SelfPermitAllowedIfNecessary",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/router/{address}/selfPermitIfNecessary": {
			"post": {
				"operationId": "SelfPermitIfNecessary",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/router/{address}/sweepToken": {
			"post": {
				"operationId": "SweepToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/router/{address}/sweepTokenWithFee": {
			"post": {
				"operationId": "SweepTokenWithFee",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/router/{address}/unwrapWETH9": {
			"post": {
				"operationId": "UnwrapWETH9",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/router/{address}/unwrapWETH9WithFee": {
			"post": {
				"operationId": "UnwrapWETH9WithFee",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UniswapV3InputBody"
							}
						}
					}
				}
			}
		},
		"/uniswap/v3/router/WETH9": {
			"get": {
				"operationId": "WETH9",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/uniswap/v3/router/factory": {
			"get": {
				"operationId": "Factory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UniswapV3APIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"UniswapV3Router"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{account}/balanceOf": {
			"get": {
				"operationId": "GetBalanceOf",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{tokenId}/ownerOf": {
			"get": {
				"operationId": "GetOwnerOf",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{tokenId}/tokenURI": {
			"get": {
				"operationId": "GetTokenURI",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{tokenId}/getApproved": {
			"get": {
				"operationId": "GetApproved",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{owner}/isApprovedForAll": {
			"get": {
				"operationId": "IsApprovedForAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "owner",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "operator",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{tokenId}/balanceOfNFT": {
			"get": {
				"operationId": "GetBalanceOfNFT",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/totalSupply": {
			"get": {
				"operationId": "GetTotalSupply",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{tokenId}/locked": {
			"get": {
				"operationId": "GetLocked",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_LockedData_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{tokenId}/lockedEnd": {
			"get": {
				"operationId": "GetLockedEnd",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{address}/createLock": {
			"post": {
				"operationId": "CreateLock",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/createLockFor": {
			"post": {
				"operationId": "CreateLockFor",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/increaseLockAmount": {
			"post": {
				"operationId": "IncreaseLockAmount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/increaseUnlockTime": {
			"post": {
				"operationId": "IncreaseUnlockTime",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/withdraw": {
			"post": {
				"operationId": "Withdraw",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/approve": {
			"post": {
				"operationId": "Approve",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/setApprovalForAll": {
			"post": {
				"operationId": "SetApprovalForAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/transferFrom": {
			"post": {
				"operationId": "TransferFrom",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/safeTransferFrom": {
			"post": {
				"operationId": "SafeTransferFrom",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/merge": {
			"post": {
				"operationId": "Merge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/split": {
			"post": {
				"operationId": "Split",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/voting": {
			"post": {
				"operationId": "Voting",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/abstain": {
			"post": {
				"operationId": "Abstain",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/attach": {
			"post": {
				"operationId": "Attach",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/detach": {
			"post": {
				"operationId": "Detach",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/depositFor": {
			"post": {
				"operationId": "DepositFor",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/checkpoint": {
			"post": {
				"operationId": "Checkpoint",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/delegate": {
			"post": {
				"operationId": "Delegate",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{address}/delegateBySig": {
			"post": {
				"operationId": "DelegateBySig",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeNFTInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/nft/{tokenId}/getLastUserSlope": {
			"get": {
				"operationId": "GetLastUserSlope",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{tokenId}/userPointHistory": {
			"get": {
				"operationId": "GetUserPointHistory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_UserPointHistoryData_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "loc",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{tokenId}/userPointHistoryTS": {
			"get": {
				"operationId": "GetUserPointHistoryTS",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "idx",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{tokenId}/balanceOfAtNFT": {
			"get": {
				"operationId": "GetBalanceOfAtNFT",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "block",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/totalSupplyAt": {
			"get": {
				"operationId": "GetTotalSupplyAt",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "block",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/totalSupplyAtT": {
			"get": {
				"operationId": "GetTotalSupplyAtT",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "t",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{account}/getPastVotes": {
			"get": {
				"operationId": "GetPastVotes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "timestamp",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/getPastTotalSupply": {
			"get": {
				"operationId": "GetPastTotalSupply",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "timestamp",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{account}/getVotes": {
			"get": {
				"operationId": "GetVotes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "account",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/nft/{delegator}/delegates": {
			"get": {
				"operationId": "GetDelegates",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNFTAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNFT"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "delegator",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/voter/totalWeight": {
			"get": {
				"operationId": "GetTotalWeight",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/voter/weights": {
			"get": {
				"operationId": "GetWeights",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "pool",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/voter/isGauge": {
			"get": {
				"operationId": "IsGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "gauge",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/voter/{address}/vote": {
			"post": {
				"operationId": "Vote",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeTheNftVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/voter/{address}/reset": {
			"post": {
				"operationId": "Reset",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeTheNftVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/voter/{address}/poke": {
			"post": {
				"operationId": "Poke",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeTheNftVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/voter/{address}/createGauge": {
			"post": {
				"operationId": "CreateGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeTheNftVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/voter/{address}/voteWithOptimalDistribution": {
			"post": {
				"operationId": "VoteWithOptimalDistribution",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/VeTheNftVoterInputBody"
									},
									{
										"properties": {
											"maxFusions": {
												"type": "number",
												"format": "double"
											},
											"totalVotes": {
												"type": "number",
												"format": "double"
											}
										},
										"required": [
											"totalVotes"
										],
										"type": "object"
									}
								]
							}
						}
					}
				}
			}
		},
		"/thena/voter/isWhitelisted": {
			"get": {
				"operationId": "IsWhitelisted",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_boolean_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenAddress",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/voter/lastVoted": {
			"get": {
				"operationId": "LastVoted",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/voter/poolVoteLength": {
			"get": {
				"operationId": "PoolVoteLength",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_string_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chainId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tokenId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/thena/voter/{address}/attachTokenToGauge": {
			"post": {
				"operationId": "AttachTokenToGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeTheNftVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/voter/{address}/detachTokenFromGauge": {
			"post": {
				"operationId": "DetachTokenFromGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeTheNftVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/voter/{address}/killGauge": {
			"post": {
				"operationId": "KillGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeTheNftVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/voter/{address}/reviveGauge": {
			"post": {
				"operationId": "ReviveGauge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeTheNftVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/voter/{address}/notifyRewardAmount": {
			"post": {
				"operationId": "NotifyRewardAmount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeTheNftVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/voter/{address}/distribute": {
			"post": {
				"operationId": "Distribute",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeTheNftVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/voter/{address}/claimBribes": {
			"post": {
				"operationId": "ClaimBribes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeTheNftVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/voter/{address}/claimFees": {
			"post": {
				"operationId": "ClaimFees",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeTheNftVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/voter/{address}/claimRewards": {
			"post": {
				"operationId": "ClaimRewards",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeTheNftVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/thena/voter/{address}/whitelist": {
			"post": {
				"operationId": "Whitelist",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_"
								}
							}
						}
					}
				},
				"tags": [
					"VeTheNftVoter"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VeTheNftVoterInputBody"
							}
						}
					}
				}
			}
		},
		"/tradingBot/configs": {
			"get": {
				"operationId": "GetConfigs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/BotConfigType"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"TradingBot"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": []
			}
		},
		"/tradingBot/{botId}/start": {
			"get": {
				"operationId": "StartBot",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"TradingBot"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tradingBot/{botId}/stop": {
			"get": {
				"operationId": "StopBot",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"TradingBot"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tradingBot/{botId}/activate": {
			"get": {
				"operationId": "ActivateBot",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"TradingBot"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tradingBot/{botId}/deactivate": {
			"get": {
				"operationId": "DeactivateBot",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"TradingBot"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tradingBot/{botId}/trigger": {
			"get": {
				"operationId": "TriggerBot",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"TradingBot"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tradingBot/{botId}/restart": {
			"get": {
				"operationId": "RestartBot",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"TradingBot"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tradingBot/{botId}/status": {
			"get": {
				"operationId": "GetBotStatus",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"TradingBot"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tradingBot/{botId}/lastRunResults": {
			"get": {
				"operationId": "GetBotLastRunResults",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"TradingBot"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tradingBot/{botId}/personality": {
			"patch": {
				"operationId": "UpdatePersonality",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BotConfigType"
								}
							}
						}
					}
				},
				"tags": [
					"TradingBot"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PersonalityInput"
							}
						}
					}
				}
			}
		},
		"/tradingBot/{botId}/twitter/createTweet": {
			"post": {
				"operationId": "CreateTweet",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BotConfigType"
								}
							}
						}
					}
				},
				"tags": [
					"TradingBot"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GeneratedTweet"
							}
						}
					}
				}
			}
		},
		"/tradingBot/{botId}/twitter/followingTimeline": {
			"get": {
				"operationId": "FollowingTimeline",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BotConfigType"
								}
							}
						}
					}
				},
				"tags": [
					"TradingBot"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tradingBot/{botId}/twitter/tweet/history": {
			"get": {
				"operationId": "TweetHistory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BotConfigType"
								}
							}
						}
					}
				},
				"tags": [
					"TradingBot"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tradingBot/{botId}/twitter/conversation/{tweetId}": {
			"get": {
				"operationId": "Conversation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BotConfigType"
								}
							}
						}
					}
				},
				"tags": [
					"TradingBot"
				],
				"security": [
					{
						"BearerAuth": []
					},
					{
						"Oauth2": []
					},
					{
						"ApiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "tweetId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "https://beta.usemoon.ai"
		}
	]
}