// This file is auto-generated by @hey-api/openapi-ts

import {
	createClient,
	createConfig,
	type Options,
} from "@hey-api/client-fetch";
import type {
	Aavev3PoolGetReserveDataData,
	Aavev3PoolGetReserveDataError,
	Aavev3PoolGetReserveDataResponse,
	Aavev3PoolGetUserAccountDataData,
	Aavev3PoolGetUserAccountDataError,
	Aavev3PoolGetUserAccountDataResponse,
	Aavev3PoolSupplyData,
	Aavev3PoolSupplyError,
	Aavev3PoolSupplyResponse,
	Aavev3PoolWithdrawData,
	Aavev3PoolWithdrawError,
	Aavev3PoolWithdrawResponse,
	Aavev3PoolBorrowData,
	Aavev3PoolBorrowError,
	Aavev3PoolBorrowResponse,
	Aavev3PoolRepayData,
	Aavev3PoolRepayError,
	Aavev3PoolRepayResponse,
	Aavev3PoolSetUserUseReserveAsCollateralData,
	Aavev3PoolSetUserUseReserveAsCollateralError,
	Aavev3PoolSetUserUseReserveAsCollateralResponse,
	Aavev3PoolLiquidationCallData,
	Aavev3PoolLiquidationCallError,
	Aavev3PoolLiquidationCallResponse,
	Aavev3PoolAddressProviderGetAclAdminData,
	Aavev3PoolAddressProviderGetAclAdminError,
	Aavev3PoolAddressProviderGetAclAdminResponse,
	Aavev3PoolAddressProviderGetAclManagerData,
	Aavev3PoolAddressProviderGetAclManagerError,
	Aavev3PoolAddressProviderGetAclManagerResponse,
	Aavev3PoolAddressProviderGetAddressData,
	Aavev3PoolAddressProviderGetAddressError,
	Aavev3PoolAddressProviderGetAddressResponse,
	Aavev3PoolAddressProviderGetMarketIdData,
	Aavev3PoolAddressProviderGetMarketIdError,
	Aavev3PoolAddressProviderGetMarketIdResponse,
	Aavev3PoolAddressProviderGetPoolData,
	Aavev3PoolAddressProviderGetPoolError,
	Aavev3PoolAddressProviderGetPoolResponse,
	Aavev3PoolAddressProviderGetPoolConfiguratorData,
	Aavev3PoolAddressProviderGetPoolConfiguratorError,
	Aavev3PoolAddressProviderGetPoolConfiguratorResponse,
	Aavev3PoolAddressProviderGetPriceOracleData,
	Aavev3PoolAddressProviderGetPriceOracleError,
	Aavev3PoolAddressProviderGetPriceOracleResponse,
	Aavev3PoolAddressProviderSetAclAdminData,
	Aavev3PoolAddressProviderSetAclAdminError,
	Aavev3PoolAddressProviderSetAclAdminResponse,
	Aavev3PoolAddressProviderSetAclManagerData,
	Aavev3PoolAddressProviderSetAclManagerError,
	Aavev3PoolAddressProviderSetAclManagerResponse,
	Aavev3PoolAddressProviderSetAddressData,
	Aavev3PoolAddressProviderSetAddressError,
	Aavev3PoolAddressProviderSetAddressResponse,
	Aavev3PoolAddressProviderSetMarketIdData,
	Aavev3PoolAddressProviderSetMarketIdError,
	Aavev3PoolAddressProviderSetMarketIdResponse,
	Aavev3PoolAddressProviderSetPoolConfiguratorImplData,
	Aavev3PoolAddressProviderSetPoolConfiguratorImplError,
	Aavev3PoolAddressProviderSetPoolConfiguratorImplResponse,
	Aavev3PoolAddressProviderSetPoolImplData,
	Aavev3PoolAddressProviderSetPoolImplError,
	Aavev3PoolAddressProviderSetPoolImplResponse,
	Aavev3PoolAddressProviderRegistryGetAddressesProviderData,
	Aavev3PoolAddressProviderRegistryGetAddressesProviderError,
	Aavev3PoolAddressProviderRegistryGetAddressesProviderResponse,
	Aavev3PoolAddressProviderRegistryGetAtokenTotalSupplyData,
	Aavev3PoolAddressProviderRegistryGetAtokenTotalSupplyError,
	Aavev3PoolAddressProviderRegistryGetAtokenTotalSupplyResponse,
	Aavev3PoolAddressProviderRegistryGetAllAtokensData,
	Aavev3PoolAddressProviderRegistryGetAllAtokensError,
	Aavev3PoolAddressProviderRegistryGetAllAtokensResponse,
	GetAllReservesTokensData,
	GetAllReservesTokensError,
	GetAllReservesTokensResponse,
	Aavev3PoolAddressProviderRegistryGetDebtCeilingData,
	Aavev3PoolAddressProviderRegistryGetDebtCeilingError,
	Aavev3PoolAddressProviderRegistryGetDebtCeilingResponse,
	AavEv3RewardsGetRewardsByAssetData,
	AavEv3RewardsGetRewardsByAssetError,
	AavEv3RewardsGetRewardsByAssetResponse,
	AavEv3RewardsGetUserRewardsData,
	AavEv3RewardsGetUserRewardsError,
	AavEv3RewardsGetUserRewardsResponse,
	AavEv3RewardsGetRewardsDataData,
	AavEv3RewardsGetRewardsDataError,
	AavEv3RewardsGetRewardsDataResponse,
	AavEv3RewardsClaimRewardsData,
	AavEv3RewardsClaimRewardsError,
	AavEv3RewardsClaimRewardsResponse,
	AavEv3RewardsClaimRewardsOnBehalfData,
	AavEv3RewardsClaimRewardsOnBehalfError,
	AavEv3RewardsClaimRewardsOnBehalfResponse,
	AavEv3RewardsClaimRewardsToSelfData,
	AavEv3RewardsClaimRewardsToSelfError,
	AavEv3RewardsClaimRewardsToSelfResponse,
	AavEv3RewardsClaimAllRewardsData,
	AavEv3RewardsClaimAllRewardsError,
	AavEv3RewardsClaimAllRewardsResponse,
	AavEv3RewardsClaimAllRewardsOnBehalfData,
	AavEv3RewardsClaimAllRewardsOnBehalfError,
	AavEv3RewardsClaimAllRewardsOnBehalfResponse,
	AavEv3RewardsClaimAllRewardsToSelfData,
	AavEv3RewardsClaimAllRewardsToSelfError,
	AavEv3RewardsClaimAllRewardsToSelfResponse,
	AavEv3IncentiveDataProviderGetFullReservesDataData,
	AavEv3IncentiveDataProviderGetFullReservesDataError,
	AavEv3IncentiveDataProviderGetFullReservesDataResponse,
	AavEv3IncentiveDataProviderGetReservesDataData,
	AavEv3IncentiveDataProviderGetReservesDataError,
	AavEv3IncentiveDataProviderGetReservesDataResponse,
	AavEv3IncentiveDataProviderGetUserReservesDataData,
	AavEv3IncentiveDataProviderGetUserReservesDataError,
	AavEv3IncentiveDataProviderGetUserReservesDataResponse,
	AaveV3UiPoolDataProviderEthCurrencyUnitData,
	AaveV3UiPoolDataProviderEthCurrencyUnitError,
	AaveV3UiPoolDataProviderEthCurrencyUnitResponse,
	GetReservesDataData,
	GetReservesDataError,
	GetReservesDataResponse,
	AaveV3UiPoolDataProviderReservesListData,
	AaveV3UiPoolDataProviderReservesListError,
	AaveV3UiPoolDataProviderReservesListResponse,
	AaveV3UiPoolDataProviderUserReservesDataData,
	AaveV3UiPoolDataProviderUserReservesDataError,
	AaveV3UiPoolDataProviderUserReservesDataResponse,
	AaveV3UiPoolDataProviderMarketReferenceCurrencyPriceInUsdProxyAggregatorData,
	AaveV3UiPoolDataProviderMarketReferenceCurrencyPriceInUsdProxyAggregatorError,
	AaveV3UiPoolDataProviderMarketReferenceCurrencyPriceInUsdProxyAggregatorResponse,
	AaveV3UiPoolDataProviderNetworkBaseTokenPriceInUsdProxyAggregatorData,
	AaveV3UiPoolDataProviderNetworkBaseTokenPriceInUsdProxyAggregatorError,
	AaveV3UiPoolDataProviderNetworkBaseTokenPriceInUsdProxyAggregatorResponse,
	AaveV3WalletBalanceOfData,
	AaveV3WalletBalanceOfError,
	AaveV3WalletBalanceOfResponse,
	AaveV3WalletBatchBalanceOfData,
	AaveV3WalletBatchBalanceOfError,
	AaveV3WalletBatchBalanceOfResponse,
	AaveV3WalletUserWalletBalancesData,
	AaveV3WalletUserWalletBalancesError,
	AaveV3WalletUserWalletBalancesResponse,
	AccountsCreateEthereumAccountData,
	AccountsCreateEthereumAccountError,
	AccountsCreateEthereumAccountResponse,
	AccountsListEthereumAccountsData,
	AccountsListEthereumAccountsError,
	AccountsListEthereumAccountsResponse,
	AccountsGetEthreumAccountData,
	AccountsGetEthreumAccountError,
	AccountsGetEthreumAccountResponse,
	AccountsDeleteEthereumAccountData,
	AccountsDeleteEthereumAccountError,
	AccountsDeleteEthereumAccountResponse,
	AccountsEthereumGetNonceData,
	AccountsEthereumGetNonceError,
	AccountsEthereumGetNonceResponse,
	AccountsEthereumGetNativeBalanceData,
	AccountsEthereumGetNativeBalanceError,
	AccountsEthereumGetNativeBalanceResponse,
	AccountsSuggestGasPriceData,
	AccountsSuggestGasPriceError,
	AccountsSuggestGasPriceResponse,
	AccountsEstimateGasData,
	AccountsEstimateGasError,
	AccountsEstimateGasResponse,
	AccountsTransferEthData,
	AccountsTransferEthError,
	AccountsTransferEthResponse,
	AccountsSignEthreumMessageData,
	AccountsSignEthreumMessageError,
	AccountsSignEthreumMessageResponse,
	AccountsSignEthereumTransactionData,
	AccountsSignEthereumTransactionError,
	AccountsSignEthereumTransactionResponse,
	AccountsExportEthreumAccountData,
	AccountsExportEthreumAccountError,
	AccountsExportEthreumAccountResponse,
	AccountsSignEthereumTypedDataData,
	AccountsSignEthereumTypedDataError,
	AccountsSignEthereumTypedDataResponse,
	AccountsDeployContractData,
	AccountsDeployContractError,
	AccountsDeployContractResponse,
	AccountsBroadcastEthreeumTransactionData,
	AccountsBroadcastEthreeumTransactionError,
	AccountsBroadcastEthreeumTransactionResponse,
	AccountsEncodeAbiDataData,
	AccountsEncodeAbiDataError,
	AccountsEncodeAbiDataResponse,
	BitcoinListAccountsData,
	BitcoinListAccountsError,
	BitcoinListAccountsResponse,
	BitcoinBitcoinCreateAccountData,
	BitcoinBitcoinCreateAccountError,
	BitcoinBitcoinCreateAccountResponse,
	BitcoinBitcoinGetAccountData,
	BitcoinBitcoinGetAccountError,
	BitcoinBitcoinGetAccountResponse,
	BitcoinBitcoinSignTransactionData,
	BitcoinBitcoinSignTransactionError,
	BitcoinBitcoinSignTransactionResponse,
	BitcoinBitcoinCreateSrc20InscriptionData,
	BitcoinBitcoinCreateSrc20InscriptionError,
	BitcoinBitcoinCreateSrc20InscriptionResponse,
	BitcoinBitcoinCreateBrc20TransactionData,
	BitcoinBitcoinCreateBrc20TransactionError,
	BitcoinBitcoinCreateBrc20TransactionResponse,
	BitcoinBitcoinGenerateUnsignedPsbtHexData,
	BitcoinBitcoinGenerateUnsignedPsbtHexError,
	BitcoinBitcoinGenerateUnsignedPsbtHexResponse,
	BitcoinBitcoinExportAccountData,
	BitcoinBitcoinExportAccountError,
	BitcoinBitcoinExportAccountResponse,
	BitcoinBitcoinDeleteAccountData,
	BitcoinBitcoinDeleteAccountError,
	BitcoinBitcoinDeleteAccountResponse,
	BitcoinCashListAccountsData,
	BitcoinCashListAccountsError,
	BitcoinCashListAccountsResponse,
	BitcoinCashBitcoinCashCreateAccountData,
	BitcoinCashBitcoinCashCreateAccountError,
	BitcoinCashBitcoinCashCreateAccountResponse,
	BitcoinCashBitcoinCashGetAccountData,
	BitcoinCashBitcoinCashGetAccountError,
	BitcoinCashBitcoinCashGetAccountResponse,
	BitcoinCashBitcoinCashExportAccountData,
	BitcoinCashBitcoinCashExportAccountError,
	BitcoinCashBitcoinCashExportAccountResponse,
	BitcoinCashBitcoinCashDeleteAccountData,
	BitcoinCashBitcoinCashDeleteAccountError,
	BitcoinCashBitcoinCashDeleteAccountResponse,
	BitcoinCashBitcoinCashSignTransactionData,
	BitcoinCashBitcoinCashSignTransactionError,
	BitcoinCashBitcoinCashSignTransactionResponse,
	BitcoinCashBitcoinCashSignTransactionWithMemoData,
	BitcoinCashBitcoinCashSignTransactionWithMemoError,
	BitcoinCashBitcoinCashSignTransactionWithMemoResponse,
	BitcoinCashBitcoinCashSignBitcoinTransactionData,
	BitcoinCashBitcoinCashSignBitcoinTransactionError,
	BitcoinCashBitcoinCashSignBitcoinTransactionResponse,
	BitcoinCashBitcoinCashGenerateUnsignedPsbtHexData,
	BitcoinCashBitcoinCashGenerateUnsignedPsbtHexError,
	BitcoinCashBitcoinCashGenerateUnsignedPsbtHexResponse,
	BitcoinCashBitcoinCashSignPsbtWithKeyPathAndScriptPathData,
	BitcoinCashBitcoinCashSignPsbtWithKeyPathAndScriptPathError,
	BitcoinCashBitcoinCashSignPsbtWithKeyPathAndScriptPathResponse,
	ChartsGetChartAnalysisData,
	ChartsGetChartAnalysisError,
	ChartsGetChartAnalysisResponse,
	ComponentsGetComponentsData,
	ComponentsGetComponentsError,
	ComponentsGetComponentsResponse,
	ComponentsCreateComponentData,
	ComponentsCreateComponentError,
	ComponentsCreateComponentResponse,
	ComponentsGetComponentData,
	ComponentsGetComponentError,
	ComponentsGetComponentResponse,
	ComponentsUpdateComponentData,
	ComponentsUpdateComponentError,
	ComponentsUpdateComponentResponse,
	ComponentsSearchComponentsData,
	ComponentsSearchComponentsError,
	ComponentsSearchComponentsResponse,
	ComponentsUpdateEmbeddingData,
	ComponentsUpdateEmbeddingError,
	ComponentsUpdateEmbeddingResponse,
	ComponentsForceEmbeddingData,
	ComponentsForceEmbeddingError,
	ComponentsForceEmbeddingResponse,
	ComponentsGetComponentCapabilitiesDescriptionData,
	ComponentsGetComponentCapabilitiesDescriptionError,
	ComponentsGetComponentCapabilitiesDescriptionResponse,
	CosmosCosmosListAccountsData,
	CosmosCosmosListAccountsError,
	CosmosCosmosListAccountsResponse,
	CosmosCosmosCreateAccountData,
	CosmosCosmosCreateAccountError,
	CosmosCosmosCreateAccountResponse,
	CosmosCosmosGetAccountData,
	CosmosCosmosGetAccountError,
	CosmosCosmosGetAccountResponse,
	CosmosCosmosDeleteAccountData,
	CosmosCosmosDeleteAccountError,
	CosmosCosmosDeleteAccountResponse,
	CosmosCosmosExportAccountData,
	CosmosCosmosExportAccountError,
	CosmosCosmosExportAccountResponse,
	CosmosCosmosSignTransferTransactionData,
	CosmosCosmosSignTransferTransactionError,
	CosmosCosmosSignTransferTransactionResponse,
	CosmosCosmosSignMessageData,
	CosmosCosmosSignMessageError,
	CosmosCosmosSignMessageResponse,
	CosmosCosmosSignIbcTransferTransactionData,
	CosmosCosmosSignIbcTransferTransactionError,
	CosmosCosmosSignIbcTransferTransactionResponse,
	DataGetWalletTokenBalancesData,
	DataGetWalletTokenBalancesError,
	DataGetWalletTokenBalancesResponse,
	DataGetWalletTransactionHistoryData,
	DataGetWalletTransactionHistoryError,
	DataGetWalletTransactionHistoryResponse,
	DataGetTokensMetadataData,
	DataGetTokensMetadataError,
	DataGetTokensMetadataResponse,
	DataGetWalletNfTsData,
	DataGetWalletNfTsError,
	DataGetWalletNfTsResponse,
	DataGetUserWalletPortfolioData,
	DataGetUserWalletPortfolioError,
	DataGetUserWalletPortfolioResponse,
	DataGetPortfolioFetchStatusData,
	DataGetPortfolioFetchStatusError,
	DataGetPortfolioFetchStatusResponse,
	DataExecuteCustomSupabaseQueryData,
	DataExecuteCustomSupabaseQueryError,
	DataExecuteCustomSupabaseQueryResponse,
	DogeCoinListAccountsData,
	DogeCoinListAccountsError,
	DogeCoinListAccountsResponse,
	DogecoinDogeCoinCreateNewAccountData,
	DogecoinDogeCoinCreateNewAccountError,
	DogecoinDogeCoinCreateNewAccountResponse,
	DogecoinDogeCoinGetAccountDetailsData,
	DogecoinDogeCoinGetAccountDetailsError,
	DogecoinDogeCoinGetAccountDetailsResponse,
	DogecoinDogeCoinSignTransactionData,
	DogecoinDogeCoinSignTransactionError,
	DogecoinDogeCoinSignTransactionResponse,
	DogecoinDogeCoinExportAccountDetailsData,
	DogecoinDogeCoinExportAccountDetailsError,
	DogecoinDogeCoinExportAccountDetailsResponse,
	DogecoinDogeCoinDeleteAccountData,
	DogecoinDogeCoinDeleteAccountError,
	DogecoinDogeCoinDeleteAccountResponse,
	DogecoinDogeCoinSignTransactionWithMemoData,
	DogecoinDogeCoinSignTransactionWithMemoError,
	DogecoinDogeCoinSignTransactionWithMemoResponse,
	EnsResolveData,
	EnsResolveError,
	EnsResolveResponse2,
	EnsReverseResolveData,
	EnsReverseResolveError,
	EnsReverseResolveResponse,
	ListEosAccountsData,
	ListEosAccountsError,
	ListEosAccountsResponse,
	CreateEosAccountData,
	CreateEosAccountError,
	CreateEosAccountResponse,
	GetEosAccountData,
	GetEosAccountError,
	GetEosAccountResponse,
	SignEosTransactionData,
	SignEosTransactionError,
	SignEosTransactionResponse,
	ExportEosAccountData,
	ExportEosAccountError,
	ExportEosAccountResponse,
	DeleteEosAccountData,
	DeleteEosAccountError,
	DeleteEosAccountResponse,
	Erc1155Erc1155BalanceOfData,
	Erc1155Erc1155BalanceOfError,
	Erc1155Erc1155BalanceOfResponse,
	Erc1155Erc1155BalanceOfBatchData,
	Erc1155Erc1155BalanceOfBatchError,
	Erc1155Erc1155BalanceOfBatchResponse,
	Erc1155Erc1155SetApprovalForAllData,
	Erc1155Erc1155SetApprovalForAllError,
	Erc1155Erc1155SetApprovalForAllResponse,
	Erc1155Erc1155IsApprovedForAllData,
	Erc1155Erc1155IsApprovedForAllError,
	Erc1155Erc1155IsApprovedForAllResponse,
	Erc1155Erc1155SafeTransferFromData,
	Erc1155Erc1155SafeTransferFromError,
	Erc1155Erc1155SafeTransferFromResponse,
	Erc1155Erc1155SafeBatchTransferFromData,
	Erc1155Erc1155SafeBatchTransferFromError,
	Erc1155Erc1155SafeBatchTransferFromResponse,
	Erc20GetErc20TokenDecimalsData,
	Erc20GetErc20TokenDecimalsError,
	Erc20GetErc20TokenDecimalsResponse,
	Erc20GetErc20TokenSymbolData,
	Erc20GetErc20TokenSymbolError,
	Erc20GetErc20TokenSymbolResponse,
	Erc20GetErc20TokenNameData,
	Erc20GetErc20TokenNameError,
	Erc20GetErc20TokenNameResponse,
	Erc20GetErc20TokenTotalSupplyData,
	Erc20GetErc20TokenTotalSupplyError,
	Erc20GetErc20TokenTotalSupplyResponse,
	Erc20GetErc20TokenBalanceData,
	Erc20GetErc20TokenBalanceError,
	Erc20GetErc20TokenBalanceResponse,
	Erc20GetErc20TokenAllowanceData,
	Erc20GetErc20TokenAllowanceError,
	Erc20GetErc20TokenAllowanceResponse,
	Erc20ApproveErc20TokenSpendingData,
	Erc20ApproveErc20TokenSpendingError,
	Erc20ApproveErc20TokenSpendingResponse,
	Erc20TransferErc20TokenData,
	Erc20TransferErc20TokenError,
	Erc20TransferErc20TokenResponse,
	Erc20TransferFromErc20TokenData,
	Erc20TransferFromErc20TokenError,
	Erc20TransferFromErc20TokenResponse,
	Erc4626GetErc4626AssetData,
	Erc4626GetErc4626AssetError,
	Erc4626GetErc4626AssetResponse,
	Erc4626GetErc4626TotalAssetsData,
	Erc4626GetErc4626TotalAssetsError,
	Erc4626GetErc4626TotalAssetsResponse,
	Erc4626GetErc4626ConvertToSharesData,
	Erc4626GetErc4626ConvertToSharesError,
	Erc4626GetErc4626ConvertToSharesResponse,
	Erc4626GetErc4626ConvertToAssetsData,
	Erc4626GetErc4626ConvertToAssetsError,
	Erc4626GetErc4626ConvertToAssetsResponse,
	Erc4626GetErc4626MaxDepositData,
	Erc4626GetErc4626MaxDepositError,
	Erc4626GetErc4626MaxDepositResponse,
	Erc4626DepositToErc4626Data,
	Erc4626DepositToErc4626Error,
	Erc4626DepositToErc4626Response,
	Erc4626WithdrawFromErc4626Data,
	Erc4626WithdrawFromErc4626Error,
	Erc4626WithdrawFromErc4626Response,
	Erc4626GetErc4626MaxMintData,
	Erc4626GetErc4626MaxMintError,
	Erc4626GetErc4626MaxMintResponse,
	Erc4626GetErc4626MaxWithdrawData,
	Erc4626GetErc4626MaxWithdrawError,
	Erc4626GetErc4626MaxWithdrawResponse,
	Erc4626GetErc4626MaxRedeemData,
	Erc4626GetErc4626MaxRedeemError,
	Erc4626GetErc4626MaxRedeemResponse,
	Erc4626GetErc4626PreviewDepositData,
	Erc4626GetErc4626PreviewDepositError,
	Erc4626GetErc4626PreviewDepositResponse,
	Erc4626GetErc4626PreviewMintData,
	Erc4626GetErc4626PreviewMintError,
	Erc4626GetErc4626PreviewMintResponse,
	Erc4626GetErc4626PreviewWithdrawData,
	Erc4626GetErc4626PreviewWithdrawError,
	Erc4626GetErc4626PreviewWithdrawResponse,
	Erc4626GetErc4626PreviewRedeemData,
	Erc4626GetErc4626PreviewRedeemError,
	Erc4626GetErc4626PreviewRedeemResponse,
	Erc4626MintErc4626SharesData,
	Erc4626MintErc4626SharesError,
	Erc4626MintErc4626SharesResponse,
	Erc4626RedeemErc4626SharesData,
	Erc4626RedeemErc4626SharesError,
	Erc4626RedeemErc4626SharesResponse,
	Erc4626GetErc4626TotalSupplyData,
	Erc4626GetErc4626TotalSupplyError,
	Erc4626GetErc4626TotalSupplyResponse,
	Erc4626GetErc4626BalanceOfData,
	Erc4626GetErc4626BalanceOfError,
	Erc4626GetErc4626BalanceOfResponse,
	Erc4626GetErc4626AllowanceData,
	Erc4626GetErc4626AllowanceError,
	Erc4626GetErc4626AllowanceResponse,
	Erc4626ApproveErc4626Data,
	Erc4626ApproveErc4626Error,
	Erc4626ApproveErc4626Response,
	Erc4626TransferErc4626Data,
	Erc4626TransferErc4626Error,
	Erc4626TransferErc4626Response,
	Erc4626TransferFromErc4626Data,
	Erc4626TransferFromErc4626Error,
	Erc4626TransferFromErc4626Response,
	Erc721GetErc721BalanceOfData,
	Erc721GetErc721BalanceOfError,
	Erc721GetErc721BalanceOfResponse,
	Erc721GetErc721OwnerOfData,
	Erc721GetErc721OwnerOfError,
	Erc721GetErc721OwnerOfResponse,
	Erc721GetErc721NameData,
	Erc721GetErc721NameError,
	Erc721GetErc721NameResponse,
	Erc721GetErc721SymbolData,
	Erc721GetErc721SymbolError,
	Erc721GetErc721SymbolResponse,
	Erc721GetErc721TokenUriData,
	Erc721GetErc721TokenUriError,
	Erc721GetErc721TokenUriResponse,
	Erc721GetErc721ApprovedData,
	Erc721GetErc721ApprovedError,
	Erc721GetErc721ApprovedResponse,
	Erc721GetErc721IsApprovedForAllData,
	Erc721GetErc721IsApprovedForAllError,
	Erc721GetErc721IsApprovedForAllResponse,
	Erc721ApproveErc721Data,
	Erc721ApproveErc721Error,
	Erc721ApproveErc721Response,
	Erc721SetApprovalForAllErc721Data,
	Erc721SetApprovalForAllErc721Error,
	Erc721SetApprovalForAllErc721Response,
	Erc721TransferFromErc721Data,
	Erc721TransferFromErc721Error,
	Erc721TransferFromErc721Response,
	Erc721SafeTransferFromErc721Data,
	Erc721SafeTransferFromErc721Error,
	Erc721SafeTransferFromErc721Response,
	Erc721SafeTransferFromWithDataErc721Data,
	Erc721SafeTransferFromWithDataErc721Error,
	Erc721SafeTransferFromWithDataErc721Response,
	FinancialDatasetsGetCompanyFactsData,
	FinancialDatasetsGetCompanyFactsError,
	FinancialDatasetsGetCompanyFactsResponse,
	FinancialDatasetsGetIncomeStatementsData,
	FinancialDatasetsGetIncomeStatementsError,
	FinancialDatasetsGetIncomeStatementsResponse,
	FinancialDatasetsGetBalanceSheetsData,
	FinancialDatasetsGetBalanceSheetsError,
	FinancialDatasetsGetBalanceSheetsResponse,
	FinancialDatasetsGetCashFlowStatementsData,
	FinancialDatasetsGetCashFlowStatementsError,
	FinancialDatasetsGetCashFlowStatementsResponse,
	FinancialDatasetsGetSegmentedRevenuesData,
	FinancialDatasetsGetSegmentedRevenuesError,
	FinancialDatasetsGetSegmentedRevenuesResponse,
	FinancialDatasetsGetAllFinancialsData,
	FinancialDatasetsGetAllFinancialsError,
	FinancialDatasetsGetAllFinancialsResponse,
	FinancialDatasetsGetAvailableTickersData,
	FinancialDatasetsGetAvailableTickersError,
	FinancialDatasetsGetAvailableTickersResponse,
	FinancialDatasetsGetInsiderTransactionsData,
	FinancialDatasetsGetInsiderTransactionsError,
	FinancialDatasetsGetInsiderTransactionsResponse,
	FinancialDatasetsGetOptionsChainData,
	FinancialDatasetsGetOptionsChainError,
	FinancialDatasetsGetOptionsChainResponse,
	FinancialDatasetsGetPricesData,
	FinancialDatasetsGetPricesError,
	FinancialDatasetsGetPricesResponse,
	FinancialDatasetsSearchFinancialsData,
	FinancialDatasetsSearchFinancialsError,
	FinancialDatasetsSearchFinancialsResponse,
	FinancialDatasetsGetPriceSnapshotData,
	FinancialDatasetsGetPriceSnapshotError,
	FinancialDatasetsGetPriceSnapshotResponse,
	FinancialDatasetsSearchFinancialsByLineItemsData,
	FinancialDatasetsSearchFinancialsByLineItemsError,
	FinancialDatasetsSearchFinancialsByLineItemsResponse,
	JupiterGetProgramIdToLabelData,
	JupiterGetProgramIdToLabelError,
	JupiterGetProgramIdToLabelResponse,
	JupiterGetIndexedRouteMapData,
	JupiterGetIndexedRouteMapError,
	JupiterGetIndexedRouteMapResponse,
	JupiterGetTokensData,
	JupiterGetTokensError,
	JupiterGetTokensResponse,
	JupiterGetQuoteData,
	JupiterGetQuoteError,
	JupiterGetQuoteResponse,
	JupiterSwapData,
	JupiterSwapError,
	JupiterSwapResponse,
	JupiterGetSwapInstructionsData,
	JupiterGetSwapInstructionsError,
	JupiterGetSwapInstructionsResponse,
	LendingPoolGetFlashLoanPremiumTotalData,
	LendingPoolGetFlashLoanPremiumTotalError,
	LendingPoolGetFlashLoanPremiumTotalResponse,
	LendingPoolGetLendingPoolRevisionData,
	LendingPoolGetLendingPoolRevisionError,
	LendingPoolGetLendingPoolRevisionResponse,
	LendingPoolGetMaxNumberReservesData,
	LendingPoolGetMaxNumberReservesError,
	LendingPoolGetMaxNumberReservesResponse,
	LendingPoolGetMaxStableRateBorrowSizePercentData,
	LendingPoolGetMaxStableRateBorrowSizePercentError,
	LendingPoolGetMaxStableRateBorrowSizePercentResponse,
	LendingPoolBorrowData,
	LendingPoolBorrowError,
	LendingPoolBorrowResponse,
	LendingPoolDepositData,
	LendingPoolDepositError,
	LendingPoolDepositResponse,
	LendingPoolFlashLoanData,
	LendingPoolFlashLoanError,
	LendingPoolFlashLoanResponse,
	LendingPoolRepayData,
	LendingPoolRepayError,
	LendingPoolRepayResponse,
	LendingPoolSwapBorrowRateModeData,
	LendingPoolSwapBorrowRateModeError,
	LendingPoolSwapBorrowRateModeResponse,
	LendingPoolSetUserUseReserveAsCollateralData,
	LendingPoolSetUserUseReserveAsCollateralError,
	LendingPoolSetUserUseReserveAsCollateralResponse,
	LendingPoolLiquidationCallData,
	LendingPoolLiquidationCallError,
	LendingPoolLiquidationCallResponse,
	LendingPoolGetReserveDataData,
	LendingPoolGetReserveDataError,
	LendingPoolGetReserveDataResponse,
	LendingPoolGetUserAccountDataData,
	LendingPoolGetUserAccountDataError,
	LendingPoolGetUserAccountDataResponse,
	LendingPoolGetReservesListData,
	LendingPoolGetReservesListError,
	LendingPoolGetReservesListResponse,
	LendingPoolGetAddressesProviderData,
	LendingPoolGetAddressesProviderError,
	LendingPoolGetAddressesProviderResponse,
	LendingPoolIsPausedData,
	LendingPoolIsPausedError,
	LendingPoolIsPausedResponse,
	LeveragerGetAddressesProviderData,
	LeveragerGetAddressesProviderError,
	LeveragerGetAddressesProviderResponse,
	LeveragerGetDefaultAdminRoleData,
	LeveragerGetDefaultAdminRoleError,
	LeveragerGetDefaultAdminRoleResponse,
	LeveragerGetLendingPoolData,
	LeveragerGetLendingPoolError,
	LeveragerGetLendingPoolResponse,
	LeveragerGetMinHfData,
	LeveragerGetMinHfError,
	LeveragerGetMinHfResponse,
	LeveragerIsPausedData,
	LeveragerIsPausedError,
	LeveragerIsPausedResponse,
	LeveragerGetWethData,
	LeveragerGetWethError,
	LeveragerGetWethResponse,
	LeveragerGetRoleAdminData,
	LeveragerGetRoleAdminError,
	LeveragerGetRoleAdminResponse,
	LeveragerHasRoleData,
	LeveragerHasRoleError,
	LeveragerHasRoleResponse,
	LeveragerSupportsInterfaceData,
	LeveragerSupportsInterfaceError,
	LeveragerSupportsInterfaceResponse,
	LeveragerDeleverageErc20Data,
	LeveragerDeleverageErc20Error,
	LeveragerDeleverageErc20Response,
	LeveragerDeleverageNativeData,
	LeveragerDeleverageNativeError,
	LeveragerDeleverageNativeResponse,
	LeveragerExecuteOperationData,
	LeveragerExecuteOperationError,
	LeveragerExecuteOperationResponse,
	LeveragerGrantRoleData,
	LeveragerGrantRoleError,
	LeveragerGrantRoleResponse,
	LeveragerLeverageErc20Data,
	LeveragerLeverageErc20Error,
	LeveragerLeverageErc20Response,
	LeveragerLeverageNativeData,
	LeveragerLeverageNativeError,
	LeveragerLeverageNativeResponse,
	LeveragerPauseData,
	LeveragerPauseError,
	LeveragerPauseResponse,
	LeveragerRenounceRoleData,
	LeveragerRenounceRoleError,
	LeveragerRenounceRoleResponse,
	LeveragerRevokeRoleData,
	LeveragerRevokeRoleError,
	LeveragerRevokeRoleResponse,
	LeveragerUnpauseData,
	LeveragerUnpauseError,
	LeveragerUnpauseResponse,
	LifiGetQuoteData,
	LifiGetQuoteError,
	LifiGetQuoteResponse,
	LifiPostQuoteData,
	LifiPostQuoteError,
	LifiPostQuoteResponse,
	LifiGetStatusData,
	LifiGetStatusError,
	LifiGetStatusResponse,
	LifiGetChainsData,
	LifiGetChainsError,
	LifiGetChainsResponse,
	GetToolsData,
	GetToolsError,
	GetToolsResponse,
	LifiGetTokensError,
	LifiGetTokensResponse,
	LifiGetTokenDetailsData,
	LifiGetTokenDetailsError,
	LifiGetTokenDetailsResponse,
	LifiGetConnectionsData,
	LifiGetConnectionsError,
	LifiGetConnectionsResponse,
	LifiGetAllPossibleConnectionsData,
	LifiGetAllPossibleConnectionsError,
	LifiGetAllPossibleConnectionsResponse,
	ListLitecoinAccountsData,
	ListLitecoinAccountsError,
	ListLitecoinAccountsResponse,
	LitecoinCreateLitecoinAccountData,
	LitecoinCreateLitecoinAccountError,
	LitecoinCreateLitecoinAccountResponse,
	LitecoinGetLitecoinAccountData,
	LitecoinGetLitecoinAccountError,
	LitecoinGetLitecoinAccountResponse,
	LitecoinSignLitecoinTransactionData,
	LitecoinSignLitecoinTransactionError,
	LitecoinSignLitecoinTransactionResponse,
	LitecoinExportLitecoinAccountData,
	LitecoinExportLitecoinAccountError,
	LitecoinExportLitecoinAccountResponse,
	LitecoinDeleteLitecoinAccountData,
	LitecoinDeleteLitecoinAccountError,
	LitecoinDeleteLitecoinAccountResponse,
	LitecoinSignLitecoinTransactionWithMemoData,
	LitecoinSignLitecoinTransactionWithMemoError,
	LitecoinSignLitecoinTransactionWithMemoResponse,
	GetAssetsData,
	GetAssetsError,
	GetAssetsResponse,
	GetAssetByAddressData,
	GetAssetByAddressError,
	GetAssetByAddressResponse,
	GetPoolsData,
	GetPoolsError,
	GetPoolsResponse,
	GetPoolByAddressData,
	GetPoolByAddressError,
	GetPoolByAddressResponse,
	GetPoolsByTypeData,
	GetPoolsByTypeError,
	GetPoolsByTypeResponse,
	GetTopAprPoolsData,
	GetTopAprPoolsError,
	GetTopAprPoolsResponse,
	GetTotalValueLockedData,
	GetTotalValueLockedError,
	GetTotalValueLockedResponse,
	CalculateOptimalVoteDistributionData,
	CalculateOptimalVoteDistributionError,
	CalculateOptimalVoteDistributionResponse,
	GetBalanceOfData,
	GetBalanceOfError,
	GetBalanceOfResponse,
	GetOwnerOfData,
	GetOwnerOfError,
	GetOwnerOfResponse,
	GetTokenUriData,
	GetTokenUriError,
	GetTokenUriResponse,
	GetLockDetailsData,
	GetLockDetailsError,
	GetLockDetailsResponse,
	CreateLockData,
	CreateLockError,
	CreateLockResponse,
	IncreaseLockAmountData,
	IncreaseLockAmountError,
	IncreaseLockAmountResponse,
	IncreaseUnlockTimeData,
	IncreaseUnlockTimeError,
	IncreaseUnlockTimeResponse,
	GetTotalSupplyData,
	GetTotalSupplyError,
	GetTotalSupplyResponse,
	GetTokenOfOwnerByIndexData,
	GetTokenOfOwnerByIndexError,
	GetTokenOfOwnerByIndexResponse,
	GetTokenByIndexData,
	GetTokenByIndexError,
	GetTokenByIndexResponse,
	DelegateData,
	DelegateError,
	DelegateResponse,
	MergeData,
	MergeError,
	MergeResponse,
	SplitData,
	SplitError,
	SplitResponse,
	ClaimData,
	ClaimError,
	ClaimResponse,
	UnlockPermanentData,
	UnlockPermanentError,
	UnlockPermanentResponse,
	GetNameData,
	GetNameError,
	GetNameResponse,
	GetSymbolData,
	GetSymbolError,
	GetSymbolResponse,
	GetApprovedData,
	GetApprovedError,
	GetApprovedResponse,
	IsApprovedForAllData,
	IsApprovedForAllError,
	IsApprovedForAllResponse,
	GetBalanceOfNftData,
	GetBalanceOfNftError,
	GetBalanceOfNftResponse,
	GetBalanceOfNftAtData,
	GetBalanceOfNftAtError,
	GetBalanceOfNftAtResponse,
	GetTotalNftsMintedData,
	GetTotalNftsMintedError,
	GetTotalNftsMintedResponse,
	GetDelegatesData,
	GetDelegatesError,
	GetDelegatesResponse,
	GetVotesData,
	GetVotesError,
	GetVotesResponse,
	GetPastVotesData,
	GetPastVotesError,
	GetPastVotesResponse,
	GetVestedPayoutData,
	GetVestedPayoutError,
	GetVestedPayoutResponse,
	GetVestedPayoutAtTimeData,
	GetVestedPayoutAtTimeError,
	GetVestedPayoutAtTimeResponse,
	GetVestingPayoutData,
	GetVestingPayoutError,
	GetVestingPayoutResponse,
	GetVestingPeriodData,
	GetVestingPeriodError,
	GetVestingPeriodResponse,
	ApproveData,
	ApproveError,
	ApproveResponse,
	SetApprovalForAllData,
	SetApprovalForAllError,
	SetApprovalForAllResponse,
	TransferFromData,
	TransferFromError,
	TransferFromResponse,
	SafeTransferFromData,
	SafeTransferFromError,
	SafeTransferFromResponse,
	BurnData,
	BurnError,
	BurnResponse,
	CreateDelegatedLockForData,
	CreateDelegatedLockForError,
	CreateDelegatedLockForResponse,
	CreateLockForData,
	CreateLockForError,
	CreateLockForResponse,
	CheckpointData,
	CheckpointError,
	CheckpointResponse,
	CheckpointDelegateeData,
	CheckpointDelegateeError,
	CheckpointDelegateeResponse,
	SetClaimApprovalData,
	SetClaimApprovalError,
	SetClaimApprovalResponse,
	SetClaimApprovalForAllData,
	SetClaimApprovalForAllError,
	SetClaimApprovalForAllResponse,
	DelegateBySigData,
	DelegateBySigError,
	DelegateBySigResponse,
	GlobalCheckpointData,
	GlobalCheckpointError,
	GlobalCheckpointResponse,
	GetFactoryData,
	GetFactoryError,
	GetFactoryResponse,
	GetWethData,
	GetWethError,
	GetWethResponse,
	GetAmountOutData,
	GetAmountOutError,
	GetAmountOutResponse,
	GetAmountsOutData,
	GetAmountsOutError,
	GetAmountsOutResponse,
	AddLiquidityData,
	AddLiquidityError,
	AddLiquidityResponse,
	AddLiquidityEthData,
	AddLiquidityEthError,
	AddLiquidityEthResponse,
	SwapExactTokensForTokensData,
	SwapExactTokensForTokensError,
	SwapExactTokensForTokensResponse,
	SwapExactEthForTokensData,
	SwapExactEthForTokensError,
	SwapExactEthForTokensResponse,
	SwapExactTokensForEthData,
	SwapExactTokensForEthError,
	SwapExactTokensForEthResponse,
	GetTotalWeightData,
	GetTotalWeightError,
	GetTotalWeightResponse,
	GetWeightsData,
	GetWeightsError,
	GetWeightsResponse,
	IsGaugeData,
	IsGaugeError,
	IsGaugeResponse,
	IsWhitelistedData,
	IsWhitelistedError,
	IsWhitelistedResponse,
	GetLastVotedData,
	GetLastVotedError,
	GetLastVotedResponse,
	GetPoolVoteLengthData,
	GetPoolVoteLengthError,
	GetPoolVoteLengthResponse,
	VoteData,
	VoteError,
	VoteResponse,
	ResetData,
	ResetError,
	ResetResponse,
	PokeData,
	PokeError,
	PokeResponse,
	CreateGaugeData,
	CreateGaugeError,
	CreateGaugeResponse,
	KillGaugeData,
	KillGaugeError,
	KillGaugeResponse,
	ReviveGaugeData,
	ReviveGaugeError,
	ReviveGaugeResponse,
	NotifyRewardAmountData,
	NotifyRewardAmountError,
	NotifyRewardAmountResponse,
	DistributeData,
	DistributeError,
	DistributeResponse,
	ClaimBribesData,
	ClaimBribesError,
	ClaimBribesResponse,
	ClaimFeesData,
	ClaimFeesError,
	ClaimFeesResponse,
	ClaimRewardsData,
	ClaimRewardsError,
	ClaimRewardsResponse,
	WhitelistData,
	WhitelistError,
	WhitelistResponse,
	VoteWithOptimalDistributionData,
	VoteWithOptimalDistributionError,
	VoteWithOptimalDistributionResponse,
	CreateJobData,
	CreateJobError,
	CreateJobResponse,
	ExecuteJobData,
	ExecuteJobError,
	ExecuteJobResponse,
	GetJobResultData,
	GetJobResultError,
	GetJobResultResponse,
	ScheduleJobData,
	ScheduleJobError,
	ScheduleJobResponse,
	UnscheduleJobData,
	UnscheduleJobError,
	UnscheduleJobResponse,
	GetScheduledJobsData,
	GetScheduledJobsError,
	GetScheduledJobsResponse,
	ListJobsData,
	ListJobsError,
	ListJobsResponse,
	GetJobData,
	GetJobError,
	GetJobResponse,
	DeleteJobData,
	DeleteJobError,
	DeleteJobResponse,
	CreateFlowData,
	CreateFlowError,
	CreateFlowResponse,
	ListFlowsData,
	ListFlowsError,
	ListFlowsResponse,
	GetFlowData,
	GetFlowError,
	GetFlowResponse,
	UpdateFlowData,
	UpdateFlowError,
	UpdateFlowResponse,
	DeleteFlowData,
	DeleteFlowError,
	DeleteFlowResponse,
	CreateUserDefinedFunctionData,
	CreateUserDefinedFunctionError,
	CreateUserDefinedFunctionResponse,
	ListUserDefinedFunctionsData,
	ListUserDefinedFunctionsError,
	ListUserDefinedFunctionsResponse,
	DeleteUserDefinedFunctionData,
	DeleteUserDefinedFunctionError,
	DeleteUserDefinedFunctionResponse,
	GetNotificationsData,
	GetNotificationsError,
	GetNotificationsResponse,
	MarkNotificationAsReadData,
	MarkNotificationAsReadError,
	MarkNotificationAsReadResponse,
	OdosSwapTokensData,
	OdosSwapTokensError,
	OdosSwapTokensResponse,
	OdosGetQuoteData,
	OdosGetQuoteError,
	OdosGetQuoteResponse,
	GetZapQuoteData,
	GetZapQuoteError,
	GetZapQuoteResponse,
	ZapData,
	ZapError,
	ZapResponse,
	OdosAssembleTransactionData,
	OdosAssembleTransactionError,
	OdosAssembleTransactionResponse,
	OdosGetSupportedChainsData,
	OdosGetSupportedChainsError,
	OdosGetSupportedChainsResponse,
	OdosGetContractInfoData,
	OdosGetContractInfoError,
	OdosGetContractInfoResponse,
	OdosGetRouterAddressData,
	OdosGetRouterAddressError,
	OdosGetRouterAddressResponse,
	OdosGetExecutorAddressData,
	OdosGetExecutorAddressError,
	OdosGetExecutorAddressResponse,
	OdosGetLiquiditySourcesData,
	OdosGetLiquiditySourcesError,
	OdosGetLiquiditySourcesResponse,
	OdosGetSupportedTokensData,
	OdosGetSupportedTokensError,
	OdosGetSupportedTokensResponse,
	OdosGetCurrentBlockData,
	OdosGetCurrentBlockError,
	OdosGetCurrentBlockResponse,
	OnRamperGetSupportedCurrenciesData,
	OnRamperGetSupportedCurrenciesError,
	OnRamperGetSupportedCurrenciesResponse,
	OnRamperGetSupportedPaymentTypesData,
	OnRamperGetSupportedPaymentTypesError,
	OnRamperGetSupportedPaymentTypesResponse,
	OnRamperGetSupportedPaymentTypesFiatData,
	OnRamperGetSupportedPaymentTypesFiatError,
	OnRamperGetSupportedPaymentTypesFiatResponse,
	OnRamperGetSupportedDefaultsAllData,
	OnRamperGetSupportedDefaultsAllError,
	OnRamperGetSupportedDefaultsAllResponse,
	OnRamperGetSupportedAssetsData,
	OnRamperGetSupportedAssetsError,
	OnRamperGetSupportedAssetsResponse,
	OnRamperGetSupportedOnRampsAllData,
	OnRamperGetSupportedOnRampsAllError,
	OnRamperGetSupportedOnRampsAllResponse,
	OnRamperGetQuotesBuyData,
	OnRamperGetQuotesBuyError,
	OnRamperGetQuotesBuyResponse,
	OnRamperGetQuotesSellData,
	OnRamperGetQuotesSellError,
	OnRamperGetQuotesSellResponse,
	OnRamperCheckoutData,
	OnRamperCheckoutError,
	OnRamperCheckoutResponse,
	CreateOfferData,
	CreateOfferError,
	CreateOfferResponse,
	CreateCollectionOfferData,
	CreateCollectionOfferError,
	CreateCollectionOfferResponse,
	GetCollectionData,
	GetCollectionError,
	GetCollectionResponse,
	GetNftData,
	GetNftError,
	GetNftResponse,
	WrapEthData,
	WrapEthError,
	WrapEthResponse,
	UnwrapWethData,
	UnwrapWethError,
	UnwrapWethResponse,
	GetMessageError,
	GetMessageResponse,
	CreateOrderData,
	CreateOrderError,
	CreateOrderResponse2,
	CreateMarketBuyOrderData,
	CreateMarketBuyOrderError,
	CreateMarketBuyOrderResponse2,
	PostOrderData,
	PostOrderError,
	PostOrderResponse2,
	CancelOrderData,
	CancelOrderError,
	CancelOrderResponse2,
	CancelOrdersData,
	CancelOrdersError,
	CancelOrdersResponse2,
	CancelMarketOrdersData,
	CancelMarketOrdersError,
	CancelMarketOrdersResponse2,
	UpdateBalanceAllowanceData,
	UpdateBalanceAllowanceError,
	UpdateBalanceAllowanceResponse2,
	DropNotificationsData,
	DropNotificationsError,
	DropNotificationsResponse2,
	GetMarketsData,
	GetMarketsError,
	GetMarketsResponse,
	ApproveForPolymarketData,
	ApproveForPolymarketError,
	ApproveForPolymarketResponse,
	GetMarketData,
	GetMarketError,
	GetMarketResponse,
	GetOrderBookData,
	GetOrderBookError,
	GetOrderBookResponse,
	GetOpenOrdersData,
	GetOpenOrdersError,
	GetOpenOrdersResponse,
	GetOrderData,
	GetOrderError,
	GetOrderResponse,
	GetTradesData,
	GetTradesError,
	GetTradesResponse,
	GetNotifications1Data,
	GetNotifications1Error,
	GetNotifications1Response,
	GetBalanceAllowanceData,
	GetBalanceAllowanceError,
	GetBalanceAllowanceResponse,
	GetPricesHistoryData,
	GetPricesHistoryError,
	GetPricesHistoryResponse,
	GetMarketTradeEventsData,
	GetMarketTradeEventsError,
	GetMarketTradeEventsResponse,
	GetPools1Data,
	GetPools1Error,
	GetPools1Response,
	GetPoolByAddress1Data,
	GetPoolByAddress1Error,
	GetPoolByAddress1Response,
	GetPoolsByType1Data,
	GetPoolsByType1Error,
	GetPoolsByType1Response,
	GetTopAprPools1Data,
	GetTopAprPools1Error,
	GetTopAprPools1Response,
	GetTokensData,
	GetTokensError,
	GetTokensResponse,
	GetInfoData,
	GetInfoError,
	GetInfoResponse,
	GetTotalValueLocked1Data,
	GetTotalValueLocked1Error,
	GetTotalValueLocked1Response,
	CalculateOptimalVoteDistribution1Data,
	CalculateOptimalVoteDistribution1Error,
	CalculateOptimalVoteDistribution1Response,
	GetBalanceOf1Data,
	GetBalanceOf1Error,
	GetBalanceOf1Response,
	GetOwnerOf1Data,
	GetOwnerOf1Error,
	GetOwnerOf1Response,
	Approve1Data,
	Approve1Error,
	Approve1Response,
	CreateLock1Data,
	CreateLock1Error,
	CreateLock1Response,
	IncreaseAmountData,
	IncreaseAmountError,
	IncreaseAmountResponse,
	IncreaseUnlockTime1Data,
	IncreaseUnlockTime1Error,
	IncreaseUnlockTime1Response,
	WithdrawData,
	WithdrawError,
	WithdrawResponse,
	GetTokenUri1Data,
	GetTokenUri1Error,
	GetTokenUri1Response,
	GetTotalSupply1Data,
	GetTotalSupply1Error,
	GetTotalSupply1Response,
	Delegate1Data,
	Delegate1Error,
	Delegate1Response,
	TransferFrom1Data,
	TransferFrom1Error,
	TransferFrom1Response,
	Merge1Data,
	Merge1Error,
	Merge1Response,
	Split1Data,
	Split1Error,
	Split1Response,
	GetBalanceOfNft1Data,
	GetBalanceOfNft1Error,
	GetBalanceOfNft1Response,
	GetLockedData,
	GetLockedError,
	GetLockedResponse,
	GetVotes1Data,
	GetVotes1Error,
	GetVotes1Response,
	GetPastVotes1Data,
	GetPastVotes1Error,
	GetPastVotes1Response,
	GetDelegates1Data,
	GetDelegates1Error,
	GetDelegates1Response,
	AbstainData,
	AbstainError,
	AbstainResponse,
	AttachData,
	AttachError,
	AttachResponse,
	DetachData,
	DetachError,
	DetachResponse,
	UnsafeSwapExactTokensForTokensData,
	UnsafeSwapExactTokensForTokensError,
	UnsafeSwapExactTokensForTokensResponse,
	AddLiquidity1Data,
	AddLiquidity1Error,
	AddLiquidity1Response,
	AddLiquidityEth1Data,
	AddLiquidityEth1Error,
	AddLiquidityEth1Response,
	RemoveLiquidityData,
	RemoveLiquidityError,
	RemoveLiquidityResponse,
	RemoveLiquidityEthData,
	RemoveLiquidityEthError,
	RemoveLiquidityEthResponse,
	SwapExactTokensForTokens1Data,
	SwapExactTokensForTokens1Error,
	SwapExactTokensForTokens1Response,
	SwapExactEthForTokens1Data,
	SwapExactEthForTokens1Error,
	SwapExactEthForTokens1Response,
	SwapExactTokensForEth1Data,
	SwapExactTokensForEth1Error,
	SwapExactTokensForEth1Response,
	GetFactory1Data,
	GetFactory1Error,
	GetFactory1Response,
	GetAmountOut1Data,
	GetAmountOut1Error,
	GetAmountOut1Response,
	GetAmountsOut1Data,
	GetAmountsOut1Error,
	GetAmountsOut1Response,
	GetReservesData,
	GetReservesError,
	GetReservesResponse,
	IsPairData,
	IsPairError,
	IsPairResponse,
	PairForData,
	PairForError,
	PairForResponse,
	QuoteAddLiquidityData,
	QuoteAddLiquidityError,
	QuoteAddLiquidityResponse,
	QuoteRemoveLiquidityData,
	QuoteRemoveLiquidityError,
	QuoteRemoveLiquidityResponse,
	SortTokensData,
	SortTokensError,
	SortTokensResponse,
	GetWeth1Data,
	GetWeth1Error,
	GetWeth1Response,
	GetTotalWeight1Data,
	GetTotalWeight1Error,
	GetTotalWeight1Response,
	GetWeights1Data,
	GetWeights1Error,
	GetWeights1Response,
	IsGauge1Data,
	IsGauge1Error,
	IsGauge1Response,
	IsWhitelisted1Data,
	IsWhitelisted1Error,
	IsWhitelisted1Response,
	GetLastVoted1Data,
	GetLastVoted1Error,
	GetLastVoted1Response,
	Vote1Data,
	Vote1Error,
	Vote1Response,
	Reset1Data,
	Reset1Error,
	Reset1Response,
	Poke1Data,
	Poke1Error,
	Poke1Response,
	AttachTokenToGaugeData,
	AttachTokenToGaugeError,
	AttachTokenToGaugeResponse,
	DetachTokenFromGaugeData,
	DetachTokenFromGaugeError,
	DetachTokenFromGaugeResponse,
	CreateGauge1Data,
	CreateGauge1Error,
	CreateGauge1Response,
	KillGauge1Data,
	KillGauge1Error,
	KillGauge1Response,
	ReviveGauge1Data,
	ReviveGauge1Error,
	ReviveGauge1Response,
	NotifyRewardAmount1Data,
	NotifyRewardAmount1Error,
	NotifyRewardAmount1Response,
	Distribute1Data,
	Distribute1Error,
	Distribute1Response,
	ClaimBribes1Data,
	ClaimBribes1Error,
	ClaimBribes1Response,
	ClaimFees1Data,
	ClaimFees1Error,
	ClaimFees1Response,
	ClaimRewards1Data,
	ClaimRewards1Error,
	ClaimRewards1Response,
	Whitelist1Data,
	Whitelist1Error,
	Whitelist1Response,
	VoteWithOptimalDistribution1Data,
	VoteWithOptimalDistribution1Error,
	VoteWithOptimalDistribution1Response,
	ListRippleAccountsData,
	ListRippleAccountsError,
	ListRippleAccountsResponse,
	CreateRippleAccountData,
	CreateRippleAccountError,
	CreateRippleAccountResponse,
	GetRippleAccountData,
	GetRippleAccountError,
	GetRippleAccountResponse,
	SignRippleTransactionData,
	SignRippleTransactionError,
	SignRippleTransactionResponse,
	ExportRippleAccountData,
	ExportRippleAccountError,
	ExportRippleAccountResponse,
	DeleteRippleAccountData,
	DeleteRippleAccountError,
	DeleteRippleAccountResponse,
	ListSolanaAccountsData,
	ListSolanaAccountsError,
	ListSolanaAccountsResponse,
	CreateSolanaAccountData,
	CreateSolanaAccountError,
	CreateSolanaAccountResponse,
	GetSolanaAccountData,
	GetSolanaAccountError,
	GetSolanaAccountResponse,
	SignSolanaTransactionData,
	SignSolanaTransactionError,
	SignSolanaTransactionResponse,
	MultiSignSolanaTransactionData,
	MultiSignSolanaTransactionError,
	MultiSignSolanaTransactionResponse,
	TransferSolanaTransactionData,
	TransferSolanaTransactionError,
	TransferSolanaTransactionResponse,
	TransferTokensSignSolanaTransactionData,
	TransferTokensSignSolanaTransactionError,
	TransferTokensSignSolanaTransactionResponse,
	ExportSolanaAccountData,
	ExportSolanaAccountError,
	ExportSolanaAccountResponse,
	DeleteSolanaAccountData,
	DeleteSolanaAccountError,
	DeleteSolanaAccountResponse,
	GetFusionsData,
	GetFusionsError,
	GetFusionsResponse,
	GetFusionByAddressData,
	GetFusionByAddressError,
	GetFusionByAddressResponse,
	GetFusionsByTypeData,
	GetFusionsByTypeError,
	GetFusionsByTypeResponse,
	GetTopAprFusionsData,
	GetTopAprFusionsError,
	GetTopAprFusionsResponse,
	GetTotalValueLocked2Data,
	GetTotalValueLocked2Error,
	GetTotalValueLocked2Response,
	GetTopTokensData,
	GetTopTokensError,
	GetTopTokensResponse,
	GetTopPairsData,
	GetTopPairsError,
	GetTopPairsResponse,
	CalculateOptimalVoteDistribution2Data,
	CalculateOptimalVoteDistribution2Error,
	CalculateOptimalVoteDistribution2Response,
	GetQuoteData,
	GetQuoteError,
	GetQuoteResponse,
	SwapData,
	SwapError,
	SwapResponse,
	GetGasPriceData,
	GetGasPriceError,
	GetGasPriceResponse,
	GetSupportedChainsData,
	GetSupportedChainsError,
	GetSupportedChainsResponse,
	GetSupportedProvidersData,
	GetSupportedProvidersError,
	GetSupportedProvidersResponse,
	TronListTronAccountsData,
	TronListTronAccountsError,
	TronListTronAccountsResponse,
	TronCreateTronAccountData,
	TronCreateTronAccountError,
	TronCreateTronAccountResponse,
	TronGetTronAccountData,
	TronGetTronAccountError,
	TronGetTronAccountResponse,
	TronSignTronTransactionData,
	TronSignTronTransactionError,
	TronSignTronTransactionResponse,
	TronExportTronAccountData,
	TronExportTronAccountError,
	TronExportTronAccountResponse,
	TronDeleteTronAccountData,
	TronDeleteTronAccountError,
	TronDeleteTronAccountResponse,
	GetWeth2Data,
	GetWeth2Error,
	GetWeth2Response,
	AddLiquidity2Data,
	AddLiquidity2Error,
	AddLiquidity2Response,
	AddLiquidityEth2Data,
	AddLiquidityEth2Error,
	AddLiquidityEth2Response,
	GetAmountInData,
	GetAmountInError,
	GetAmountInResponse,
	GetAmountOut2Data,
	GetAmountOut2Error,
	GetAmountOut2Response,
	GetAmountsInData,
	GetAmountsInError,
	GetAmountsInResponse,
	GetAmountsOut2Data,
	GetAmountsOut2Error,
	GetAmountsOut2Response,
	QuoteData,
	QuoteError,
	QuoteResponse,
	RemoveLiquidity1Data,
	RemoveLiquidity1Error,
	RemoveLiquidity1Response,
	RemoveLiquidityEth1Data,
	RemoveLiquidityEth1Error,
	RemoveLiquidityEth1Response,
	RemoveLiquidityEthSupportingFeeOnTransferTokensData,
	RemoveLiquidityEthSupportingFeeOnTransferTokensError,
	RemoveLiquidityEthSupportingFeeOnTransferTokensResponse,
	RemoveLiquidityEthWithPermitData,
	RemoveLiquidityEthWithPermitError,
	RemoveLiquidityEthWithPermitResponse,
	RemoveLiquidityEthWithPermitSupportingFeeOnTransferTokensData,
	RemoveLiquidityEthWithPermitSupportingFeeOnTransferTokensError,
	RemoveLiquidityEthWithPermitSupportingFeeOnTransferTokensResponse,
	RemoveLiquidityWithPermitData,
	RemoveLiquidityWithPermitError,
	RemoveLiquidityWithPermitResponse,
	SwapEthForExactTokensData,
	SwapEthForExactTokensError,
	SwapEthForExactTokensResponse,
	SwapExactEthForTokens2Data,
	SwapExactEthForTokens2Error,
	SwapExactEthForTokens2Response,
	SwapExactEthForTokensSupportingFeeOnTransferTokensData,
	SwapExactEthForTokensSupportingFeeOnTransferTokensError,
	SwapExactEthForTokensSupportingFeeOnTransferTokensResponse,
	SwapExactTokensForEth2Data,
	SwapExactTokensForEth2Error,
	SwapExactTokensForEth2Response,
	SwapExactTokensForEthSupportingFeeOnTransferTokensData,
	SwapExactTokensForEthSupportingFeeOnTransferTokensError,
	SwapExactTokensForEthSupportingFeeOnTransferTokensResponse,
	SwapExactTokensForTokens2Data,
	SwapExactTokensForTokens2Error,
	SwapExactTokensForTokens2Response,
	SwapExactTokensForTokensSupportingFeeOnTransferTokensData,
	SwapExactTokensForTokensSupportingFeeOnTransferTokensError,
	SwapExactTokensForTokensSupportingFeeOnTransferTokensResponse,
	SwapTokensForExactEthData,
	SwapTokensForExactEthError,
	SwapTokensForExactEthResponse,
	SwapTokensForExactTokensData,
	SwapTokensForExactTokensError,
	SwapTokensForExactTokensResponse,
	MintData,
	MintError,
	MintResponse,
	IncreaseLiquidityData,
	IncreaseLiquidityError,
	IncreaseLiquidityResponse,
	DecreaseLiquidityData,
	DecreaseLiquidityError,
	DecreaseLiquidityResponse,
	CollectData,
	CollectError,
	CollectResponse,
	Burn1Data,
	Burn1Error,
	Burn1Response,
	CreateAndInitializePoolIfNecessaryData,
	CreateAndInitializePoolIfNecessaryError,
	CreateAndInitializePoolIfNecessaryResponse,
	Approve2Data,
	Approve2Error,
	Approve2Response,
	SetApprovalForAll1Data,
	SetApprovalForAll1Error,
	SetApprovalForAll1Response,
	TransferFrom2Data,
	TransferFrom2Error,
	TransferFrom2Response,
	PermitData,
	PermitError,
	PermitResponse,
	MulticallData,
	MulticallError,
	MulticallResponse,
	SweepTokenData,
	SweepTokenError,
	SweepTokenResponse,
	UnwrapWeth9Data,
	UnwrapWeth9Error,
	UnwrapWeth9Response,
	RefundEthData,
	RefundEthError,
	RefundEthResponse,
	PositionsData,
	PositionsError,
	PositionsResponse,
	TokenOfOwnerByIndexData,
	TokenOfOwnerByIndexError,
	TokenOfOwnerByIndexResponse,
	BalanceOfData,
	BalanceOfError,
	BalanceOfResponse,
	DomainSeparatorData,
	DomainSeparatorError,
	DomainSeparatorResponse,
	PermitTypehashData,
	PermitTypehashError,
	PermitTypehashResponse,
	Weth9Data,
	Weth9Error,
	Weth9Response,
	FactoryData,
	FactoryError,
	FactoryResponse,
	NameData,
	NameError,
	NameResponse,
	SymbolData,
	SymbolError,
	SymbolResponse,
	TokenUriData,
	TokenUriError,
	TokenUriResponse,
	BaseUriData,
	BaseUriError,
	BaseUriResponse,
	OwnerOfData,
	OwnerOfError,
	OwnerOfResponse,
	GetApproved1Data,
	GetApproved1Error,
	GetApproved1Response,
	IsApprovedForAll1Data,
	IsApprovedForAll1Error,
	IsApprovedForAll1Response,
	TotalSupplyData,
	TotalSupplyError,
	TotalSupplyResponse,
	TokenByIndexData,
	TokenByIndexError,
	TokenByIndexResponse,
	SupportsInterfaceData,
	SupportsInterfaceError,
	SupportsInterfaceResponse,
	ExactInputData,
	ExactInputError,
	ExactInputResponse,
	ExactInputSingleData,
	ExactInputSingleError,
	ExactInputSingleResponse,
	ExactOutputData,
	ExactOutputError,
	ExactOutputResponse,
	ExactOutputSingleData,
	ExactOutputSingleError,
	ExactOutputSingleResponse,
	Multicall1Data,
	Multicall1Error,
	Multicall1Response,
	RefundEth1Data,
	RefundEth1Error,
	RefundEth1Response,
	SelfPermitData,
	SelfPermitError,
	SelfPermitResponse,
	SelfPermitAllowedData,
	SelfPermitAllowedError,
	SelfPermitAllowedResponse,
	SelfPermitAllowedIfNecessaryData,
	SelfPermitAllowedIfNecessaryError,
	SelfPermitAllowedIfNecessaryResponse,
	SelfPermitIfNecessaryData,
	SelfPermitIfNecessaryError,
	SelfPermitIfNecessaryResponse,
	SweepToken1Data,
	SweepToken1Error,
	SweepToken1Response,
	SweepTokenWithFeeData,
	SweepTokenWithFeeError,
	SweepTokenWithFeeResponse,
	UnwrapWeth91Data,
	UnwrapWeth91Error,
	UnwrapWeth91Response,
	UnwrapWeth9WithFeeData,
	UnwrapWeth9WithFeeError,
	UnwrapWeth9WithFeeResponse,
	Weth91Data,
	Weth91Error,
	Weth91Response,
	Factory1Data,
	Factory1Error,
	Factory1Response,
	GetBalanceOf2Data,
	GetBalanceOf2Error,
	GetBalanceOf2Response,
	GetOwnerOf2Data,
	GetOwnerOf2Error,
	GetOwnerOf2Response,
	GetTokenUri2Data,
	GetTokenUri2Error,
	GetTokenUri2Response,
	GetApproved2Data,
	GetApproved2Error,
	GetApproved2Response,
	IsApprovedForAll2Data,
	IsApprovedForAll2Error,
	IsApprovedForAll2Response,
	GetBalanceOfNft2Data,
	GetBalanceOfNft2Error,
	GetBalanceOfNft2Response,
	GetTotalSupply2Data,
	GetTotalSupply2Error,
	GetTotalSupply2Response,
	GetLocked1Data,
	GetLocked1Error,
	GetLocked1Response,
	GetLockedEndData,
	GetLockedEndError,
	GetLockedEndResponse,
	CreateLock2Data,
	CreateLock2Error,
	CreateLock2Response,
	CreateLockFor1Data,
	CreateLockFor1Error,
	CreateLockFor1Response,
	IncreaseLockAmount1Data,
	IncreaseLockAmount1Error,
	IncreaseLockAmount1Response,
	IncreaseUnlockTime2Data,
	IncreaseUnlockTime2Error,
	IncreaseUnlockTime2Response,
	Withdraw1Data,
	Withdraw1Error,
	Withdraw1Response,
	Approve3Data,
	Approve3Error,
	Approve3Response,
	SetApprovalForAll2Data,
	SetApprovalForAll2Error,
	SetApprovalForAll2Response,
	TransferFrom3Data,
	TransferFrom3Error,
	TransferFrom3Response,
	SafeTransferFrom1Data,
	SafeTransferFrom1Error,
	SafeTransferFrom1Response,
	Merge2Data,
	Merge2Error,
	Merge2Response,
	Split2Data,
	Split2Error,
	Split2Response,
	VotingData,
	VotingError,
	VotingResponse,
	Abstain1Data,
	Abstain1Error,
	Abstain1Response,
	Attach1Data,
	Attach1Error,
	Attach1Response,
	Detach1Data,
	Detach1Error,
	Detach1Response,
	DepositForData,
	DepositForError,
	DepositForResponse,
	Checkpoint1Data,
	Checkpoint1Error,
	Checkpoint1Response,
	Delegate2Data,
	Delegate2Error,
	Delegate2Response,
	DelegateBySig1Data,
	DelegateBySig1Error,
	DelegateBySig1Response,
	GetLastUserSlopeData,
	GetLastUserSlopeError,
	GetLastUserSlopeResponse,
	GetUserPointHistoryData,
	GetUserPointHistoryError,
	GetUserPointHistoryResponse,
	GetUserPointHistoryTsData,
	GetUserPointHistoryTsError,
	GetUserPointHistoryTsResponse,
	GetBalanceOfAtNftData,
	GetBalanceOfAtNftError,
	GetBalanceOfAtNftResponse,
	GetTotalSupplyAtData,
	GetTotalSupplyAtError,
	GetTotalSupplyAtResponse,
	GetTotalSupplyAtTData,
	GetTotalSupplyAtTError,
	GetTotalSupplyAtTResponse,
	GetPastVotes2Data,
	GetPastVotes2Error,
	GetPastVotes2Response,
	GetPastTotalSupplyData,
	GetPastTotalSupplyError,
	GetPastTotalSupplyResponse,
	GetVotes2Data,
	GetVotes2Error,
	GetVotes2Response,
	GetDelegates2Data,
	GetDelegates2Error,
	GetDelegates2Response,
	GetTotalWeight2Data,
	GetTotalWeight2Error,
	GetTotalWeight2Response,
	GetWeights2Data,
	GetWeights2Error,
	GetWeights2Response,
	IsGauge2Data,
	IsGauge2Error,
	IsGauge2Response,
	Vote2Data,
	Vote2Error,
	Vote2Response,
	Reset2Data,
	Reset2Error,
	Reset2Response,
	Poke2Data,
	Poke2Error,
	Poke2Response,
	CreateGauge2Data,
	CreateGauge2Error,
	CreateGauge2Response,
	VoteWithOptimalDistribution2Data,
	VoteWithOptimalDistribution2Error,
	VoteWithOptimalDistribution2Response,
	IsWhitelisted2Data,
	IsWhitelisted2Error,
	IsWhitelisted2Response,
	LastVotedData,
	LastVotedError,
	LastVotedResponse,
	PoolVoteLengthData,
	PoolVoteLengthError,
	PoolVoteLengthResponse,
	AttachTokenToGauge1Data,
	AttachTokenToGauge1Error,
	AttachTokenToGauge1Response,
	DetachTokenFromGauge1Data,
	DetachTokenFromGauge1Error,
	DetachTokenFromGauge1Response,
	KillGauge2Data,
	KillGauge2Error,
	KillGauge2Response,
	ReviveGauge2Data,
	ReviveGauge2Error,
	ReviveGauge2Response,
	NotifyRewardAmount2Data,
	NotifyRewardAmount2Error,
	NotifyRewardAmount2Response,
	Distribute2Data,
	Distribute2Error,
	Distribute2Response,
	ClaimBribes2Data,
	ClaimBribes2Error,
	ClaimBribes2Response,
	ClaimFees2Data,
	ClaimFees2Error,
	ClaimFees2Response,
	ClaimRewards2Data,
	ClaimRewards2Error,
	ClaimRewards2Response,
	Whitelist2Data,
	Whitelist2Error,
	Whitelist2Response,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Retrieves reserve data for a specific asset from the Aave pool.
 */
export const aavev3PoolGetReserveData = <ThrowOnError extends boolean = false>(
	options: Options<Aavev3PoolGetReserveDataData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Aavev3PoolGetReserveDataResponse,
		Aavev3PoolGetReserveDataError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/pool/{account}/getReserveData",
	});
};

/**
 * Retrieves user account data from the Aave pool.
 */
export const aavev3PoolGetUserAccountData = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Aavev3PoolGetUserAccountDataData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Aavev3PoolGetUserAccountDataResponse,
		Aavev3PoolGetUserAccountDataError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/pool/{account}/getUserAccountData",
	});
};

/**
 * Supplies assets to the Aave pool.
 */
export const aavev3PoolSupply = <ThrowOnError extends boolean = false>(
	options: Options<Aavev3PoolSupplyData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Aavev3PoolSupplyResponse,
		Aavev3PoolSupplyError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/pool/{address}/supply",
	});
};

/**
 * Withdraws assets from the Aave pool.
 */
export const aavev3PoolWithdraw = <ThrowOnError extends boolean = false>(
	options: Options<Aavev3PoolWithdrawData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Aavev3PoolWithdrawResponse,
		Aavev3PoolWithdrawError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/pool/{address}/withdraw",
	});
};

/**
 * Borrows assets from the Aave pool.
 */
export const aavev3PoolBorrow = <ThrowOnError extends boolean = false>(
	options: Options<Aavev3PoolBorrowData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Aavev3PoolBorrowResponse,
		Aavev3PoolBorrowError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/pool/{address}/borrow",
	});
};

/**
 * Repays a loan on the Aave protocol.
 */
export const aavev3PoolRepay = <ThrowOnError extends boolean = false>(
	options: Options<Aavev3PoolRepayData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Aavev3PoolRepayResponse,
		Aavev3PoolRepayError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/pool/{address}/repay",
	});
};

/**
 * Sets the user's reserve as collateral in the Aave pool.
 */
export const aavev3PoolSetUserUseReserveAsCollateral = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Aavev3PoolSetUserUseReserveAsCollateralData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Aavev3PoolSetUserUseReserveAsCollateralResponse,
		Aavev3PoolSetUserUseReserveAsCollateralError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/pool/{address}/setUserUseReserveAsCollateral",
	});
};

/**
 * Handles the liquidation call to the Aave pool.
 */
export const aavev3PoolLiquidationCall = <ThrowOnError extends boolean = false>(
	options: Options<Aavev3PoolLiquidationCallData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Aavev3PoolLiquidationCallResponse,
		Aavev3PoolLiquidationCallError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/pool/{address}/liquidationCall",
	});
};

/**
 * Retrieves the ACL (Access Control List) admin address for a given account.
 */
export const aavev3PoolAddressProviderGetAclAdmin = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Aavev3PoolAddressProviderGetAclAdminData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Aavev3PoolAddressProviderGetAclAdminResponse,
		Aavev3PoolAddressProviderGetAclAdminError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProvider/{account}/getACLAdmin",
	});
};

/**
 * Retrieves the ACL Manager address from the Pool Address Provider.
 */
export const aavev3PoolAddressProviderGetAclManager = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Aavev3PoolAddressProviderGetAclManagerData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Aavev3PoolAddressProviderGetAclManagerResponse,
		Aavev3PoolAddressProviderGetAclManagerError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProvider/{account}/getACLManager",
	});
};

/**
 * Retrieves an address from the Pool Address Provider.
 */
export const aavev3PoolAddressProviderGetAddress = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Aavev3PoolAddressProviderGetAddressData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Aavev3PoolAddressProviderGetAddressResponse,
		Aavev3PoolAddressProviderGetAddressError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProvider/{account}/getAddress",
	});
};

/**
 * Retrieves the market ID from the Pool Address Provider.
 */
export const aavev3PoolAddressProviderGetMarketId = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Aavev3PoolAddressProviderGetMarketIdData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Aavev3PoolAddressProviderGetMarketIdResponse,
		Aavev3PoolAddressProviderGetMarketIdError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProvider/{account}/getMarketId",
	});
};

/**
 * Retrieves the pool address from the Aave protocol.
 */
export const aavev3PoolAddressProviderGetPool = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Aavev3PoolAddressProviderGetPoolData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Aavev3PoolAddressProviderGetPoolResponse,
		Aavev3PoolAddressProviderGetPoolError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProvider/{account}/getPool",
	});
};

/**
 * Retrieves the pool configurator for a given account.
 */
export const aavev3PoolAddressProviderGetPoolConfigurator = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		Aavev3PoolAddressProviderGetPoolConfiguratorData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).get<
		Aavev3PoolAddressProviderGetPoolConfiguratorResponse,
		Aavev3PoolAddressProviderGetPoolConfiguratorError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProvider/{account}/getPoolConfigurator",
	});
};

/**
 * Retrieves the price oracle address from the Aave pool address provider.
 */
export const aavev3PoolAddressProviderGetPriceOracle = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Aavev3PoolAddressProviderGetPriceOracleData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Aavev3PoolAddressProviderGetPriceOracleResponse,
		Aavev3PoolAddressProviderGetPriceOracleError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProvider/{account}/getPriceOracle",
	});
};

/**
 * Sets the ACL (Access Control List) admin for the specified address.
 */
export const aavev3PoolAddressProviderSetAclAdmin = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Aavev3PoolAddressProviderSetAclAdminData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Aavev3PoolAddressProviderSetAclAdminResponse,
		Aavev3PoolAddressProviderSetAclAdminError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProvider/{address}/setACLAdmin",
	});
};

/**
 * Sets the ACL Manager for the specified pool address provider.
 */
export const aavev3PoolAddressProviderSetAclManager = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Aavev3PoolAddressProviderSetAclManagerData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Aavev3PoolAddressProviderSetAclManagerResponse,
		Aavev3PoolAddressProviderSetAclManagerError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProvider/{address}/setACLManager",
	});
};

/**
 * Sets the address for the Pool Address Provider.
 */
export const aavev3PoolAddressProviderSetAddress = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Aavev3PoolAddressProviderSetAddressData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Aavev3PoolAddressProviderSetAddressResponse,
		Aavev3PoolAddressProviderSetAddressError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProvider/{address}/setAddress",
	});
};

/**
 * Sets the market ID for the given pool address provider.
 */
export const aavev3PoolAddressProviderSetMarketId = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Aavev3PoolAddressProviderSetMarketIdData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Aavev3PoolAddressProviderSetMarketIdResponse,
		Aavev3PoolAddressProviderSetMarketIdError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProvider/{address}/setMarketId",
	});
};

/**
 * Sets the Pool Configurator implementation for the given address.
 */
export const aavev3PoolAddressProviderSetPoolConfiguratorImpl = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		Aavev3PoolAddressProviderSetPoolConfiguratorImplData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).post<
		Aavev3PoolAddressProviderSetPoolConfiguratorImplResponse,
		Aavev3PoolAddressProviderSetPoolConfiguratorImplError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProvider/{address}/setPoolConfiguratorImpl",
	});
};

/**
 * Sets the pool implementation address for the given address.
 */
export const aavev3PoolAddressProviderSetPoolImpl = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Aavev3PoolAddressProviderSetPoolImplData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Aavev3PoolAddressProviderSetPoolImplResponse,
		Aavev3PoolAddressProviderSetPoolImplError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProvider/{address}/setPoolImpl",
	});
};

/**
 * Retrieves the addresses provider from the Aave V3 Pool Address Provider Registry.
 */
export const aavev3PoolAddressProviderRegistryGetAddressesProvider = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		Aavev3PoolAddressProviderRegistryGetAddressesProviderData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).get<
		Aavev3PoolAddressProviderRegistryGetAddressesProviderResponse,
		Aavev3PoolAddressProviderRegistryGetAddressesProviderError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProviderRegistry/{account}/getAddressesProvider",
	});
};

/**
 * Retrieves the total supply of a specific AToken.
 */
export const aavev3PoolAddressProviderRegistryGetAtokenTotalSupply = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		Aavev3PoolAddressProviderRegistryGetAtokenTotalSupplyData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).get<
		Aavev3PoolAddressProviderRegistryGetAtokenTotalSupplyResponse,
		Aavev3PoolAddressProviderRegistryGetAtokenTotalSupplyError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProviderRegistry/{account}/getATokenTotalSupply",
	});
};

/**
 * Retrieves all ATokens associated with the specified account.
 */
export const aavev3PoolAddressProviderRegistryGetAllAtokens = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		Aavev3PoolAddressProviderRegistryGetAllAtokensData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).get<
		Aavev3PoolAddressProviderRegistryGetAllAtokensResponse,
		Aavev3PoolAddressProviderRegistryGetAllAtokensError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProviderRegistry/{account}/getAllATokens",
	});
};

export const getAllReservesTokens = <ThrowOnError extends boolean = false>(
	options: Options<GetAllReservesTokensData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetAllReservesTokensResponse,
		GetAllReservesTokensError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProviderRegistry/{account}/getAllReservesTokens",
	});
};

/**
 * Retrieves the debt ceiling for a specified asset from the Aave V3 Pool Address Provider Registry.
 */
export const aavev3PoolAddressProviderRegistryGetDebtCeiling = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		Aavev3PoolAddressProviderRegistryGetDebtCeilingData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).get<
		Aavev3PoolAddressProviderRegistryGetDebtCeilingResponse,
		Aavev3PoolAddressProviderRegistryGetDebtCeilingError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/poolAddressProviderRegistry/{account}/getDebtCeiling",
	});
};

/**
 * Retrieves all rewards for a specific asset
 */
export const aavEv3RewardsGetRewardsByAsset = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AavEv3RewardsGetRewardsByAssetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AavEv3RewardsGetRewardsByAssetResponse,
		AavEv3RewardsGetRewardsByAssetError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/rewards/{account}/rewardsByAsset",
	});
};

/**
 * Gets reward data for a specific user
 */
export const aavEv3RewardsGetUserRewards = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AavEv3RewardsGetUserRewardsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AavEv3RewardsGetUserRewardsResponse,
		AavEv3RewardsGetUserRewardsError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/rewards/{account}/userRewards",
	});
};

/**
 * Retrieves rewards configuration data for an asset
 */
export const aavEv3RewardsGetRewardsData = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AavEv3RewardsGetRewardsDataData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AavEv3RewardsGetRewardsDataResponse,
		AavEv3RewardsGetRewardsDataError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/rewards/{account}/rewardsData",
	});
};

/**
 * Claims rewards for the specified assets and rewards
 */
export const aavEv3RewardsClaimRewards = <ThrowOnError extends boolean = false>(
	options: Options<AavEv3RewardsClaimRewardsData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AavEv3RewardsClaimRewardsResponse,
		AavEv3RewardsClaimRewardsError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/rewards/{address}/claimRewards",
	});
};

/**
 * Claims rewards on behalf of another address
 */
export const aavEv3RewardsClaimRewardsOnBehalf = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AavEv3RewardsClaimRewardsOnBehalfData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AavEv3RewardsClaimRewardsOnBehalfResponse,
		AavEv3RewardsClaimRewardsOnBehalfError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/rewards/{address}/claimRewardsOnBehalf",
	});
};

/**
 * Claims rewards to the calling address
 */
export const aavEv3RewardsClaimRewardsToSelf = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AavEv3RewardsClaimRewardsToSelfData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AavEv3RewardsClaimRewardsToSelfResponse,
		AavEv3RewardsClaimRewardsToSelfError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/rewards/{address}/claimRewardsToSelf",
	});
};

/**
 * Claims all available rewards for the specified assets
 */
export const aavEv3RewardsClaimAllRewards = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AavEv3RewardsClaimAllRewardsData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AavEv3RewardsClaimAllRewardsResponse,
		AavEv3RewardsClaimAllRewardsError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/rewards/{address}/claimAllRewards",
	});
};

/**
 * Claims all rewards on behalf of another address
 */
export const aavEv3RewardsClaimAllRewardsOnBehalf = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AavEv3RewardsClaimAllRewardsOnBehalfData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AavEv3RewardsClaimAllRewardsOnBehalfResponse,
		AavEv3RewardsClaimAllRewardsOnBehalfError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/rewards/{address}/claimAllRewardsOnBehalf",
	});
};

/**
 * Claims all rewards to the calling address
 */
export const aavEv3RewardsClaimAllRewardsToSelf = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AavEv3RewardsClaimAllRewardsToSelfData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AavEv3RewardsClaimAllRewardsToSelfResponse,
		AavEv3RewardsClaimAllRewardsToSelfError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/rewards/{address}/claimAllRewardsToSelf",
	});
};

/**
 * Retrieves full incentive data for all reserves and user positions
 */
export const aavEv3IncentiveDataProviderGetFullReservesData = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		AavEv3IncentiveDataProviderGetFullReservesDataData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).get<
		AavEv3IncentiveDataProviderGetFullReservesDataResponse,
		AavEv3IncentiveDataProviderGetFullReservesDataError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/incentives/fullReservesIncentiveData",
	});
};

/**
 * Retrieves incentive data for all reserves in the pool
 */
export const aavEv3IncentiveDataProviderGetReservesData = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		AavEv3IncentiveDataProviderGetReservesDataData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).get<
		AavEv3IncentiveDataProviderGetReservesDataResponse,
		AavEv3IncentiveDataProviderGetReservesDataError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/incentives/reservesIncentivesData",
	});
};

/**
 * Retrieves incentive data for a user's positions in all reserves
 */
export const aavEv3IncentiveDataProviderGetUserReservesData = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		AavEv3IncentiveDataProviderGetUserReservesDataData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).get<
		AavEv3IncentiveDataProviderGetUserReservesDataResponse,
		AavEv3IncentiveDataProviderGetUserReservesDataError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/incentives/userReservesIncentivesData",
	});
};

/**
 * Retrieves the ETH currency unit from the AAVE V3 UI Pool Data Provider.
 */
export const aaveV3UiPoolDataProviderEthCurrencyUnit = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AaveV3UiPoolDataProviderEthCurrencyUnitData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AaveV3UiPoolDataProviderEthCurrencyUnitResponse,
		AaveV3UiPoolDataProviderEthCurrencyUnitError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/pool-data/eth-currency-unit",
	});
};

export const getReservesData = <ThrowOnError extends boolean = false>(
	options: Options<GetReservesDataData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetReservesDataResponse,
		GetReservesDataError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/pool-data/reserves-data",
	});
};

/**
 * Retrieves the list of reserves from the AAVE V3 UI Pool Data Provider.
 */
export const aaveV3UiPoolDataProviderReservesList = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AaveV3UiPoolDataProviderReservesListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AaveV3UiPoolDataProviderReservesListResponse,
		AaveV3UiPoolDataProviderReservesListError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/pool-data/reserves-list",
	});
};

/**
 * Retrieves the user's reserve data from the AAVE v3 UI Pool Data Provider.
 */
export const aaveV3UiPoolDataProviderUserReservesData = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AaveV3UiPoolDataProviderUserReservesDataData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AaveV3UiPoolDataProviderUserReservesDataResponse,
		AaveV3UiPoolDataProviderUserReservesDataError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/pool-data/user-reserves-data",
	});
};

/**
 * Retrieves the market reference currency price in USD using the proxy aggregator.
 */
export const aaveV3UiPoolDataProviderMarketReferenceCurrencyPriceInUsdProxyAggregator =
	<ThrowOnError extends boolean = false>(
		options: Options<
			AaveV3UiPoolDataProviderMarketReferenceCurrencyPriceInUsdProxyAggregatorData,
			ThrowOnError
		>,
	) => {
		return (options?.client ?? client).get<
			AaveV3UiPoolDataProviderMarketReferenceCurrencyPriceInUsdProxyAggregatorResponse,
			AaveV3UiPoolDataProviderMarketReferenceCurrencyPriceInUsdProxyAggregatorError,
			ThrowOnError
		>({
			...options,
			url: "/aave/v3/pool-data/market-reference-currency-price-in-usd-proxy-aggregator",
		});
	};

/**
 *
 * Retrieves the network base token price in USD using the proxy aggregator.
 */
export const aaveV3UiPoolDataProviderNetworkBaseTokenPriceInUsdProxyAggregator =
	<ThrowOnError extends boolean = false>(
		options: Options<
			AaveV3UiPoolDataProviderNetworkBaseTokenPriceInUsdProxyAggregatorData,
			ThrowOnError
		>,
	) => {
		return (options?.client ?? client).get<
			AaveV3UiPoolDataProviderNetworkBaseTokenPriceInUsdProxyAggregatorResponse,
			AaveV3UiPoolDataProviderNetworkBaseTokenPriceInUsdProxyAggregatorError,
			ThrowOnError
		>({
			...options,
			url: "/aave/v3/pool-data/network-base-token-price-in-usd-proxy-aggregator",
		});
	};

/**
 * Retrieves the balance of a specific token for a user from the AAVE v3 Wallet Balance Provider.
 */
export const aaveV3WalletBalanceOf = <ThrowOnError extends boolean = false>(
	options: Options<AaveV3WalletBalanceOfData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AaveV3WalletBalanceOfResponse,
		AaveV3WalletBalanceOfError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/wallet-balance/balance-of",
	});
};

/**
 * Retrieves the batch balance of multiple users for specified tokens.
 */
export const aaveV3WalletBatchBalanceOf = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AaveV3WalletBatchBalanceOfData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AaveV3WalletBatchBalanceOfResponse,
		AaveV3WalletBatchBalanceOfError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/wallet-balance/batch-balance-of",
	});
};

/**
 * Retrieves the wallet balances for a user from the AAVE v3 Wallet Balance Provider.
 */
export const aaveV3WalletUserWalletBalances = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AaveV3WalletUserWalletBalancesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AaveV3WalletUserWalletBalancesResponse,
		AaveV3WalletUserWalletBalancesError,
		ThrowOnError
	>({
		...options,
		url: "/aave/v3/wallet-balance/user-wallet-balances",
	});
};

/**
 * Creates a new account using the provided authorization token and account input data.
 */
export const accountsCreateEthereumAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AccountsCreateEthereumAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountsCreateEthereumAccountResponse,
		AccountsCreateEthereumAccountError,
		ThrowOnError
	>({
		...options,
		url: "/accounts",
	});
};

/**
 * Lists accounts using the provided authorization token.
 */
export const accountsListEthereumAccounts = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AccountsListEthereumAccountsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AccountsListEthereumAccountsResponse,
		AccountsListEthereumAccountsError,
		ThrowOnError
	>({
		...options,
		url: "/accounts",
	});
};

/**
 *
 *
 * Retrieves the account details for a given account name.
 */
export const accountsGetEthreumAccount = <ThrowOnError extends boolean = false>(
	options: Options<AccountsGetEthreumAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AccountsGetEthreumAccountResponse,
		AccountsGetEthreumAccountError,
		ThrowOnError
	>({
		...options,
		url: "/accounts/{accountName}",
	});
};

/**
 * Deletes an account based on the provided account name.
 */
export const accountsDeleteEthereumAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AccountsDeleteEthereumAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		AccountsDeleteEthereumAccountResponse,
		AccountsDeleteEthereumAccountError,
		ThrowOnError
	>({
		...options,
		url: "/accounts/{accountName}",
	});
};

/**
 * Retrieves the nonce for a given account.
 */
export const accountsEthereumGetNonce = <ThrowOnError extends boolean = false>(
	options: Options<AccountsEthereumGetNonceData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AccountsEthereumGetNonceResponse,
		AccountsEthereumGetNonceError,
		ThrowOnError
	>({
		...options,
		url: "/accounts/{accountName}/nonce",
	});
};

/**
 * Retrieves the balance of a specified account.
 */
export const accountsEthereumGetNativeBalance = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AccountsEthereumGetNativeBalanceData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AccountsEthereumGetNativeBalanceResponse,
		AccountsEthereumGetNativeBalanceError,
		ThrowOnError
	>({
		...options,
		url: "/accounts/{accountName}/balance",
	});
};

/**
 * Suggests the gas price for a given account and chain ID.
 */
export const accountsSuggestGasPrice = <ThrowOnError extends boolean = false>(
	options: Options<AccountsSuggestGasPriceData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AccountsSuggestGasPriceResponse,
		AccountsSuggestGasPriceError,
		ThrowOnError
	>({
		...options,
		url: "/accounts/{accountName}/suggest-gas",
	});
};

/**
 * Estimates the gas required for a transaction.
 */
export const accountsEstimateGas = <ThrowOnError extends boolean = false>(
	options: Options<AccountsEstimateGasData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountsEstimateGasResponse,
		AccountsEstimateGasError,
		ThrowOnError
	>({
		...options,
		url: "/accounts/{accountName}/estimate",
	});
};

/**
 * Transfers Ethereum from one account to another.
 */
export const accountsTransferEth = <ThrowOnError extends boolean = false>(
	options: Options<AccountsTransferEthData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountsTransferEthResponse,
		AccountsTransferEthError,
		ThrowOnError
	>({
		...options,
		url: "/accounts/{accountName}/transfer-eth",
	});
};

/**
 * Signs a message using the provided account name and authorization token.
 */
export const accountsSignEthreumMessage = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AccountsSignEthreumMessageData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountsSignEthreumMessageResponse,
		AccountsSignEthreumMessageError,
		ThrowOnError
	>({
		...options,
		url: "/accounts/{accountName}/sign-message",
	});
};

/**
 * Signs a transaction for the specified account.
 */
export const accountsSignEthereumTransaction = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AccountsSignEthereumTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountsSignEthereumTransactionResponse,
		AccountsSignEthereumTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/accounts/{accountName}/sign-transaction",
	});
};

/**
 * Exports the account details including address, private key, and public key.
 */
export const accountsExportEthreumAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AccountsExportEthreumAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AccountsExportEthreumAccountResponse,
		AccountsExportEthreumAccountError,
		ThrowOnError
	>({
		...options,
		url: "/accounts/{accountName}/export",
	});
};

/**
 * Handles the signing of typed data for a given account.
 */
export const accountsSignEthereumTypedData = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AccountsSignEthereumTypedDataData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountsSignEthereumTypedDataResponse,
		AccountsSignEthereumTypedDataError,
		ThrowOnError
	>({
		...options,
		url: "/accounts/{accountName}/sign-typed-data",
	});
};

/**
 * Deploys a contract using the provided account name and deployment input.
 */
export const accountsDeployContract = <ThrowOnError extends boolean = false>(
	options: Options<AccountsDeployContractData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountsDeployContractResponse,
		AccountsDeployContractError,
		ThrowOnError
	>({
		...options,
		url: "/accounts/{accountName}/deploy",
	});
};

/**
 * Broadcasts a transaction using the provided account name and transaction details.
 */
export const accountsBroadcastEthreeumTransaction = <
	ThrowOnError extends boolean = false,
>(
	options: Options<AccountsBroadcastEthreeumTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountsBroadcastEthreeumTransactionResponse,
		AccountsBroadcastEthreeumTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/accounts/{accountName}/broadcast-tx",
	});
};

/**
 * Encodes data using the provided ABI and function parameters.
 */
export const accountsEncodeAbiData = <ThrowOnError extends boolean = false>(
	options: Options<AccountsEncodeAbiDataData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountsEncodeAbiDataResponse,
		AccountsEncodeAbiDataError,
		ThrowOnError
	>({
		...options,
		url: "/accounts/encode-data",
	});
};

/**
 * Lists the accounts associated with the provided authorization token.
 */
export const bitcoinListAccounts = <ThrowOnError extends boolean = false>(
	options: Options<BitcoinListAccountsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		BitcoinListAccountsResponse,
		BitcoinListAccountsError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoin",
	});
};

/**
 * Creates a new Bitcoin account.
 */
export const bitcoinBitcoinCreateAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<BitcoinBitcoinCreateAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		BitcoinBitcoinCreateAccountResponse,
		BitcoinBitcoinCreateAccountError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoin",
	});
};

/**
 * Retrieves the account information for a given account name.
 */
export const bitcoinBitcoinGetAccount = <ThrowOnError extends boolean = false>(
	options: Options<BitcoinBitcoinGetAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		BitcoinBitcoinGetAccountResponse,
		BitcoinBitcoinGetAccountError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoin/{accountName}",
	});
};

/**
 * Signs a Bitcoin transaction using the provided account name and transaction input.
 */
export const bitcoinBitcoinSignTransaction = <
	ThrowOnError extends boolean = false,
>(
	options: Options<BitcoinBitcoinSignTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		BitcoinBitcoinSignTransactionResponse,
		BitcoinBitcoinSignTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoin/{accountName}/sign-tx",
	});
};

/**
 * Creates an SRC20 inscription using the provided account name and inscription input.
 */
export const bitcoinBitcoinCreateSrc20Inscription = <
	ThrowOnError extends boolean = false,
>(
	options: Options<BitcoinBitcoinCreateSrc20InscriptionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		BitcoinBitcoinCreateSrc20InscriptionResponse,
		BitcoinBitcoinCreateSrc20InscriptionError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoin/{accountName}/src20-inscription",
	});
};

/**
 * Creates a BRC20 transaction.
 */
export const bitcoinBitcoinCreateBrc20Transaction = <
	ThrowOnError extends boolean = false,
>(
	options: Options<BitcoinBitcoinCreateBrc20TransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		BitcoinBitcoinCreateBrc20TransactionResponse,
		BitcoinBitcoinCreateBrc20TransactionError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoin/{accountName}/brc20-tx",
	});
};

/**
 * Generates an unsigned PSBT (Partially Signed Bitcoin Transaction) hex string.
 */
export const bitcoinBitcoinGenerateUnsignedPsbtHex = <
	ThrowOnError extends boolean = false,
>(
	options: Options<BitcoinBitcoinGenerateUnsignedPsbtHexData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		BitcoinBitcoinGenerateUnsignedPsbtHexResponse,
		BitcoinBitcoinGenerateUnsignedPsbtHexError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoin/{accountName}/generate-unsigned-psbt",
	});
};

/**
 * Exports the account details for the specified account name.
 */
export const bitcoinBitcoinExportAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<BitcoinBitcoinExportAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		BitcoinBitcoinExportAccountResponse,
		BitcoinBitcoinExportAccountError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoin/{accountName}/export",
	});
};

/**
 * Deletes a Bitcoin account.
 */
export const bitcoinBitcoinDeleteAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<BitcoinBitcoinDeleteAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		BitcoinBitcoinDeleteAccountResponse,
		BitcoinBitcoinDeleteAccountError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoin/{accountName}/delete",
	});
};

/**
 * Lists Bitcoin Cash accounts associated with the provided authorization token.
 */
export const bitcoinCashListAccounts = <ThrowOnError extends boolean = false>(
	options: Options<BitcoinCashListAccountsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		BitcoinCashListAccountsResponse,
		BitcoinCashListAccountsError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoincash/accounts",
	});
};

/**
 * Creates a new Bitcoin Cash account.
 */
export const bitcoinCashBitcoinCashCreateAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<BitcoinCashBitcoinCashCreateAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		BitcoinCashBitcoinCashCreateAccountResponse,
		BitcoinCashBitcoinCashCreateAccountError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoincash/accounts",
	});
};

/**
 * Reads the account information for a given account name.
 */
export const bitcoinCashBitcoinCashGetAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<BitcoinCashBitcoinCashGetAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		BitcoinCashBitcoinCashGetAccountResponse,
		BitcoinCashBitcoinCashGetAccountError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoincash/accounts/{accountName}",
	});
};

/**
 * Exports the account details for the specified account name.
 */
export const bitcoinCashBitcoinCashExportAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<BitcoinCashBitcoinCashExportAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		BitcoinCashBitcoinCashExportAccountResponse,
		BitcoinCashBitcoinCashExportAccountError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoincash/accounts/{accountName}/export",
	});
};

/**
 * Deletes a Bitcoin Cash account.
 */
export const bitcoinCashBitcoinCashDeleteAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<BitcoinCashBitcoinCashDeleteAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		BitcoinCashBitcoinCashDeleteAccountResponse,
		BitcoinCashBitcoinCashDeleteAccountError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoincash/accounts/{accountName}/delete",
	});
};

/**
 * Signs a Bitcoin Cash transaction.
 */
export const bitcoinCashBitcoinCashSignTransaction = <
	ThrowOnError extends boolean = false,
>(
	options: Options<BitcoinCashBitcoinCashSignTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		BitcoinCashBitcoinCashSignTransactionResponse,
		BitcoinCashBitcoinCashSignTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoincash/accounts/{accountName}/sign-tx",
	});
};

/**
 * Signs a Bitcoin Cash transaction with a memo.
 */
export const bitcoinCashBitcoinCashSignTransactionWithMemo = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		BitcoinCashBitcoinCashSignTransactionWithMemoData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).post<
		BitcoinCashBitcoinCashSignTransactionWithMemoResponse,
		BitcoinCashBitcoinCashSignTransactionWithMemoError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoincash/accounts/{accountName}/memo-sign-tx",
	});
};

/**
 * Signs a Bitcoin transaction for the specified account.
 */
export const bitcoinCashBitcoinCashSignBitcoinTransaction = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		BitcoinCashBitcoinCashSignBitcoinTransactionData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).post<
		BitcoinCashBitcoinCashSignBitcoinTransactionResponse,
		BitcoinCashBitcoinCashSignBitcoinTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoincash/accounts/{accountName}/sign-btc-tx",
	});
};

/**
 * Generates an unsigned PSBT (Partially Signed Bitcoin Transaction) hex string.
 */
export const bitcoinCashBitcoinCashGenerateUnsignedPsbtHex = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		BitcoinCashBitcoinCashGenerateUnsignedPsbtHexData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).post<
		BitcoinCashBitcoinCashGenerateUnsignedPsbtHexResponse,
		BitcoinCashBitcoinCashGenerateUnsignedPsbtHexError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoincash/accounts/{accountName}/generate-unsigned-psbt",
	});
};

/**
 * Signs a Partially Signed Bitcoin Transaction (PSBT) using a key path and script path.
 */
export const bitcoinCashBitcoinCashSignPsbtWithKeyPathAndScriptPath = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		BitcoinCashBitcoinCashSignPsbtWithKeyPathAndScriptPathData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).post<
		BitcoinCashBitcoinCashSignPsbtWithKeyPathAndScriptPathResponse,
		BitcoinCashBitcoinCashSignPsbtWithKeyPathAndScriptPathError,
		ThrowOnError
	>({
		...options,
		url: "/bitcoincash/accounts/{accountName}/sign-psbt-with-key-path-and-script-path",
	});
};

/**
 * Retrieves the chart analysis for a given trading symbol and timeframe.
 */
export const chartsGetChartAnalysis = <ThrowOnError extends boolean = false>(
	options: Options<ChartsGetChartAnalysisData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ChartsGetChartAnalysisResponse,
		ChartsGetChartAnalysisError,
		ThrowOnError
	>({
		...options,
		url: "/data/analysis/{symbol}/{timeframe}",
	});
};

/**
 * Retrieves a list of components from the database.
 */
export const componentsGetComponents = <ThrowOnError extends boolean = false>(
	options: Options<ComponentsGetComponentsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ComponentsGetComponentsResponse,
		ComponentsGetComponentsError,
		ThrowOnError
	>({
		...options,
		url: "/components",
	});
};

/**
 * Creates a new component in the database.
 */
export const componentsCreateComponent = <ThrowOnError extends boolean = false>(
	options: Options<ComponentsCreateComponentData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ComponentsCreateComponentResponse,
		ComponentsCreateComponentError,
		ThrowOnError
	>({
		...options,
		url: "/components",
	});
};

/**
 * Retrieves a component by its ID.
 */
export const componentsGetComponent = <ThrowOnError extends boolean = false>(
	options: Options<ComponentsGetComponentData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ComponentsGetComponentResponse,
		ComponentsGetComponentError,
		ThrowOnError
	>({
		...options,
		url: "/components/{id}",
	});
};

/**
 *
 * Updates a component in the database.
 */
export const componentsUpdateComponent = <ThrowOnError extends boolean = false>(
	options: Options<ComponentsUpdateComponentData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ComponentsUpdateComponentResponse,
		ComponentsUpdateComponentError,
		ThrowOnError
	>({
		...options,
		url: "/components/{id}",
	});
};

/**
 * Searches for components similar to the specified query.
 */
export const componentsSearchComponents = <
	ThrowOnError extends boolean = false,
>(
	options: Options<ComponentsSearchComponentsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ComponentsSearchComponentsResponse,
		ComponentsSearchComponentsError,
		ThrowOnError
	>({
		...options,
		url: "/components/search",
	});
};

/**
 * Updates the embedding of a component's description.
 */
export const componentsUpdateEmbedding = <ThrowOnError extends boolean = false>(
	options: Options<ComponentsUpdateEmbeddingData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ComponentsUpdateEmbeddingResponse,
		ComponentsUpdateEmbeddingError,
		ThrowOnError
	>({
		...options,
		url: "/components/{id}/embedding",
	});
};

/**
 * Forces the embedding of a description for a component.
 */
export const componentsForceEmbedding = <ThrowOnError extends boolean = false>(
	options: Options<ComponentsForceEmbeddingData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ComponentsForceEmbeddingResponse,
		ComponentsForceEmbeddingError,
		ThrowOnError
	>({
		...options,
		url: "/components/{id}/embedding/force",
	});
};

/**
 * Retrieves the capabilities description of components from the database.
 */
export const componentsGetComponentCapabilitiesDescription = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		ComponentsGetComponentCapabilitiesDescriptionData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).get<
		ComponentsGetComponentCapabilitiesDescriptionResponse,
		ComponentsGetComponentCapabilitiesDescriptionError,
		ThrowOnError
	>({
		...options,
		url: "/components/capabilities",
	});
};

/**
 * Lists Cosmos accounts associated with the provided authorization token.
 */
export const cosmosCosmosListAccounts = <ThrowOnError extends boolean = false>(
	options: Options<CosmosCosmosListAccountsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		CosmosCosmosListAccountsResponse,
		CosmosCosmosListAccountsError,
		ThrowOnError
	>({
		...options,
		url: "/cosmos",
	});
};

/**
 * Creates a new Cosmos account.
 */
export const cosmosCosmosCreateAccount = <ThrowOnError extends boolean = false>(
	options: Options<CosmosCosmosCreateAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CosmosCosmosCreateAccountResponse,
		CosmosCosmosCreateAccountError,
		ThrowOnError
	>({
		...options,
		url: "/cosmos",
	});
};

/**
 * Retrieves account information from the Cosmos SDK.
 */
export const cosmosCosmosGetAccount = <ThrowOnError extends boolean = false>(
	options: Options<CosmosCosmosGetAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		CosmosCosmosGetAccountResponse,
		CosmosCosmosGetAccountError,
		ThrowOnError
	>({
		...options,
		url: "/cosmos/{accountName}",
	});
};

/**
 * Deletes an account in the Cosmos SDK.
 */
export const cosmosCosmosDeleteAccount = <ThrowOnError extends boolean = false>(
	options: Options<CosmosCosmosDeleteAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		CosmosCosmosDeleteAccountResponse,
		CosmosCosmosDeleteAccountError,
		ThrowOnError
	>({
		...options,
		url: "/cosmos/{accountName}",
	});
};

/**
 * Exports a Cosmos account.
 */
export const cosmosCosmosExportAccount = <ThrowOnError extends boolean = false>(
	options: Options<CosmosCosmosExportAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CosmosCosmosExportAccountResponse,
		CosmosCosmosExportAccountError,
		ThrowOnError
	>({
		...options,
		url: "/cosmos/{accountName}/export",
	});
};

/**
 * Signs a transfer transaction using the provided authorization token and account name.
 */
export const cosmosCosmosSignTransferTransaction = <
	ThrowOnError extends boolean = false,
>(
	options: Options<CosmosCosmosSignTransferTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CosmosCosmosSignTransferTransactionResponse,
		CosmosCosmosSignTransferTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/cosmos/{accountName}/sign-transfer",
	});
};

/**
 * Signs a message using the Cosmos SDK.
 */
export const cosmosCosmosSignMessage = <ThrowOnError extends boolean = false>(
	options: Options<CosmosCosmosSignMessageData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CosmosCosmosSignMessageResponse,
		CosmosCosmosSignMessageError,
		ThrowOnError
	>({
		...options,
		url: "/cosmos/{accountName}/sign-message",
	});
};

/**
 * Signs an IBC transfer transaction for a given account.
 */
export const cosmosCosmosSignIbcTransferTransaction = <
	ThrowOnError extends boolean = false,
>(
	options: Options<CosmosCosmosSignIbcTransferTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CosmosCosmosSignIbcTransferTransactionResponse,
		CosmosCosmosSignIbcTransferTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/cosmos/{accountName}/sign-ibc-transfer",
	});
};

/**
 * Retrieves the wallet balance for a given address.
 */
export const dataGetWalletTokenBalances = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DataGetWalletTokenBalancesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DataGetWalletTokenBalancesResponse,
		DataGetWalletTokenBalancesError,
		ThrowOnError
	>({
		...options,
		url: "/data/{address}/balance",
	});
};

/**
 * Retrieves the wallet history for a given address and blockchain chain.
 */
export const dataGetWalletTransactionHistory = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DataGetWalletTransactionHistoryData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DataGetWalletTransactionHistoryResponse,
		DataGetWalletTransactionHistoryError,
		ThrowOnError
	>({
		...options,
		url: "/data/{address}/history",
	});
};

/**
 * Retrieves token metadata from the Moralis service.
 */
export const dataGetTokensMetadata = <ThrowOnError extends boolean = false>(
	options: Options<DataGetTokensMetadataData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DataGetTokensMetadataResponse,
		DataGetTokensMetadataError,
		ThrowOnError
	>({
		...options,
		url: "/data/token-metadata",
	});
};

export const dataGetWalletNfTs = <ThrowOnError extends boolean = false>(
	options: Options<DataGetWalletNfTsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DataGetWalletNfTsResponse,
		DataGetWalletNfTsError,
		ThrowOnError
	>({
		...options,
		url: "/data/{address}/nfts",
	});
};

/**
 * Retrieves the user's portfolio based on the provided wallet address.
 */
export const dataGetUserWalletPortfolio = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DataGetUserWalletPortfolioData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DataGetUserWalletPortfolioResponse,
		DataGetUserWalletPortfolioError,
		ThrowOnError
	>({
		...options,
		url: "/data/{address}/portfolio",
	});
};

/**
 * Retrieves the status of a portfolio job.
 */
export const dataGetPortfolioFetchStatus = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DataGetPortfolioFetchStatusData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DataGetPortfolioFetchStatusResponse,
		DataGetPortfolioFetchStatusError,
		ThrowOnError
	>({
		...options,
		url: "/data/portfolio/status/{jobId}",
	});
};

/**
 * Executes a query using the LLMSupabaseQueryGenerator and returns the result.
 */
export const dataExecuteCustomSupabaseQuery = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DataExecuteCustomSupabaseQueryData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DataExecuteCustomSupabaseQueryResponse,
		DataExecuteCustomSupabaseQueryError,
		ThrowOnError
	>({
		...options,
		url: "/data/query",
	});
};

/**
 * Lists the accounts associated with the provided Dogecoin token.
 */
export const dogeCoinListAccounts = <ThrowOnError extends boolean = false>(
	options: Options<DogeCoinListAccountsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DogeCoinListAccountsResponse,
		DogeCoinListAccountsError,
		ThrowOnError
	>({
		...options,
		url: "/dogecoin",
	});
};

/**
 * Creates a new Dogecoin account.
 */
export const dogecoinDogeCoinCreateNewAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DogecoinDogeCoinCreateNewAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DogecoinDogeCoinCreateNewAccountResponse,
		DogecoinDogeCoinCreateNewAccountError,
		ThrowOnError
	>({
		...options,
		url: "/dogecoin",
	});
};

/**
 * Retrieves the account information for a given account name.
 */
export const dogecoinDogeCoinGetAccountDetails = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DogecoinDogeCoinGetAccountDetailsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DogecoinDogeCoinGetAccountDetailsResponse,
		DogecoinDogeCoinGetAccountDetailsError,
		ThrowOnError
	>({
		...options,
		url: "/dogecoin/{accountName}",
	});
};

/**
 * Signs a Dogecoin transaction.
 */
export const dogecoinDogeCoinSignTransaction = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DogecoinDogeCoinSignTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DogecoinDogeCoinSignTransactionResponse,
		DogecoinDogeCoinSignTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/dogecoin/{accountName}/sign-tx",
	});
};

/**
 * Exports the account details for a given account name.
 */
export const dogecoinDogeCoinExportAccountDetails = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DogecoinDogeCoinExportAccountDetailsData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DogecoinDogeCoinExportAccountDetailsResponse,
		DogecoinDogeCoinExportAccountDetailsError,
		ThrowOnError
	>({
		...options,
		url: "/dogecoin/{accountName}/export",
	});
};

/**
 * Deletes a Dogecoin account.
 */
export const dogecoinDogeCoinDeleteAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DogecoinDogeCoinDeleteAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DogecoinDogeCoinDeleteAccountResponse,
		DogecoinDogeCoinDeleteAccountError,
		ThrowOnError
	>({
		...options,
		url: "/dogecoin/{accountName}/delete",
	});
};

/**
 * Signs a Dogecoin transaction with a memo.
 */
export const dogecoinDogeCoinSignTransactionWithMemo = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DogecoinDogeCoinSignTransactionWithMemoData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DogecoinDogeCoinSignTransactionWithMemoResponse,
		DogecoinDogeCoinSignTransactionWithMemoError,
		ThrowOnError
	>({
		...options,
		url: "/dogecoin/{accountName}/memo-sign-tx",
	});
};

/**
 * Resolves an ENS (Ethereum Name Service) name to its corresponding address.
 */
export const ensResolve = <ThrowOnError extends boolean = false>(
	options: Options<EnsResolveData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		EnsResolveResponse2,
		EnsResolveError,
		ThrowOnError
	>({
		...options,
		url: "/ens/resolve",
	});
};

/**
 * Resolves an ENS (Ethereum Name Service) address to its corresponding name.
 */
export const ensReverseResolve = <ThrowOnError extends boolean = false>(
	options: Options<EnsReverseResolveData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		EnsReverseResolveResponse,
		EnsReverseResolveError,
		ThrowOnError
	>({
		...options,
		url: "/ens/reverse",
	});
};

/**
 * Lists EOS accounts associated with the provided authorization token.
 */
export const listEosAccounts = <ThrowOnError extends boolean = false>(
	options: Options<ListEosAccountsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ListEosAccountsResponse,
		ListEosAccountsError,
		ThrowOnError
	>({
		...options,
		url: "/eos",
	});
};

/**
 * Creates a new EOS account.
 */
export const createEosAccount = <ThrowOnError extends boolean = false>(
	options: Options<CreateEosAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateEosAccountResponse,
		CreateEosAccountError,
		ThrowOnError
	>({
		...options,
		url: "/eos",
	});
};

/**
 * Retrieves account information from the EOS blockchain.
 */
export const getEosAccount = <ThrowOnError extends boolean = false>(
	options: Options<GetEosAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetEosAccountResponse,
		GetEosAccountError,
		ThrowOnError
	>({
		...options,
		url: "/eos/{accountName}",
	});
};

/**
 * Signs an EOS transaction.
 */
export const signEosTransaction = <ThrowOnError extends boolean = false>(
	options: Options<SignEosTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SignEosTransactionResponse,
		SignEosTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/eos/{accountName}/sign-tx",
	});
};

/**
 * Exports the account information for a given EOS account name.
 */
export const exportEosAccount = <ThrowOnError extends boolean = false>(
	options: Options<ExportEosAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ExportEosAccountResponse,
		ExportEosAccountError,
		ThrowOnError
	>({
		...options,
		url: "/eos/{accountName}/export",
	});
};

/**
 * Deletes an EOS account.
 */
export const deleteEosAccount = <ThrowOnError extends boolean = false>(
	options: Options<DeleteEosAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DeleteEosAccountResponse,
		DeleteEosAccountError,
		ThrowOnError
	>({
		...options,
		url: "/eos/{accountName}/delete",
	});
};

/**
 * Retrieves the balance of an ERC1155 token for a specific account.
 */
export const erc1155Erc1155BalanceOf = <ThrowOnError extends boolean = false>(
	options: Options<Erc1155Erc1155BalanceOfData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc1155Erc1155BalanceOfResponse,
		Erc1155Erc1155BalanceOfError,
		ThrowOnError
	>({
		...options,
		url: "/erc1155/{name}/balance-of",
	});
};

/**
 * Retrieves balances for multiple token IDs and accounts in a batch operation.
 */
export const erc1155Erc1155BalanceOfBatch = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc1155Erc1155BalanceOfBatchData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc1155Erc1155BalanceOfBatchResponse,
		Erc1155Erc1155BalanceOfBatchError,
		ThrowOnError
	>({
		...options,
		url: "/erc1155/{name}/balance-of-batch",
	});
};

/**
 * Enables or disables approval for a third party ("operator") to manage all tokens.
 */
export const erc1155Erc1155SetApprovalForAll = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc1155Erc1155SetApprovalForAllData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc1155Erc1155SetApprovalForAllResponse,
		Erc1155Erc1155SetApprovalForAllError,
		ThrowOnError
	>({
		...options,
		url: "/erc1155/{name}/set-approval-for-all",
	});
};

/**
 * Queries if an address is approved to manage all tokens of another address.
 */
export const erc1155Erc1155IsApprovedForAll = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc1155Erc1155IsApprovedForAllData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc1155Erc1155IsApprovedForAllResponse,
		Erc1155Erc1155IsApprovedForAllError,
		ThrowOnError
	>({
		...options,
		url: "/erc1155/{name}/is-approved-for-all",
	});
};

/**
 * Safely transfers a single token between addresses.
 */
export const erc1155Erc1155SafeTransferFrom = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc1155Erc1155SafeTransferFromData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc1155Erc1155SafeTransferFromResponse,
		Erc1155Erc1155SafeTransferFromError,
		ThrowOnError
	>({
		...options,
		url: "/erc1155/{name}/safe-transfer-from",
	});
};

/**
 * Safely transfers multiple tokens between addresses in a batch operation.
 */
export const erc1155Erc1155SafeBatchTransferFrom = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc1155Erc1155SafeBatchTransferFromData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc1155Erc1155SafeBatchTransferFromResponse,
		Erc1155Erc1155SafeBatchTransferFromError,
		ThrowOnError
	>({
		...options,
		url: "/erc1155/{name}/safe-batch-transfer-from",
	});
};

/**
 * Retrieves the number of decimals for the provided ERC20 token.
 */
export const erc20GetErc20TokenDecimals = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc20GetErc20TokenDecimalsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc20GetErc20TokenDecimalsResponse,
		Erc20GetErc20TokenDecimalsError,
		ThrowOnError
	>({
		...options,
		url: "/erc20/{account}/decimals",
	});
};

/**
 * Retrieves the symbol of an ERC20 token.
 */
export const erc20GetErc20TokenSymbol = <ThrowOnError extends boolean = false>(
	options: Options<Erc20GetErc20TokenSymbolData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc20GetErc20TokenSymbolResponse,
		Erc20GetErc20TokenSymbolError,
		ThrowOnError
	>({
		...options,
		url: "/erc20/{account}/symbol",
	});
};

/**
 * Retrieves the name of an ERC20 token.
 */
export const erc20GetErc20TokenName = <ThrowOnError extends boolean = false>(
	options: Options<Erc20GetErc20TokenNameData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc20GetErc20TokenNameResponse,
		Erc20GetErc20TokenNameError,
		ThrowOnError
	>({
		...options,
		url: "/erc20/{account}/name",
	});
};

/**
 * Retrieves the total supply of an ERC20 token.
 */
export const erc20GetErc20TokenTotalSupply = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc20GetErc20TokenTotalSupplyData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc20GetErc20TokenTotalSupplyResponse,
		Erc20GetErc20TokenTotalSupplyError,
		ThrowOnError
	>({
		...options,
		url: "/erc20/{account}/totalSupply",
	});
};

/**
 * Retrieves the balance of a specified ERC20 token for a given account.
 */
export const erc20GetErc20TokenBalance = <ThrowOnError extends boolean = false>(
	options: Options<Erc20GetErc20TokenBalanceData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc20GetErc20TokenBalanceResponse,
		Erc20GetErc20TokenBalanceError,
		ThrowOnError
	>({
		...options,
		url: "/erc20/{account}/balanceOf",
	});
};

/**
 * Retrieves the allowance of a specified ERC20 token for a given owner and spender.
 */
export const erc20GetErc20TokenAllowance = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc20GetErc20TokenAllowanceData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc20GetErc20TokenAllowanceResponse,
		Erc20GetErc20TokenAllowanceError,
		ThrowOnError
	>({
		...options,
		url: "/erc20/{account}/allowance",
	});
};

/**
 * Approves a specified address to spend tokens on behalf of the user.
 */
export const erc20ApproveErc20TokenSpending = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc20ApproveErc20TokenSpendingData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc20ApproveErc20TokenSpendingResponse,
		Erc20ApproveErc20TokenSpendingError,
		ThrowOnError
	>({
		...options,
		url: "/erc20/{address}/approve",
	});
};

/**
 * Transfers ERC20 tokens to a specified address.
 */
export const erc20TransferErc20Token = <ThrowOnError extends boolean = false>(
	options: Options<Erc20TransferErc20TokenData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc20TransferErc20TokenResponse,
		Erc20TransferErc20TokenError,
		ThrowOnError
	>({
		...options,
		url: "/erc20/{address}/transfer",
	});
};

/**
 * Transfers tokens from one address to another.
 */
export const erc20TransferFromErc20Token = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc20TransferFromErc20TokenData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc20TransferFromErc20TokenResponse,
		Erc20TransferFromErc20TokenError,
		ThrowOnError
	>({
		...options,
		url: "/erc20/{address}/transferFrom",
	});
};

/**
 * Retrieves the underlying asset address of the ERC4626 vault.
 */
export const erc4626GetErc4626Asset = <ThrowOnError extends boolean = false>(
	options: Options<Erc4626GetErc4626AssetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626AssetResponse,
		Erc4626GetErc4626AssetError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/asset",
	});
};

/**
 * Gets the total amount of underlying assets held by the vault.
 */
export const erc4626GetErc4626TotalAssets = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626GetErc4626TotalAssetsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626TotalAssetsResponse,
		Erc4626GetErc4626TotalAssetsError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/totalAssets",
	});
};

/**
 * Calculates the amount of shares that would be minted for a given amount of assets.
 */
export const erc4626GetErc4626ConvertToShares = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626GetErc4626ConvertToSharesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626ConvertToSharesResponse,
		Erc4626GetErc4626ConvertToSharesError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/convertToShares",
	});
};

/**
 * Calculates the amount of assets that would be withdrawn for a given amount of shares.
 */
export const erc4626GetErc4626ConvertToAssets = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626GetErc4626ConvertToAssetsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626ConvertToAssetsResponse,
		Erc4626GetErc4626ConvertToAssetsError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/convertToAssets",
	});
};

/**
 * Returns the maximum amount of assets that can be deposited in a single transaction.
 */
export const erc4626GetErc4626MaxDeposit = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626GetErc4626MaxDepositData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626MaxDepositResponse,
		Erc4626GetErc4626MaxDepositError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/maxDeposit",
	});
};

/**
 * Deposits assets into the vault and mints shares to the receiver.
 */
export const erc4626DepositToErc4626 = <ThrowOnError extends boolean = false>(
	options: Options<Erc4626DepositToErc4626Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc4626DepositToErc4626Response,
		Erc4626DepositToErc4626Error,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{address}/deposit",
	});
};

/**
 * Withdraws assets from the vault to the receiver.
 */
export const erc4626WithdrawFromErc4626 = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626WithdrawFromErc4626Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc4626WithdrawFromErc4626Response,
		Erc4626WithdrawFromErc4626Error,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{address}/withdraw",
	});
};

/**
 * Returns the maximum amount of shares that can be minted in a single transaction.
 */
export const erc4626GetErc4626MaxMint = <ThrowOnError extends boolean = false>(
	options: Options<Erc4626GetErc4626MaxMintData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626MaxMintResponse,
		Erc4626GetErc4626MaxMintError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/maxMint",
	});
};

/**
 * Returns the maximum amount of assets that can be withdrawn in a single transaction.
 */
export const erc4626GetErc4626MaxWithdraw = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626GetErc4626MaxWithdrawData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626MaxWithdrawResponse,
		Erc4626GetErc4626MaxWithdrawError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/maxWithdraw",
	});
};

/**
 * Returns the maximum amount of shares that can be redeemed in a single transaction.
 */
export const erc4626GetErc4626MaxRedeem = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626GetErc4626MaxRedeemData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626MaxRedeemResponse,
		Erc4626GetErc4626MaxRedeemError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/maxRedeem",
	});
};

/**
 * Simulates the amount of shares that would be received for a deposit of assets.
 */
export const erc4626GetErc4626PreviewDeposit = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626GetErc4626PreviewDepositData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626PreviewDepositResponse,
		Erc4626GetErc4626PreviewDepositError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/previewDeposit",
	});
};

/**
 * Simulates the amount of assets needed for minting a specific amount of shares.
 */
export const erc4626GetErc4626PreviewMint = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626GetErc4626PreviewMintData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626PreviewMintResponse,
		Erc4626GetErc4626PreviewMintError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/previewMint",
	});
};

/**
 * Simulates the amount of shares needed to withdraw a specific amount of assets.
 */
export const erc4626GetErc4626PreviewWithdraw = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626GetErc4626PreviewWithdrawData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626PreviewWithdrawResponse,
		Erc4626GetErc4626PreviewWithdrawError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/previewWithdraw",
	});
};

/**
 * Simulates the amount of assets that would be received for redeeming shares.
 */
export const erc4626GetErc4626PreviewRedeem = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626GetErc4626PreviewRedeemData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626PreviewRedeemResponse,
		Erc4626GetErc4626PreviewRedeemError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/previewRedeem",
	});
};

/**
 * Mints shares to the receiver by depositing exact amount of assets.
 */
export const erc4626MintErc4626Shares = <ThrowOnError extends boolean = false>(
	options: Options<Erc4626MintErc4626SharesData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc4626MintErc4626SharesResponse,
		Erc4626MintErc4626SharesError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{address}/mint",
	});
};

/**
 * Redeems shares from owner and sends exact amount of assets to receiver.
 */
export const erc4626RedeemErc4626Shares = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626RedeemErc4626SharesData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc4626RedeemErc4626SharesResponse,
		Erc4626RedeemErc4626SharesError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{address}/redeem",
	});
};

/**
 * Gets the total supply of shares.
 */
export const erc4626GetErc4626TotalSupply = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626GetErc4626TotalSupplyData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626TotalSupplyResponse,
		Erc4626GetErc4626TotalSupplyError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/totalSupply",
	});
};

/**
 * Gets the balance of shares for an account.
 */
export const erc4626GetErc4626BalanceOf = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626GetErc4626BalanceOfData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626BalanceOfResponse,
		Erc4626GetErc4626BalanceOfError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/balanceOf",
	});
};

/**
 * Gets the amount of shares that an owner has allowed a spender to use.
 */
export const erc4626GetErc4626Allowance = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626GetErc4626AllowanceData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc4626GetErc4626AllowanceResponse,
		Erc4626GetErc4626AllowanceError,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{account}/allowance",
	});
};

/**
 * Approves a spender to transfer a specific amount of shares.
 */
export const erc4626ApproveErc4626 = <ThrowOnError extends boolean = false>(
	options: Options<Erc4626ApproveErc4626Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc4626ApproveErc4626Response,
		Erc4626ApproveErc4626Error,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{address}/approve",
	});
};

/**
 * Transfers shares to a specified address.
 */
export const erc4626TransferErc4626 = <ThrowOnError extends boolean = false>(
	options: Options<Erc4626TransferErc4626Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc4626TransferErc4626Response,
		Erc4626TransferErc4626Error,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{address}/transfer",
	});
};

/**
 * Transfers shares from one address to another.
 */
export const erc4626TransferFromErc4626 = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc4626TransferFromErc4626Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc4626TransferFromErc4626Response,
		Erc4626TransferFromErc4626Error,
		ThrowOnError
	>({
		...options,
		url: "/erc4626/{address}/transferFrom",
	});
};

/**
 * Retrieves the balance of ERC721 tokens for a given account.
 */
export const erc721GetErc721BalanceOf = <ThrowOnError extends boolean = false>(
	options: Options<Erc721GetErc721BalanceOfData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc721GetErc721BalanceOfResponse,
		Erc721GetErc721BalanceOfError,
		ThrowOnError
	>({
		...options,
		url: "/erc721/{account}/balanceOf",
	});
};

/**
 * Retrieves the owner of a specified ERC721 token.
 */
export const erc721GetErc721OwnerOf = <ThrowOnError extends boolean = false>(
	options: Options<Erc721GetErc721OwnerOfData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc721GetErc721OwnerOfResponse,
		Erc721GetErc721OwnerOfError,
		ThrowOnError
	>({
		...options,
		url: "/erc721/{tokenId}/ownerOf",
	});
};

/**
 * Retrieves the name of an ERC721 token.
 */
export const erc721GetErc721Name = <ThrowOnError extends boolean = false>(
	options: Options<Erc721GetErc721NameData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc721GetErc721NameResponse,
		Erc721GetErc721NameError,
		ThrowOnError
	>({
		...options,
		url: "/erc721/name",
	});
};

/**
 * Retrieves the symbol of an ERC721 token.
 */
export const erc721GetErc721Symbol = <ThrowOnError extends boolean = false>(
	options: Options<Erc721GetErc721SymbolData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc721GetErc721SymbolResponse,
		Erc721GetErc721SymbolError,
		ThrowOnError
	>({
		...options,
		url: "/erc721/symbol",
	});
};

/**
 * Retrieves the token URI for a given ERC721 token.
 */
export const erc721GetErc721TokenUri = <ThrowOnError extends boolean = false>(
	options: Options<Erc721GetErc721TokenUriData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc721GetErc721TokenUriResponse,
		Erc721GetErc721TokenUriError,
		ThrowOnError
	>({
		...options,
		url: "/erc721/{tokenId}/tokenURI",
	});
};

/**
 * Retrieves the approved address for a specific ERC721 token.
 */
export const erc721GetErc721Approved = <ThrowOnError extends boolean = false>(
	options: Options<Erc721GetErc721ApprovedData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc721GetErc721ApprovedResponse,
		Erc721GetErc721ApprovedError,
		ThrowOnError
	>({
		...options,
		url: "/erc721/{tokenId}/getApproved",
	});
};

/**
 * Checks if an operator is approved to manage all assets of a given owner.
 */
export const erc721GetErc721IsApprovedForAll = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc721GetErc721IsApprovedForAllData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Erc721GetErc721IsApprovedForAllResponse,
		Erc721GetErc721IsApprovedForAllError,
		ThrowOnError
	>({
		...options,
		url: "/erc721/{owner}/{operator}/isApprovedForAll",
	});
};

/**
 * Approves an ERC721 token for a given address.
 */
export const erc721ApproveErc721 = <ThrowOnError extends boolean = false>(
	options: Options<Erc721ApproveErc721Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc721ApproveErc721Response,
		Erc721ApproveErc721Error,
		ThrowOnError
	>({
		...options,
		url: "/erc721/{address}/approve",
	});
};

/**
 * Sets approval for all ERC721 tokens for a given address.
 */
export const erc721SetApprovalForAllErc721 = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc721SetApprovalForAllErc721Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc721SetApprovalForAllErc721Response,
		Erc721SetApprovalForAllErc721Error,
		ThrowOnError
	>({
		...options,
		url: "/erc721/{address}/setApprovalForAll",
	});
};

/**
 * Transfers an ERC721 token from one address to another.
 */
export const erc721TransferFromErc721 = <ThrowOnError extends boolean = false>(
	options: Options<Erc721TransferFromErc721Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc721TransferFromErc721Response,
		Erc721TransferFromErc721Error,
		ThrowOnError
	>({
		...options,
		url: "/erc721/{address}/transferFrom",
	});
};

/**
 * Safely transfers an ERC721 token from one address to another.
 */
export const erc721SafeTransferFromErc721 = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc721SafeTransferFromErc721Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc721SafeTransferFromErc721Response,
		Erc721SafeTransferFromErc721Error,
		ThrowOnError
	>({
		...options,
		url: "/erc721/{address}/safeTransferFrom",
	});
};

/**
 * Safely transfers an ERC721 token from one address to another with additional data.
 */
export const erc721SafeTransferFromWithDataErc721 = <
	ThrowOnError extends boolean = false,
>(
	options: Options<Erc721SafeTransferFromWithDataErc721Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Erc721SafeTransferFromWithDataErc721Response,
		Erc721SafeTransferFromWithDataErc721Error,
		ThrowOnError
	>({
		...options,
		url: "/erc721/{address}/safeTransferFromWithData",
	});
};

/**
 * Retrieves the company facts for a given ticker symbol.
 */
export const financialDatasetsGetCompanyFacts = <
	ThrowOnError extends boolean = false,
>(
	options: Options<FinancialDatasetsGetCompanyFactsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		FinancialDatasetsGetCompanyFactsResponse,
		FinancialDatasetsGetCompanyFactsError,
		ThrowOnError
	>({
		...options,
		url: "/financial-datasets/company-facts/{ticker}",
	});
};

/**
 * Retrieves the income statements for a given ticker symbol.
 */
export const financialDatasetsGetIncomeStatements = <
	ThrowOnError extends boolean = false,
>(
	options: Options<FinancialDatasetsGetIncomeStatementsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		FinancialDatasetsGetIncomeStatementsResponse,
		FinancialDatasetsGetIncomeStatementsError,
		ThrowOnError
	>({
		...options,
		url: "/financial-datasets/income-statements/{ticker}",
	});
};

/**
 * Retrieves the balance sheets for a given ticker symbol.
 */
export const financialDatasetsGetBalanceSheets = <
	ThrowOnError extends boolean = false,
>(
	options: Options<FinancialDatasetsGetBalanceSheetsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		FinancialDatasetsGetBalanceSheetsResponse,
		FinancialDatasetsGetBalanceSheetsError,
		ThrowOnError
	>({
		...options,
		url: "/financial-datasets/balance-sheets/{ticker}",
	});
};

/**
 * Retrieves the cash flow statements for a given ticker symbol.
 */
export const financialDatasetsGetCashFlowStatements = <
	ThrowOnError extends boolean = false,
>(
	options: Options<FinancialDatasetsGetCashFlowStatementsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		FinancialDatasetsGetCashFlowStatementsResponse,
		FinancialDatasetsGetCashFlowStatementsError,
		ThrowOnError
	>({
		...options,
		url: "/financial-datasets/cash-flow-statements/{ticker}",
	});
};

/**
 * Retrieves the segmented revenues for a given ticker symbol.
 */
export const financialDatasetsGetSegmentedRevenues = <
	ThrowOnError extends boolean = false,
>(
	options: Options<FinancialDatasetsGetSegmentedRevenuesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		FinancialDatasetsGetSegmentedRevenuesResponse,
		FinancialDatasetsGetSegmentedRevenuesError,
		ThrowOnError
	>({
		...options,
		url: "/financial-datasets/segmented-revenues/{ticker}",
	});
};

/**
 * Retrieves all financials for a given ticker symbol.
 */
export const financialDatasetsGetAllFinancials = <
	ThrowOnError extends boolean = false,
>(
	options: Options<FinancialDatasetsGetAllFinancialsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		FinancialDatasetsGetAllFinancialsResponse,
		FinancialDatasetsGetAllFinancialsError,
		ThrowOnError
	>({
		...options,
		url: "/financial-datasets/all-financials/{ticker}",
	});
};

/**
 * Retrieves the available tickers.
 */
export const financialDatasetsGetAvailableTickers = <
	ThrowOnError extends boolean = false,
>(
	options: Options<FinancialDatasetsGetAvailableTickersData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		FinancialDatasetsGetAvailableTickersResponse,
		FinancialDatasetsGetAvailableTickersError,
		ThrowOnError
	>({
		...options,
		url: "/financial-datasets/available-tickers",
	});
};

/**
 * Retrieves the insider transactions for a given ticker symbol.
 */
export const financialDatasetsGetInsiderTransactions = <
	ThrowOnError extends boolean = false,
>(
	options: Options<FinancialDatasetsGetInsiderTransactionsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		FinancialDatasetsGetInsiderTransactionsResponse,
		FinancialDatasetsGetInsiderTransactionsError,
		ThrowOnError
	>({
		...options,
		url: "/financial-datasets/insider-transactions/{ticker}",
	});
};

/**
 * Retrieves the options chain for a given ticker symbol.
 */
export const financialDatasetsGetOptionsChain = <
	ThrowOnError extends boolean = false,
>(
	options: Options<FinancialDatasetsGetOptionsChainData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		FinancialDatasetsGetOptionsChainResponse,
		FinancialDatasetsGetOptionsChainError,
		ThrowOnError
	>({
		...options,
		url: "/financial-datasets/options-chain/{ticker}",
	});
};

/**
 * Retrieves the price data for a given ticker symbol.
 */
export const financialDatasetsGetPrices = <
	ThrowOnError extends boolean = false,
>(
	options: Options<FinancialDatasetsGetPricesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		FinancialDatasetsGetPricesResponse,
		FinancialDatasetsGetPricesError,
		ThrowOnError
	>({
		...options,
		url: "/financial-datasets/prices/{ticker}",
	});
};

/**
 * Searches financials for a given search request.
 */
export const financialDatasetsSearchFinancials = <
	ThrowOnError extends boolean = false,
>(
	options: Options<FinancialDatasetsSearchFinancialsData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		FinancialDatasetsSearchFinancialsResponse,
		FinancialDatasetsSearchFinancialsError,
		ThrowOnError
	>({
		...options,
		url: "/financial-datasets/search-financials",
	});
};

/**
 * Retrieves the price snapshot for a given ticker symbol.
 */
export const financialDatasetsGetPriceSnapshot = <
	ThrowOnError extends boolean = false,
>(
	options: Options<FinancialDatasetsGetPriceSnapshotData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		FinancialDatasetsGetPriceSnapshotResponse,
		FinancialDatasetsGetPriceSnapshotError,
		ThrowOnError
	>({
		...options,
		url: "/financial-datasets/price-snapshot/{ticker}",
	});
};

/**
 * Searches financials by line items.
 */
export const financialDatasetsSearchFinancialsByLineItems = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		FinancialDatasetsSearchFinancialsByLineItemsData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).post<
		FinancialDatasetsSearchFinancialsByLineItemsResponse,
		FinancialDatasetsSearchFinancialsByLineItemsError,
		ThrowOnError
	>({
		...options,
		url: "/financial-datasets/search-line-items",
	});
};

/**
 * Retrieves the program ID to label mapping.
 */
export const jupiterGetProgramIdToLabel = <
	ThrowOnError extends boolean = false,
>(
	options: Options<JupiterGetProgramIdToLabelData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		JupiterGetProgramIdToLabelResponse,
		JupiterGetProgramIdToLabelError,
		ThrowOnError
	>({
		...options,
		url: "/jupiter/programIdToLabel",
	});
};

/**
 * Retrieves the indexed route map.
 */
export const jupiterGetIndexedRouteMap = <ThrowOnError extends boolean = false>(
	options: Options<JupiterGetIndexedRouteMapData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		JupiterGetIndexedRouteMapResponse,
		JupiterGetIndexedRouteMapError,
		ThrowOnError
	>({
		...options,
		url: "/jupiter/indexedRouteMap",
	});
};

/**
 * Retrieves the tokens available on the Jupiter platform.
 */
export const jupiterGetTokens = <ThrowOnError extends boolean = false>(
	options: Options<JupiterGetTokensData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		JupiterGetTokensResponse,
		JupiterGetTokensError,
		ThrowOnError
	>({
		...options,
		url: "/jupiter/tokens",
	});
};

/**
 * Retrieves the tokens available on the Jupiter platform.
 */
export const jupiterGetQuote = <ThrowOnError extends boolean = false>(
	options: Options<JupiterGetQuoteData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		JupiterGetQuoteResponse,
		JupiterGetQuoteError,
		ThrowOnError
	>({
		...options,
		url: "/jupiter/{accountName}/quote",
	});
};

/**
 * Handles the swap operation for a given account.
 */
export const jupiterSwap = <ThrowOnError extends boolean = false>(
	options: Options<JupiterSwapData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		JupiterSwapResponse,
		JupiterSwapError,
		ThrowOnError
	>({
		...options,
		url: "/jupiter/{accountName}/swap",
	});
};

/**
 * Retrieves swap instructions for a given account.
 */
export const jupiterGetSwapInstructions = <
	ThrowOnError extends boolean = false,
>(
	options: Options<JupiterGetSwapInstructionsData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		JupiterGetSwapInstructionsResponse,
		JupiterGetSwapInstructionsError,
		ThrowOnError
	>({
		...options,
		url: "/jupiter/{accountName}/swapInstructions",
	});
};

/**
 * Retrieves the total flash loan premium for a given lending pool.
 */
export const lendingPoolGetFlashLoanPremiumTotal = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LendingPoolGetFlashLoanPremiumTotalData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LendingPoolGetFlashLoanPremiumTotalResponse,
		LendingPoolGetFlashLoanPremiumTotalError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/flash-loan-premium",
	});
};

/**
 * Retrieves the revision number of a lending pool.
 */
export const lendingPoolGetLendingPoolRevision = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LendingPoolGetLendingPoolRevisionData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LendingPoolGetLendingPoolRevisionResponse,
		LendingPoolGetLendingPoolRevisionError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/revision",
	});
};

/**
 * Retrieves the maximum number of reserves from the lending pool.
 */
export const lendingPoolGetMaxNumberReserves = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LendingPoolGetMaxNumberReservesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LendingPoolGetMaxNumberReservesResponse,
		LendingPoolGetMaxNumberReservesError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/max-reserves",
	});
};

/**
 * Retrieves the maximum stable rate borrow size percentage from the lending pool.
 */
export const lendingPoolGetMaxStableRateBorrowSizePercent = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		LendingPoolGetMaxStableRateBorrowSizePercentData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).get<
		LendingPoolGetMaxStableRateBorrowSizePercentResponse,
		LendingPoolGetMaxStableRateBorrowSizePercentError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/max-stable-rate-borrow-size-percent",
	});
};

/**
 * Handles the borrowing process from the lending pool.
 */
export const lendingPoolBorrow = <ThrowOnError extends boolean = false>(
	options: Options<LendingPoolBorrowData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LendingPoolBorrowResponse,
		LendingPoolBorrowError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/{accountName}/borrow",
	});
};

/**
 * Handles the deposit operation for a lending pool.
 */
export const lendingPoolDeposit = <ThrowOnError extends boolean = false>(
	options: Options<LendingPoolDepositData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LendingPoolDepositResponse,
		LendingPoolDepositError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/{accountName}/deposit",
	});
};

/**
 * Executes a flash loan operation on the lending pool.
 */
export const lendingPoolFlashLoan = <ThrowOnError extends boolean = false>(
	options: Options<LendingPoolFlashLoanData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LendingPoolFlashLoanResponse,
		LendingPoolFlashLoanError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/{accountName}/flash-loan",
	});
};

/**
 * Repays a loan in the lending pool.
 */
export const lendingPoolRepay = <ThrowOnError extends boolean = false>(
	options: Options<LendingPoolRepayData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LendingPoolRepayResponse,
		LendingPoolRepayError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/{accountName}/repay",
	});
};

/**
 * Swaps the borrow rate mode for a given account in the lending pool.
 */
export const lendingPoolSwapBorrowRateMode = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LendingPoolSwapBorrowRateModeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LendingPoolSwapBorrowRateModeResponse,
		LendingPoolSwapBorrowRateModeError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/{accountName}/swap-borrow-rate-mode",
	});
};

/**
 * Sets the user's reserve as collateral.
 */
export const lendingPoolSetUserUseReserveAsCollateral = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LendingPoolSetUserUseReserveAsCollateralData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LendingPoolSetUserUseReserveAsCollateralResponse,
		LendingPoolSetUserUseReserveAsCollateralError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/{accountName}/set-user-use-reserve-as-collateral",
	});
};

/**
 * Handles the liquidation call for a lending pool.
 */
export const lendingPoolLiquidationCall = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LendingPoolLiquidationCallData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LendingPoolLiquidationCallResponse,
		LendingPoolLiquidationCallError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/{accountName}/liquidation-call",
	});
};

/**
 * Retrieves reserve data for a specific asset from the lending pool.
 */
export const lendingPoolGetReserveData = <ThrowOnError extends boolean = false>(
	options: Options<LendingPoolGetReserveDataData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LendingPoolGetReserveDataResponse,
		LendingPoolGetReserveDataError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/reserve-data",
	});
};

/**
 * Retrieves user account data from the lending pool.
 */
export const lendingPoolGetUserAccountData = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LendingPoolGetUserAccountDataData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LendingPoolGetUserAccountDataResponse,
		LendingPoolGetUserAccountDataError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/user-account-data",
	});
};

/**
 * Retrieves the list of reserves from the lending pool.
 */
export const lendingPoolGetReservesList = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LendingPoolGetReservesListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LendingPoolGetReservesListResponse,
		LendingPoolGetReservesListError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/reserves-list",
	});
};

/**
 * Retrieves the addresses provider from the lending pool instance.
 */
export const lendingPoolGetAddressesProvider = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LendingPoolGetAddressesProviderData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LendingPoolGetAddressesProviderResponse,
		LendingPoolGetAddressesProviderError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/addresses-provider",
	});
};

/**
 * Checks if the lending pool is paused.
 */
export const lendingPoolIsPaused = <ThrowOnError extends boolean = false>(
	options: Options<LendingPoolIsPausedData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LendingPoolIsPausedResponse,
		LendingPoolIsPausedError,
		ThrowOnError
	>({
		...options,
		url: "/lending-pool/paused",
	});
};

export const leveragerGetAddressesProvider = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LeveragerGetAddressesProviderData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LeveragerGetAddressesProviderResponse,
		LeveragerGetAddressesProviderError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/addresses-provider",
	});
};

export const leveragerGetDefaultAdminRole = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LeveragerGetDefaultAdminRoleData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LeveragerGetDefaultAdminRoleResponse,
		LeveragerGetDefaultAdminRoleError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/default-admin-role",
	});
};

export const leveragerGetLendingPool = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerGetLendingPoolData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LeveragerGetLendingPoolResponse,
		LeveragerGetLendingPoolError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/lending-pool",
	});
};

export const leveragerGetMinHf = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerGetMinHfData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LeveragerGetMinHfResponse,
		LeveragerGetMinHfError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/min-hf",
	});
};

export const leveragerIsPaused = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerIsPausedData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LeveragerIsPausedResponse,
		LeveragerIsPausedError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/paused",
	});
};

export const leveragerGetWeth = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerGetWethData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LeveragerGetWethResponse,
		LeveragerGetWethError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/weth",
	});
};

export const leveragerGetRoleAdmin = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerGetRoleAdminData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LeveragerGetRoleAdminResponse,
		LeveragerGetRoleAdminError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/role-admin",
	});
};

export const leveragerHasRole = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerHasRoleData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LeveragerHasRoleResponse,
		LeveragerHasRoleError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/has-role",
	});
};

export const leveragerSupportsInterface = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LeveragerSupportsInterfaceData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LeveragerSupportsInterfaceResponse,
		LeveragerSupportsInterfaceError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/supports-interface",
	});
};

export const leveragerDeleverageErc20 = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerDeleverageErc20Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LeveragerDeleverageErc20Response,
		LeveragerDeleverageErc20Error,
		ThrowOnError
	>({
		...options,
		url: "/leverager/{accountName}/deleverage-erc20",
	});
};

export const leveragerDeleverageNative = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerDeleverageNativeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LeveragerDeleverageNativeResponse,
		LeveragerDeleverageNativeError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/{accountName}/deleverage-native",
	});
};

export const leveragerExecuteOperation = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerExecuteOperationData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LeveragerExecuteOperationResponse,
		LeveragerExecuteOperationError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/{accountName}/execute-operation",
	});
};

export const leveragerGrantRole = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerGrantRoleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LeveragerGrantRoleResponse,
		LeveragerGrantRoleError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/{accountName}/grant-role",
	});
};

export const leveragerLeverageErc20 = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerLeverageErc20Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LeveragerLeverageErc20Response,
		LeveragerLeverageErc20Error,
		ThrowOnError
	>({
		...options,
		url: "/leverager/{accountName}/leverage-erc20",
	});
};

export const leveragerLeverageNative = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerLeverageNativeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LeveragerLeverageNativeResponse,
		LeveragerLeverageNativeError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/{accountName}/leverage-native",
	});
};

export const leveragerPause = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerPauseData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LeveragerPauseResponse,
		LeveragerPauseError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/{accountName}/pause",
	});
};

export const leveragerRenounceRole = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerRenounceRoleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LeveragerRenounceRoleResponse,
		LeveragerRenounceRoleError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/{accountName}/renounce-role",
	});
};

export const leveragerRevokeRole = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerRevokeRoleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LeveragerRevokeRoleResponse,
		LeveragerRevokeRoleError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/{accountName}/revoke-role",
	});
};

export const leveragerUnpause = <ThrowOnError extends boolean = false>(
	options: Options<LeveragerUnpauseData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LeveragerUnpauseResponse,
		LeveragerUnpauseError,
		ThrowOnError
	>({
		...options,
		url: "/leverager/{accountName}/unpause",
	});
};

/**
 * Retrieves a quote for a token swap between different chains.
 */
export const lifiGetQuote = <ThrowOnError extends boolean = false>(
	options: Options<LifiGetQuoteData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LifiGetQuoteResponse,
		LifiGetQuoteError,
		ThrowOnError
	>({
		...options,
		url: "/lifi/quote",
	});
};

/**
 * Handles the retrieval of a quote for a token swap between different chains.
 */
export const lifiPostQuote = <ThrowOnError extends boolean = false>(
	options: Options<LifiPostQuoteData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LifiPostQuoteResponse,
		LifiPostQuoteError,
		ThrowOnError
	>({
		...options,
		url: "/lifi/{accountName}/quote",
	});
};

/**
 * Retrieves the status of a transaction based on the provided transaction hash.
 */
export const lifiGetStatus = <ThrowOnError extends boolean = false>(
	options: Options<LifiGetStatusData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LifiGetStatusResponse,
		LifiGetStatusError,
		ThrowOnError
	>({
		...options,
		url: "/lifi/status",
	});
};

/**
 * Retrieves a list of supported chains.
 */
export const lifiGetChains = <ThrowOnError extends boolean = false>(
	options?: Options<LifiGetChainsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LifiGetChainsResponse,
		LifiGetChainsError,
		ThrowOnError
	>({
		...options,
		url: "/lifi/chains",
	});
};

/**
 * Retrieves tools based on the provided chains.
 */
export const getTools = <ThrowOnError extends boolean = false>(
	options?: Options<GetToolsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetToolsResponse,
		GetToolsError,
		ThrowOnError
	>({
		...options,
		url: "/lifi/tools",
	});
};

/**
 * Fetches tokens from the LiFi service.
 */
export const lifiGetTokens = <ThrowOnError extends boolean = false>(
	options?: Options<unknown, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LifiGetTokensResponse,
		LifiGetTokensError,
		ThrowOnError
	>({
		...options,
		url: "/lifi/tokens",
	});
};

/**
 * Fetches the details of a specified token on a given blockchain.
 */
export const lifiGetTokenDetails = <ThrowOnError extends boolean = false>(
	options: Options<LifiGetTokenDetailsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LifiGetTokenDetailsResponse,
		LifiGetTokenDetailsError,
		ThrowOnError
	>({
		...options,
		url: "/lifi/token",
	});
};

/**
 * Retrieves connections between specified chains and tokens.
 */
export const lifiGetConnections = <ThrowOnError extends boolean = false>(
	options: Options<LifiGetConnectionsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LifiGetConnectionsResponse,
		LifiGetConnectionsError,
		ThrowOnError
	>({
		...options,
		url: "/lifi/connections",
	});
};

/**
 * Retrieves all possible connections for a given chain and token.
 */
export const lifiGetAllPossibleConnections = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LifiGetAllPossibleConnectionsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LifiGetAllPossibleConnectionsResponse,
		LifiGetAllPossibleConnectionsError,
		ThrowOnError
	>({
		...options,
		url: "/lifi/allPossibleConnections",
	});
};

/**
 * Lists the accounts associated with the provided authorization token.
 */
export const listLitecoinAccounts = <ThrowOnError extends boolean = false>(
	options: Options<ListLitecoinAccountsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ListLitecoinAccountsResponse,
		ListLitecoinAccountsError,
		ThrowOnError
	>({
		...options,
		url: "/litecoin",
	});
};

/**
 * Creates a new Litecoin account.
 */
export const litecoinCreateLitecoinAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LitecoinCreateLitecoinAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LitecoinCreateLitecoinAccountResponse,
		LitecoinCreateLitecoinAccountError,
		ThrowOnError
	>({
		...options,
		url: "/litecoin",
	});
};

/**
 * Retrieves account information for a specified account name.
 */
export const litecoinGetLitecoinAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LitecoinGetLitecoinAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LitecoinGetLitecoinAccountResponse,
		LitecoinGetLitecoinAccountError,
		ThrowOnError
	>({
		...options,
		url: "/litecoin/{accountName}",
	});
};

/**
 * Signs a Litecoin transaction.
 */
export const litecoinSignLitecoinTransaction = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LitecoinSignLitecoinTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LitecoinSignLitecoinTransactionResponse,
		LitecoinSignLitecoinTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/litecoin/{accountName}/sign-tx",
	});
};

/**
 * Exports the account information for a given account name.
 */
export const litecoinExportLitecoinAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LitecoinExportLitecoinAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LitecoinExportLitecoinAccountResponse,
		LitecoinExportLitecoinAccountError,
		ThrowOnError
	>({
		...options,
		url: "/litecoin/{accountName}/export",
	});
};

/**
 * Deletes a Litecoin account.
 */
export const litecoinDeleteLitecoinAccount = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LitecoinDeleteLitecoinAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LitecoinDeleteLitecoinAccountResponse,
		LitecoinDeleteLitecoinAccountError,
		ThrowOnError
	>({
		...options,
		url: "/litecoin/{accountName}/delete",
	});
};

/**
 * Signs a Litecoin transaction with a memo.
 */
export const litecoinSignLitecoinTransactionWithMemo = <
	ThrowOnError extends boolean = false,
>(
	options: Options<LitecoinSignLitecoinTransactionWithMemoData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LitecoinSignLitecoinTransactionWithMemoResponse,
		LitecoinSignLitecoinTransactionWithMemoError,
		ThrowOnError
	>({
		...options,
		url: "/litecoin/{accountName}/memo-sign-tx",
	});
};

/**
 * Retrieves the assets using the provided authorization token.
 */
export const getAssets = <ThrowOnError extends boolean = false>(
	options: Options<GetAssetsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetAssetsResponse,
		GetAssetsError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/data/assets",
	});
};

/**
 * Retrieves an asset by its address.
 */
export const getAssetByAddress = <ThrowOnError extends boolean = false>(
	options: Options<GetAssetByAddressData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetAssetByAddressResponse,
		GetAssetByAddressError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/data/assets/{address}",
	});
};

export const getPools = <ThrowOnError extends boolean = false>(
	options: Options<GetPoolsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetPoolsResponse,
		GetPoolsError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/data/pools",
	});
};

export const getPoolByAddress = <ThrowOnError extends boolean = false>(
	options: Options<GetPoolByAddressData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetPoolByAddressResponse,
		GetPoolByAddressError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/data/pools/{address}",
	});
};

export const getPoolsByType = <ThrowOnError extends boolean = false>(
	options: Options<GetPoolsByTypeData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetPoolsByTypeResponse,
		GetPoolsByTypeError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/data/pools/type/{type}",
	});
};

export const getTopAprPools = <ThrowOnError extends boolean = false>(
	options: Options<GetTopAprPoolsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTopAprPoolsResponse,
		GetTopAprPoolsError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/data/pools/top-apr",
	});
};

export const getTotalValueLocked = <ThrowOnError extends boolean = false>(
	options: Options<GetTotalValueLockedData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTotalValueLockedResponse,
		GetTotalValueLockedError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/data/tvl",
	});
};

export const calculateOptimalVoteDistribution = <
	ThrowOnError extends boolean = false,
>(
	options: Options<CalculateOptimalVoteDistributionData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		CalculateOptimalVoteDistributionResponse,
		CalculateOptimalVoteDistributionError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/data/vote-distribution",
	});
};

export const getBalanceOf = <ThrowOnError extends boolean = false>(
	options: Options<GetBalanceOfData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetBalanceOfResponse,
		GetBalanceOfError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/balanceOf",
	});
};

export const getOwnerOf = <ThrowOnError extends boolean = false>(
	options: Options<GetOwnerOfData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetOwnerOfResponse,
		GetOwnerOfError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/ownerOf",
	});
};

export const getTokenUri = <ThrowOnError extends boolean = false>(
	options: Options<GetTokenUriData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTokenUriResponse,
		GetTokenUriError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/tokenURI",
	});
};

export const getLockDetails = <ThrowOnError extends boolean = false>(
	options: Options<GetLockDetailsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetLockDetailsResponse,
		GetLockDetailsError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/lockDetails",
	});
};

export const createLock = <ThrowOnError extends boolean = false>(
	options: Options<CreateLockData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateLockResponse,
		CreateLockError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/createLock",
	});
};

export const increaseLockAmount = <ThrowOnError extends boolean = false>(
	options: Options<IncreaseLockAmountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		IncreaseLockAmountResponse,
		IncreaseLockAmountError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/increaseLockAmount",
	});
};

export const increaseUnlockTime = <ThrowOnError extends boolean = false>(
	options: Options<IncreaseUnlockTimeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		IncreaseUnlockTimeResponse,
		IncreaseUnlockTimeError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/increaseUnlockTime",
	});
};

export const getTotalSupply = <ThrowOnError extends boolean = false>(
	options: Options<GetTotalSupplyData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTotalSupplyResponse,
		GetTotalSupplyError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/totalSupply",
	});
};

export const getTokenOfOwnerByIndex = <ThrowOnError extends boolean = false>(
	options: Options<GetTokenOfOwnerByIndexData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTokenOfOwnerByIndexResponse,
		GetTokenOfOwnerByIndexError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/tokenOfOwnerByIndex",
	});
};

export const getTokenByIndex = <ThrowOnError extends boolean = false>(
	options: Options<GetTokenByIndexData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTokenByIndexResponse,
		GetTokenByIndexError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/tokenByIndex",
	});
};

export const delegate = <ThrowOnError extends boolean = false>(
	options: Options<DelegateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DelegateResponse,
		DelegateError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/delegate",
	});
};

export const merge = <ThrowOnError extends boolean = false>(
	options: Options<MergeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		MergeResponse,
		MergeError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/merge",
	});
};

export const split = <ThrowOnError extends boolean = false>(
	options: Options<SplitData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SplitResponse,
		SplitError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/split",
	});
};

export const claim = <ThrowOnError extends boolean = false>(
	options: Options<ClaimData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ClaimResponse,
		ClaimError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/claim",
	});
};

export const unlockPermanent = <ThrowOnError extends boolean = false>(
	options: Options<UnlockPermanentData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		UnlockPermanentResponse,
		UnlockPermanentError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/unlockPermanent",
	});
};

export const getName = <ThrowOnError extends boolean = false>(
	options: Options<GetNameData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetNameResponse,
		GetNameError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/name",
	});
};

export const getSymbol = <ThrowOnError extends boolean = false>(
	options: Options<GetSymbolData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetSymbolResponse,
		GetSymbolError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/symbol",
	});
};

export const getApproved = <ThrowOnError extends boolean = false>(
	options: Options<GetApprovedData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetApprovedResponse,
		GetApprovedError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/getApproved",
	});
};

export const isApprovedForAll = <ThrowOnError extends boolean = false>(
	options: Options<IsApprovedForAllData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		IsApprovedForAllResponse,
		IsApprovedForAllError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/isApprovedForAll",
	});
};

export const getBalanceOfNft = <ThrowOnError extends boolean = false>(
	options: Options<GetBalanceOfNftData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetBalanceOfNftResponse,
		GetBalanceOfNftError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/balanceOfNFT",
	});
};

export const getBalanceOfNftAt = <ThrowOnError extends boolean = false>(
	options: Options<GetBalanceOfNftAtData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetBalanceOfNftAtResponse,
		GetBalanceOfNftAtError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/balanceOfNFTAt",
	});
};

export const getTotalNftsMinted = <ThrowOnError extends boolean = false>(
	options: Options<GetTotalNftsMintedData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTotalNftsMintedResponse,
		GetTotalNftsMintedError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/totalNftsMinted",
	});
};

export const getDelegates = <ThrowOnError extends boolean = false>(
	options: Options<GetDelegatesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetDelegatesResponse,
		GetDelegatesError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/delegates",
	});
};

export const getVotes = <ThrowOnError extends boolean = false>(
	options: Options<GetVotesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetVotesResponse,
		GetVotesError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/getVotes",
	});
};

export const getPastVotes = <ThrowOnError extends boolean = false>(
	options: Options<GetPastVotesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetPastVotesResponse,
		GetPastVotesError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/getPastVotes",
	});
};

export const getVestedPayout = <ThrowOnError extends boolean = false>(
	options: Options<GetVestedPayoutData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetVestedPayoutResponse,
		GetVestedPayoutError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/vestedPayout",
	});
};

export const getVestedPayoutAtTime = <ThrowOnError extends boolean = false>(
	options: Options<GetVestedPayoutAtTimeData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetVestedPayoutAtTimeResponse,
		GetVestedPayoutAtTimeError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/vestedPayoutAtTime",
	});
};

export const getVestingPayout = <ThrowOnError extends boolean = false>(
	options: Options<GetVestingPayoutData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetVestingPayoutResponse,
		GetVestingPayoutError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/vestingPayout",
	});
};

export const getVestingPeriod = <ThrowOnError extends boolean = false>(
	options: Options<GetVestingPeriodData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetVestingPeriodResponse,
		GetVestingPeriodError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/vestingPeriod",
	});
};

export const approve = <ThrowOnError extends boolean = false>(
	options: Options<ApproveData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ApproveResponse,
		ApproveError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/approve",
	});
};

export const setApprovalForAll = <ThrowOnError extends boolean = false>(
	options: Options<SetApprovalForAllData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SetApprovalForAllResponse,
		SetApprovalForAllError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/setApprovalForAll",
	});
};

export const transferFrom = <ThrowOnError extends boolean = false>(
	options: Options<TransferFromData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		TransferFromResponse,
		TransferFromError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/transferFrom",
	});
};

export const safeTransferFrom = <ThrowOnError extends boolean = false>(
	options: Options<SafeTransferFromData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SafeTransferFromResponse,
		SafeTransferFromError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/safeTransferFrom",
	});
};

export const burn = <ThrowOnError extends boolean = false>(
	options: Options<BurnData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		BurnResponse,
		BurnError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/burn",
	});
};

export const createDelegatedLockFor = <ThrowOnError extends boolean = false>(
	options: Options<CreateDelegatedLockForData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateDelegatedLockForResponse,
		CreateDelegatedLockForError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/createDelegatedLockFor",
	});
};

export const createLockFor = <ThrowOnError extends boolean = false>(
	options: Options<CreateLockForData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateLockForResponse,
		CreateLockForError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/createLockFor",
	});
};

export const checkpoint = <ThrowOnError extends boolean = false>(
	options: Options<CheckpointData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CheckpointResponse,
		CheckpointError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/checkpoint",
	});
};

export const checkpointDelegatee = <ThrowOnError extends boolean = false>(
	options: Options<CheckpointDelegateeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CheckpointDelegateeResponse,
		CheckpointDelegateeError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/checkpointDelegatee",
	});
};

export const setClaimApproval = <ThrowOnError extends boolean = false>(
	options: Options<SetClaimApprovalData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SetClaimApprovalResponse,
		SetClaimApprovalError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/setClaimApproval",
	});
};

export const setClaimApprovalForAll = <ThrowOnError extends boolean = false>(
	options: Options<SetClaimApprovalForAllData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SetClaimApprovalForAllResponse,
		SetClaimApprovalForAllError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/setClaimApprovalForAll",
	});
};

export const delegateBySig = <ThrowOnError extends boolean = false>(
	options: Options<DelegateBySigData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DelegateBySigResponse,
		DelegateBySigError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/delegateBySig",
	});
};

export const globalCheckpoint = <ThrowOnError extends boolean = false>(
	options: Options<GlobalCheckpointData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		GlobalCheckpointResponse,
		GlobalCheckpointError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/nft/{address}/globalCheckpoint",
	});
};

export const getFactory = <ThrowOnError extends boolean = false>(
	options: Options<GetFactoryData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetFactoryResponse,
		GetFactoryError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/router/factory",
	});
};

export const getWeth = <ThrowOnError extends boolean = false>(
	options: Options<GetWethData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetWethResponse,
		GetWethError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/router/wETH",
	});
};

export const getAmountOut = <ThrowOnError extends boolean = false>(
	options: Options<GetAmountOutData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetAmountOutResponse,
		GetAmountOutError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/router/getAmountOut",
	});
};

export const getAmountsOut = <ThrowOnError extends boolean = false>(
	options: Options<GetAmountsOutData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetAmountsOutResponse,
		GetAmountsOutError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/router/getAmountsOut",
	});
};

export const addLiquidity = <ThrowOnError extends boolean = false>(
	options: Options<AddLiquidityData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AddLiquidityResponse,
		AddLiquidityError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/router/{address}/addLiquidity",
	});
};

export const addLiquidityEth = <ThrowOnError extends boolean = false>(
	options: Options<AddLiquidityEthData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AddLiquidityEthResponse,
		AddLiquidityEthError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/router/{address}/addLiquidityETH",
	});
};

export const swapExactTokensForTokens = <ThrowOnError extends boolean = false>(
	options: Options<SwapExactTokensForTokensData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SwapExactTokensForTokensResponse,
		SwapExactTokensForTokensError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/router/{address}/swapExactTokensForTokens",
	});
};

export const swapExactEthForTokens = <ThrowOnError extends boolean = false>(
	options: Options<SwapExactEthForTokensData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SwapExactEthForTokensResponse,
		SwapExactEthForTokensError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/router/{address}/swapExactETHForTokens",
	});
};

export const swapExactTokensForEth = <ThrowOnError extends boolean = false>(
	options: Options<SwapExactTokensForEthData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SwapExactTokensForEthResponse,
		SwapExactTokensForEthError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/router/{address}/swapExactTokensForETH",
	});
};

export const getTotalWeight = <ThrowOnError extends boolean = false>(
	options: Options<GetTotalWeightData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTotalWeightResponse,
		GetTotalWeightError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/totalWeight",
	});
};

export const getWeights = <ThrowOnError extends boolean = false>(
	options: Options<GetWeightsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetWeightsResponse,
		GetWeightsError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/weights",
	});
};

export const isGauge = <ThrowOnError extends boolean = false>(
	options: Options<IsGaugeData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		IsGaugeResponse,
		IsGaugeError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/isGauge",
	});
};

export const isWhitelisted = <ThrowOnError extends boolean = false>(
	options: Options<IsWhitelistedData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		IsWhitelistedResponse,
		IsWhitelistedError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/isWhitelisted",
	});
};

export const getLastVoted = <ThrowOnError extends boolean = false>(
	options: Options<GetLastVotedData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetLastVotedResponse,
		GetLastVotedError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/lastVoted",
	});
};

export const getPoolVoteLength = <ThrowOnError extends boolean = false>(
	options: Options<GetPoolVoteLengthData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetPoolVoteLengthResponse,
		GetPoolVoteLengthError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/poolVoteLength",
	});
};

export const vote = <ThrowOnError extends boolean = false>(
	options: Options<VoteData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		VoteResponse,
		VoteError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/{address}/vote",
	});
};

export const reset = <ThrowOnError extends boolean = false>(
	options: Options<ResetData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ResetResponse,
		ResetError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/{address}/reset",
	});
};

export const poke = <ThrowOnError extends boolean = false>(
	options: Options<PokeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		PokeResponse,
		PokeError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/{address}/poke",
	});
};

export const createGauge = <ThrowOnError extends boolean = false>(
	options: Options<CreateGaugeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateGaugeResponse,
		CreateGaugeError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/{address}/createGauge",
	});
};

export const killGauge = <ThrowOnError extends boolean = false>(
	options: Options<KillGaugeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		KillGaugeResponse,
		KillGaugeError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/{address}/killGauge",
	});
};

export const reviveGauge = <ThrowOnError extends boolean = false>(
	options: Options<ReviveGaugeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ReviveGaugeResponse,
		ReviveGaugeError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/{address}/reviveGauge",
	});
};

export const notifyRewardAmount = <ThrowOnError extends boolean = false>(
	options: Options<NotifyRewardAmountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		NotifyRewardAmountResponse,
		NotifyRewardAmountError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/{address}/notifyRewardAmount",
	});
};

export const distribute = <ThrowOnError extends boolean = false>(
	options: Options<DistributeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DistributeResponse,
		DistributeError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/{address}/distribute",
	});
};

export const claimBribes = <ThrowOnError extends boolean = false>(
	options: Options<ClaimBribesData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ClaimBribesResponse,
		ClaimBribesError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/{address}/claimBribes",
	});
};

export const claimFees = <ThrowOnError extends boolean = false>(
	options: Options<ClaimFeesData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ClaimFeesResponse,
		ClaimFeesError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/{address}/claimFees",
	});
};

export const claimRewards = <ThrowOnError extends boolean = false>(
	options: Options<ClaimRewardsData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ClaimRewardsResponse,
		ClaimRewardsError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/{address}/claimRewards",
	});
};

export const whitelist = <ThrowOnError extends boolean = false>(
	options: Options<WhitelistData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		WhitelistResponse,
		WhitelistError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/{address}/whitelist",
	});
};

export const voteWithOptimalDistribution = <
	ThrowOnError extends boolean = false,
>(
	options: Options<VoteWithOptimalDistributionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		VoteWithOptimalDistributionResponse,
		VoteWithOptimalDistributionError,
		ThrowOnError
	>({
		...options,
		url: "/lynex/voter/{address}/voteWithOptimalDistribution",
	});
};

export const createJob = <ThrowOnError extends boolean = false>(
	options: Options<CreateJobData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateJobResponse,
		CreateJobError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/create-job",
	});
};

export const executeJob = <ThrowOnError extends boolean = false>(
	options: Options<ExecuteJobData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ExecuteJobResponse,
		ExecuteJobError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/execute-job/{jobId}",
	});
};

export const getJobResult = <ThrowOnError extends boolean = false>(
	options: Options<GetJobResultData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetJobResultResponse,
		GetJobResultError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/job-result/{jobId}",
	});
};

export const scheduleJob = <ThrowOnError extends boolean = false>(
	options: Options<ScheduleJobData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ScheduleJobResponse,
		ScheduleJobError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/schedule-job",
	});
};

export const unscheduleJob = <ThrowOnError extends boolean = false>(
	options: Options<UnscheduleJobData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		UnscheduleJobResponse,
		UnscheduleJobError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/unschedule-job/{jobId}",
	});
};

export const getScheduledJobs = <ThrowOnError extends boolean = false>(
	options: Options<GetScheduledJobsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetScheduledJobsResponse,
		GetScheduledJobsError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/scheduled-jobs",
	});
};

export const listJobs = <ThrowOnError extends boolean = false>(
	options: Options<ListJobsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ListJobsResponse,
		ListJobsError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/jobs",
	});
};

export const getJob = <ThrowOnError extends boolean = false>(
	options: Options<GetJobData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetJobResponse,
		GetJobError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/job/{jobId}",
	});
};

export const deleteJob = <ThrowOnError extends boolean = false>(
	options: Options<DeleteJobData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteJobResponse,
		DeleteJobError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/job/{jobId}",
	});
};

export const createFlow = <ThrowOnError extends boolean = false>(
	options: Options<CreateFlowData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateFlowResponse,
		CreateFlowError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/flows",
	});
};

export const listFlows = <ThrowOnError extends boolean = false>(
	options: Options<ListFlowsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ListFlowsResponse,
		ListFlowsError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/flows",
	});
};

export const getFlow = <ThrowOnError extends boolean = false>(
	options: Options<GetFlowData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetFlowResponse,
		GetFlowError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/flows/{flowId}",
	});
};

export const updateFlow = <ThrowOnError extends boolean = false>(
	options: Options<UpdateFlowData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		UpdateFlowResponse,
		UpdateFlowError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/flows/{flowId}",
	});
};

export const deleteFlow = <ThrowOnError extends boolean = false>(
	options: Options<DeleteFlowData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteFlowResponse,
		DeleteFlowError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/flows/{flowId}",
	});
};

export const createUserDefinedFunction = <ThrowOnError extends boolean = false>(
	options: Options<CreateUserDefinedFunctionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateUserDefinedFunctionResponse,
		CreateUserDefinedFunctionError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/user-defined-functions",
	});
};

export const listUserDefinedFunctions = <ThrowOnError extends boolean = false>(
	options: Options<ListUserDefinedFunctionsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ListUserDefinedFunctionsResponse,
		ListUserDefinedFunctionsError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/user-defined-functions",
	});
};

export const deleteUserDefinedFunction = <ThrowOnError extends boolean = false>(
	options: Options<DeleteUserDefinedFunctionData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteUserDefinedFunctionResponse,
		DeleteUserDefinedFunctionError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/user-defined-functions/{functionId}",
	});
};

export const getNotifications = <ThrowOnError extends boolean = false>(
	options: Options<GetNotificationsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetNotificationsResponse,
		GetNotificationsError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/notifications",
	});
};

export const markNotificationAsRead = <ThrowOnError extends boolean = false>(
	options: Options<MarkNotificationAsReadData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		MarkNotificationAsReadResponse,
		MarkNotificationAsReadError,
		ThrowOnError
	>({
		...options,
		url: "/multicall/notifications/{notificationId}/mark-as-read",
	});
};

/**
 * Handles the swap operation for the given account.
 */
export const odosSwapTokens = <ThrowOnError extends boolean = false>(
	options: Options<OdosSwapTokensData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		OdosSwapTokensResponse,
		OdosSwapTokensError,
		ThrowOnError
	>({
		...options,
		url: "/odos/{accountName}/swap",
	});
};

/**
 * Retrieves a quote for a given account and input body.
 */
export const odosGetQuote = <ThrowOnError extends boolean = false>(
	options: Options<OdosGetQuoteData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		OdosGetQuoteResponse,
		OdosGetQuoteError,
		ThrowOnError
	>({
		...options,
		url: "/odos/{accountName}/get-quote",
	});
};

export const getZapQuote = <ThrowOnError extends boolean = false>(
	options: Options<GetZapQuoteData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		GetZapQuoteResponse,
		GetZapQuoteError,
		ThrowOnError
	>({
		...options,
		url: "/odos/{accountName}/get-zap-quote",
	});
};

export const zap = <ThrowOnError extends boolean = false>(
	options: Options<ZapData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<ZapResponse, ZapError, ThrowOnError>({
		...options,
		url: "/odos/{accountName}/zap",
	});
};

/**
 * Assembles a transaction using the provided authorization token and request body.
 */
export const odosAssembleTransaction = <ThrowOnError extends boolean = false>(
	options: Options<OdosAssembleTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		OdosAssembleTransactionResponse,
		OdosAssembleTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/odos/assemble-transaction",
	});
};

/**
 * Retrieves the supported blockchain networks from the Odos API.
 */
export const odosGetSupportedChains = <ThrowOnError extends boolean = false>(
	options: Options<OdosGetSupportedChainsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OdosGetSupportedChainsResponse,
		OdosGetSupportedChainsError,
		ThrowOnError
	>({
		...options,
		url: "/odos/supported-chains",
	});
};

/**
 * Retrieves contract information from the Odos API.
 */
export const odosGetContractInfo = <ThrowOnError extends boolean = false>(
	options: Options<OdosGetContractInfoData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OdosGetContractInfoResponse,
		OdosGetContractInfoError,
		ThrowOnError
	>({
		...options,
		url: "/odos/contract-info",
	});
};

/**
 * Retrieves the router address for the specified version and chain ID.
 */
export const odosGetRouterAddress = <ThrowOnError extends boolean = false>(
	options: Options<OdosGetRouterAddressData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OdosGetRouterAddressResponse,
		OdosGetRouterAddressError,
		ThrowOnError
	>({
		...options,
		url: "/odos/router-address",
	});
};

/**
 * Retrieves the executor address from the Odos API.
 */
export const odosGetExecutorAddress = <ThrowOnError extends boolean = false>(
	options: Options<OdosGetExecutorAddressData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OdosGetExecutorAddressResponse,
		OdosGetExecutorAddressError,
		ThrowOnError
	>({
		...options,
		url: "/odos/executor-address",
	});
};

/**
 * Retrieves liquidity sources for a given chain ID.
 */
export const odosGetLiquiditySources = <ThrowOnError extends boolean = false>(
	options: Options<OdosGetLiquiditySourcesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OdosGetLiquiditySourcesResponse,
		OdosGetLiquiditySourcesError,
		ThrowOnError
	>({
		...options,
		url: "/odos/liquidity-sources",
	});
};

/**
 * Retrieves the supported tokens for a given blockchain network.
 */
export const odosGetSupportedTokens = <ThrowOnError extends boolean = false>(
	options: Options<OdosGetSupportedTokensData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OdosGetSupportedTokensResponse,
		OdosGetSupportedTokensError,
		ThrowOnError
	>({
		...options,
		url: "/odos/supported-tokens",
	});
};

/**
 * Retrieves the current block information for a given blockchain.
 */
export const odosGetCurrentBlock = <ThrowOnError extends boolean = false>(
	options: Options<OdosGetCurrentBlockData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OdosGetCurrentBlockResponse,
		OdosGetCurrentBlockError,
		ThrowOnError
	>({
		...options,
		url: "/odos/current-block",
	});
};

export const onRamperGetSupportedCurrencies = <
	ThrowOnError extends boolean = false,
>(
	options: Options<OnRamperGetSupportedCurrenciesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OnRamperGetSupportedCurrenciesResponse,
		OnRamperGetSupportedCurrenciesError,
		ThrowOnError
	>({
		...options,
		url: "/onramper/currencies",
	});
};

export const onRamperGetSupportedPaymentTypes = <
	ThrowOnError extends boolean = false,
>(
	options: Options<OnRamperGetSupportedPaymentTypesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OnRamperGetSupportedPaymentTypesResponse,
		OnRamperGetSupportedPaymentTypesError,
		ThrowOnError
	>({
		...options,
		url: "/onramper/payment-types",
	});
};

export const onRamperGetSupportedPaymentTypesFiat = <
	ThrowOnError extends boolean = false,
>(
	options: Options<OnRamperGetSupportedPaymentTypesFiatData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OnRamperGetSupportedPaymentTypesFiatResponse,
		OnRamperGetSupportedPaymentTypesFiatError,
		ThrowOnError
	>({
		...options,
		url: "/onramper/payment-types/fiat",
	});
};

export const onRamperGetSupportedDefaultsAll = <
	ThrowOnError extends boolean = false,
>(
	options: Options<OnRamperGetSupportedDefaultsAllData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OnRamperGetSupportedDefaultsAllResponse,
		OnRamperGetSupportedDefaultsAllError,
		ThrowOnError
	>({
		...options,
		url: "/onramper/defaults",
	});
};

export const onRamperGetSupportedAssets = <
	ThrowOnError extends boolean = false,
>(
	options: Options<OnRamperGetSupportedAssetsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OnRamperGetSupportedAssetsResponse,
		OnRamperGetSupportedAssetsError,
		ThrowOnError
	>({
		...options,
		url: "/onramper/assets",
	});
};

export const onRamperGetSupportedOnRampsAll = <
	ThrowOnError extends boolean = false,
>(
	options: Options<OnRamperGetSupportedOnRampsAllData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OnRamperGetSupportedOnRampsAllResponse,
		OnRamperGetSupportedOnRampsAllError,
		ThrowOnError
	>({
		...options,
		url: "/onramper/onramps",
	});
};

export const onRamperGetQuotesBuy = <ThrowOnError extends boolean = false>(
	options: Options<OnRamperGetQuotesBuyData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OnRamperGetQuotesBuyResponse,
		OnRamperGetQuotesBuyError,
		ThrowOnError
	>({
		...options,
		url: "/onramper/quotes/buy",
	});
};

export const onRamperGetQuotesSell = <ThrowOnError extends boolean = false>(
	options: Options<OnRamperGetQuotesSellData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OnRamperGetQuotesSellResponse,
		OnRamperGetQuotesSellError,
		ThrowOnError
	>({
		...options,
		url: "/onramper/quotes/sell",
	});
};

export const onRamperCheckout = <ThrowOnError extends boolean = false>(
	options: Options<OnRamperCheckoutData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		OnRamperCheckoutResponse,
		OnRamperCheckoutError,
		ThrowOnError
	>({
		...options,
		url: "/onramper/fund/${accountName}",
	});
};

export const createOffer = <ThrowOnError extends boolean = false>(
	options: Options<CreateOfferData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateOfferResponse,
		CreateOfferError,
		ThrowOnError
	>({
		...options,
		url: "/opensea/{account}/createOffer",
	});
};

export const createCollectionOffer = <ThrowOnError extends boolean = false>(
	options: Options<CreateCollectionOfferData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateCollectionOfferResponse,
		CreateCollectionOfferError,
		ThrowOnError
	>({
		...options,
		url: "/opensea/{account}/createCollectionOffer",
	});
};

export const getCollection = <ThrowOnError extends boolean = false>(
	options: Options<GetCollectionData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetCollectionResponse,
		GetCollectionError,
		ThrowOnError
	>({
		...options,
		url: "/opensea/{account}/collection/{slug}",
	});
};

export const getNft = <ThrowOnError extends boolean = false>(
	options: Options<GetNftData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetNftResponse,
		GetNftError,
		ThrowOnError
	>({
		...options,
		url: "/opensea/{account}/nft/{address}/{tokenId}",
	});
};

export const wrapEth = <ThrowOnError extends boolean = false>(
	options: Options<WrapEthData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		WrapEthResponse,
		WrapEthError,
		ThrowOnError
	>({
		...options,
		url: "/opensea/{account}/wrapEth",
	});
};

export const unwrapWeth = <ThrowOnError extends boolean = false>(
	options: Options<UnwrapWethData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		UnwrapWethResponse,
		UnwrapWethError,
		ThrowOnError
	>({
		...options,
		url: "/opensea/{account}/unwrapWeth",
	});
};

export const getMessage = <ThrowOnError extends boolean = false>(
	options?: Options<unknown, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetMessageResponse,
		GetMessageError,
		ThrowOnError
	>({
		...options,
		url: "/ping",
	});
};

export const createOrder = <ThrowOnError extends boolean = false>(
	options: Options<CreateOrderData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateOrderResponse2,
		CreateOrderError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/createOrder",
	});
};

export const createMarketBuyOrder = <ThrowOnError extends boolean = false>(
	options: Options<CreateMarketBuyOrderData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateMarketBuyOrderResponse2,
		CreateMarketBuyOrderError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/createMarketBuyOrder",
	});
};

export const postOrder = <ThrowOnError extends boolean = false>(
	options: Options<PostOrderData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		PostOrderResponse2,
		PostOrderError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/postOrder",
	});
};

export const cancelOrder = <ThrowOnError extends boolean = false>(
	options: Options<CancelOrderData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CancelOrderResponse2,
		CancelOrderError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/cancelOrder",
	});
};

export const cancelOrders = <ThrowOnError extends boolean = false>(
	options: Options<CancelOrdersData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CancelOrdersResponse2,
		CancelOrdersError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/cancelOrders",
	});
};

export const cancelMarketOrders = <ThrowOnError extends boolean = false>(
	options: Options<CancelMarketOrdersData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CancelMarketOrdersResponse2,
		CancelMarketOrdersError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/cancelMarketOrders",
	});
};

export const updateBalanceAllowance = <ThrowOnError extends boolean = false>(
	options: Options<UpdateBalanceAllowanceData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		UpdateBalanceAllowanceResponse2,
		UpdateBalanceAllowanceError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/updateBalanceAllowance",
	});
};

export const dropNotifications = <ThrowOnError extends boolean = false>(
	options: Options<DropNotificationsData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DropNotificationsResponse2,
		DropNotificationsError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/dropNotifications",
	});
};

export const getMarkets = <ThrowOnError extends boolean = false>(
	options: Options<GetMarketsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetMarketsResponse,
		GetMarketsError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/markets",
	});
};

export const approveForPolymarket = <ThrowOnError extends boolean = false>(
	options: Options<ApproveForPolymarketData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ApproveForPolymarketResponse,
		ApproveForPolymarketError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/approveForPolymarket",
	});
};

export const getMarket = <ThrowOnError extends boolean = false>(
	options: Options<GetMarketData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetMarketResponse,
		GetMarketError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/market/{conditionID}",
	});
};

export const getOrderBook = <ThrowOnError extends boolean = false>(
	options: Options<GetOrderBookData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetOrderBookResponse,
		GetOrderBookError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/orderBook",
	});
};

export const getOpenOrders = <ThrowOnError extends boolean = false>(
	options: Options<GetOpenOrdersData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetOpenOrdersResponse,
		GetOpenOrdersError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/openOrders",
	});
};

export const getOrder = <ThrowOnError extends boolean = false>(
	options: Options<GetOrderData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetOrderResponse,
		GetOrderError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/order/{orderID}",
	});
};

export const getTrades = <ThrowOnError extends boolean = false>(
	options: Options<GetTradesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTradesResponse,
		GetTradesError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/trades",
	});
};

export const getNotifications1 = <ThrowOnError extends boolean = false>(
	options: Options<GetNotifications1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetNotifications1Response,
		GetNotifications1Error,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/notifications",
	});
};

export const getBalanceAllowance = <ThrowOnError extends boolean = false>(
	options: Options<GetBalanceAllowanceData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetBalanceAllowanceResponse,
		GetBalanceAllowanceError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/balanceAllowance",
	});
};

export const getPricesHistory = <ThrowOnError extends boolean = false>(
	options: Options<GetPricesHistoryData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetPricesHistoryResponse,
		GetPricesHistoryError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/pricesHistory",
	});
};

export const getMarketTradeEvents = <ThrowOnError extends boolean = false>(
	options: Options<GetMarketTradeEventsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetMarketTradeEventsResponse,
		GetMarketTradeEventsError,
		ThrowOnError
	>({
		...options,
		url: "/polymarket/{account}/marketTradeEvents/{conditionID}",
	});
};

export const getPools1 = <ThrowOnError extends boolean = false>(
	options: Options<GetPools1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetPools1Response,
		GetPools1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/data/pools",
	});
};

export const getPoolByAddress1 = <ThrowOnError extends boolean = false>(
	options: Options<GetPoolByAddress1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetPoolByAddress1Response,
		GetPoolByAddress1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/data/pools/{address}",
	});
};

export const getPoolsByType1 = <ThrowOnError extends boolean = false>(
	options: Options<GetPoolsByType1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetPoolsByType1Response,
		GetPoolsByType1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/data/pools/type/{type}",
	});
};

export const getTopAprPools1 = <ThrowOnError extends boolean = false>(
	options: Options<GetTopAprPools1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTopAprPools1Response,
		GetTopAprPools1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/data/pools/top-apr",
	});
};

export const getTokens = <ThrowOnError extends boolean = false>(
	options: Options<GetTokensData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTokensResponse,
		GetTokensError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/data/tokens",
	});
};

export const getInfo = <ThrowOnError extends boolean = false>(
	options: Options<GetInfoData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetInfoResponse,
		GetInfoError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/data/info",
	});
};

export const getTotalValueLocked1 = <ThrowOnError extends boolean = false>(
	options: Options<GetTotalValueLocked1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTotalValueLocked1Response,
		GetTotalValueLocked1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/data/tvl",
	});
};

export const calculateOptimalVoteDistribution1 = <
	ThrowOnError extends boolean = false,
>(
	options: Options<CalculateOptimalVoteDistribution1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		CalculateOptimalVoteDistribution1Response,
		CalculateOptimalVoteDistribution1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/data/vote-distribution",
	});
};

export const getBalanceOf1 = <ThrowOnError extends boolean = false>(
	options: Options<GetBalanceOf1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetBalanceOf1Response,
		GetBalanceOf1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/balanceOf",
	});
};

export const getOwnerOf1 = <ThrowOnError extends boolean = false>(
	options: Options<GetOwnerOf1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetOwnerOf1Response,
		GetOwnerOf1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/ownerOf",
	});
};

export const approve1 = <ThrowOnError extends boolean = false>(
	options: Options<Approve1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Approve1Response,
		Approve1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/{address}/approve",
	});
};

export const createLock1 = <ThrowOnError extends boolean = false>(
	options: Options<CreateLock1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateLock1Response,
		CreateLock1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/{address}/createLock",
	});
};

export const increaseAmount = <ThrowOnError extends boolean = false>(
	options: Options<IncreaseAmountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		IncreaseAmountResponse,
		IncreaseAmountError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/{address}/increaseAmount",
	});
};

export const increaseUnlockTime1 = <ThrowOnError extends boolean = false>(
	options: Options<IncreaseUnlockTime1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		IncreaseUnlockTime1Response,
		IncreaseUnlockTime1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/{address}/increaseUnlockTime",
	});
};

export const withdraw = <ThrowOnError extends boolean = false>(
	options: Options<WithdrawData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		WithdrawResponse,
		WithdrawError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/{address}/withdraw",
	});
};

export const getTokenUri1 = <ThrowOnError extends boolean = false>(
	options: Options<GetTokenUri1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTokenUri1Response,
		GetTokenUri1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/tokenURI",
	});
};

export const getTotalSupply1 = <ThrowOnError extends boolean = false>(
	options: Options<GetTotalSupply1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTotalSupply1Response,
		GetTotalSupply1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/totalSupply",
	});
};

export const delegate1 = <ThrowOnError extends boolean = false>(
	options: Options<Delegate1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Delegate1Response,
		Delegate1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/{address}/delegate",
	});
};

export const transferFrom1 = <ThrowOnError extends boolean = false>(
	options: Options<TransferFrom1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		TransferFrom1Response,
		TransferFrom1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/{address}/transferFrom",
	});
};

export const merge1 = <ThrowOnError extends boolean = false>(
	options: Options<Merge1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Merge1Response,
		Merge1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/{address}/merge",
	});
};

export const split1 = <ThrowOnError extends boolean = false>(
	options: Options<Split1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Split1Response,
		Split1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/{address}/split",
	});
};

export const getBalanceOfNft1 = <ThrowOnError extends boolean = false>(
	options: Options<GetBalanceOfNft1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetBalanceOfNft1Response,
		GetBalanceOfNft1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/balanceOfNFT",
	});
};

export const getLocked = <ThrowOnError extends boolean = false>(
	options: Options<GetLockedData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetLockedResponse,
		GetLockedError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/locked",
	});
};

export const getVotes1 = <ThrowOnError extends boolean = false>(
	options: Options<GetVotes1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetVotes1Response,
		GetVotes1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/getVotes",
	});
};

export const getPastVotes1 = <ThrowOnError extends boolean = false>(
	options: Options<GetPastVotes1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetPastVotes1Response,
		GetPastVotes1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/getPastVotes",
	});
};

export const getDelegates1 = <ThrowOnError extends boolean = false>(
	options: Options<GetDelegates1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetDelegates1Response,
		GetDelegates1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/delegates",
	});
};

export const abstain = <ThrowOnError extends boolean = false>(
	options: Options<AbstainData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AbstainResponse,
		AbstainError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/{address}/abstain",
	});
};

export const attach = <ThrowOnError extends boolean = false>(
	options: Options<AttachData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AttachResponse,
		AttachError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/{address}/attach",
	});
};

export const detach = <ThrowOnError extends boolean = false>(
	options: Options<DetachData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DetachResponse,
		DetachError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/nft/{address}/detach",
	});
};

export const unsafeSwapExactTokensForTokens = <
	ThrowOnError extends boolean = false,
>(
	options: Options<UnsafeSwapExactTokensForTokensData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		UnsafeSwapExactTokensForTokensResponse,
		UnsafeSwapExactTokensForTokensError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/{address}/UNSAFE_swapExactTokensForTokens",
	});
};

export const addLiquidity1 = <ThrowOnError extends boolean = false>(
	options: Options<AddLiquidity1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AddLiquidity1Response,
		AddLiquidity1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/{address}/addLiquidity",
	});
};

export const addLiquidityEth1 = <ThrowOnError extends boolean = false>(
	options: Options<AddLiquidityEth1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AddLiquidityEth1Response,
		AddLiquidityEth1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/{address}/addLiquidityETH",
	});
};

export const removeLiquidity = <ThrowOnError extends boolean = false>(
	options: Options<RemoveLiquidityData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		RemoveLiquidityResponse,
		RemoveLiquidityError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/{address}/removeLiquidity",
	});
};

export const removeLiquidityEth = <ThrowOnError extends boolean = false>(
	options: Options<RemoveLiquidityEthData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		RemoveLiquidityEthResponse,
		RemoveLiquidityEthError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/{address}/removeLiquidityETH",
	});
};

export const swapExactTokensForTokens1 = <ThrowOnError extends boolean = false>(
	options: Options<SwapExactTokensForTokens1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SwapExactTokensForTokens1Response,
		SwapExactTokensForTokens1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/{address}/swapExactTokensForTokens",
	});
};

export const swapExactEthForTokens1 = <ThrowOnError extends boolean = false>(
	options: Options<SwapExactEthForTokens1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SwapExactEthForTokens1Response,
		SwapExactEthForTokens1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/{address}/swapExactETHForTokens",
	});
};

export const swapExactTokensForEth1 = <ThrowOnError extends boolean = false>(
	options: Options<SwapExactTokensForEth1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SwapExactTokensForEth1Response,
		SwapExactTokensForEth1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/{address}/swapExactTokensForETH",
	});
};

export const getFactory1 = <ThrowOnError extends boolean = false>(
	options: Options<GetFactory1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetFactory1Response,
		GetFactory1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/factory",
	});
};

export const getAmountOut1 = <ThrowOnError extends boolean = false>(
	options: Options<GetAmountOut1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetAmountOut1Response,
		GetAmountOut1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/getAmountOut",
	});
};

export const getAmountsOut1 = <ThrowOnError extends boolean = false>(
	options: Options<GetAmountsOut1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetAmountsOut1Response,
		GetAmountsOut1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/getAmountsOut",
	});
};

export const getReserves = <ThrowOnError extends boolean = false>(
	options: Options<GetReservesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetReservesResponse,
		GetReservesError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/getReserves",
	});
};

export const isPair = <ThrowOnError extends boolean = false>(
	options: Options<IsPairData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		IsPairResponse,
		IsPairError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/isPair",
	});
};

export const pairFor = <ThrowOnError extends boolean = false>(
	options: Options<PairForData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		PairForResponse,
		PairForError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/pairFor",
	});
};

export const quoteAddLiquidity = <ThrowOnError extends boolean = false>(
	options: Options<QuoteAddLiquidityData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		QuoteAddLiquidityResponse,
		QuoteAddLiquidityError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/quoteAddLiquidity",
	});
};

export const quoteRemoveLiquidity = <ThrowOnError extends boolean = false>(
	options: Options<QuoteRemoveLiquidityData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		QuoteRemoveLiquidityResponse,
		QuoteRemoveLiquidityError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/quoteRemoveLiquidity",
	});
};

export const sortTokens = <ThrowOnError extends boolean = false>(
	options: Options<SortTokensData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		SortTokensResponse,
		SortTokensError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/sortTokens",
	});
};

export const getWeth1 = <ThrowOnError extends boolean = false>(
	options: Options<GetWeth1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetWeth1Response,
		GetWeth1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/router/weth",
	});
};

export const getTotalWeight1 = <ThrowOnError extends boolean = false>(
	options: Options<GetTotalWeight1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTotalWeight1Response,
		GetTotalWeight1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/totalWeight",
	});
};

export const getWeights1 = <ThrowOnError extends boolean = false>(
	options: Options<GetWeights1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetWeights1Response,
		GetWeights1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/weights",
	});
};

export const isGauge1 = <ThrowOnError extends boolean = false>(
	options: Options<IsGauge1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		IsGauge1Response,
		IsGauge1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/isGauge",
	});
};

export const isWhitelisted1 = <ThrowOnError extends boolean = false>(
	options: Options<IsWhitelisted1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		IsWhitelisted1Response,
		IsWhitelisted1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/isWhitelisted",
	});
};

export const getLastVoted1 = <ThrowOnError extends boolean = false>(
	options: Options<GetLastVoted1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetLastVoted1Response,
		GetLastVoted1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/lastVoted",
	});
};

export const vote1 = <ThrowOnError extends boolean = false>(
	options: Options<Vote1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Vote1Response,
		Vote1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/vote",
	});
};

export const reset1 = <ThrowOnError extends boolean = false>(
	options: Options<Reset1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Reset1Response,
		Reset1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/reset",
	});
};

export const poke1 = <ThrowOnError extends boolean = false>(
	options: Options<Poke1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Poke1Response,
		Poke1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/poke",
	});
};

export const attachTokenToGauge = <ThrowOnError extends boolean = false>(
	options: Options<AttachTokenToGaugeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AttachTokenToGaugeResponse,
		AttachTokenToGaugeError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/attachTokenToGauge",
	});
};

export const detachTokenFromGauge = <ThrowOnError extends boolean = false>(
	options: Options<DetachTokenFromGaugeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DetachTokenFromGaugeResponse,
		DetachTokenFromGaugeError,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/detachTokenFromGauge",
	});
};

export const createGauge1 = <ThrowOnError extends boolean = false>(
	options: Options<CreateGauge1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateGauge1Response,
		CreateGauge1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/createGauge",
	});
};

export const killGauge1 = <ThrowOnError extends boolean = false>(
	options: Options<KillGauge1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		KillGauge1Response,
		KillGauge1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/killGauge",
	});
};

export const reviveGauge1 = <ThrowOnError extends boolean = false>(
	options: Options<ReviveGauge1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ReviveGauge1Response,
		ReviveGauge1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/reviveGauge",
	});
};

export const notifyRewardAmount1 = <ThrowOnError extends boolean = false>(
	options: Options<NotifyRewardAmount1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		NotifyRewardAmount1Response,
		NotifyRewardAmount1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/notifyRewardAmount",
	});
};

export const distribute1 = <ThrowOnError extends boolean = false>(
	options: Options<Distribute1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Distribute1Response,
		Distribute1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/distribute",
	});
};

export const claimBribes1 = <ThrowOnError extends boolean = false>(
	options: Options<ClaimBribes1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ClaimBribes1Response,
		ClaimBribes1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/claimBribes",
	});
};

export const claimFees1 = <ThrowOnError extends boolean = false>(
	options: Options<ClaimFees1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ClaimFees1Response,
		ClaimFees1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/claimFees",
	});
};

export const claimRewards1 = <ThrowOnError extends boolean = false>(
	options: Options<ClaimRewards1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ClaimRewards1Response,
		ClaimRewards1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/claimRewards",
	});
};

export const whitelist1 = <ThrowOnError extends boolean = false>(
	options: Options<Whitelist1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Whitelist1Response,
		Whitelist1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/whitelist",
	});
};

export const voteWithOptimalDistribution1 = <
	ThrowOnError extends boolean = false,
>(
	options: Options<VoteWithOptimalDistribution1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		VoteWithOptimalDistribution1Response,
		VoteWithOptimalDistribution1Error,
		ThrowOnError
	>({
		...options,
		url: "/ramses/voter/{address}/voteWithOptimalDistribution",
	});
};

export const listRippleAccounts = <ThrowOnError extends boolean = false>(
	options: Options<ListRippleAccountsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ListRippleAccountsResponse,
		ListRippleAccountsError,
		ThrowOnError
	>({
		...options,
		url: "/ripple",
	});
};

export const createRippleAccount = <ThrowOnError extends boolean = false>(
	options: Options<CreateRippleAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateRippleAccountResponse,
		CreateRippleAccountError,
		ThrowOnError
	>({
		...options,
		url: "/ripple",
	});
};

export const getRippleAccount = <ThrowOnError extends boolean = false>(
	options: Options<GetRippleAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetRippleAccountResponse,
		GetRippleAccountError,
		ThrowOnError
	>({
		...options,
		url: "/ripple/{accountName}",
	});
};

export const signRippleTransaction = <ThrowOnError extends boolean = false>(
	options: Options<SignRippleTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SignRippleTransactionResponse,
		SignRippleTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/ripple/{accountName}/sign-tx",
	});
};

export const exportRippleAccount = <ThrowOnError extends boolean = false>(
	options: Options<ExportRippleAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ExportRippleAccountResponse,
		ExportRippleAccountError,
		ThrowOnError
	>({
		...options,
		url: "/ripple/{accountName}/export",
	});
};

export const deleteRippleAccount = <ThrowOnError extends boolean = false>(
	options: Options<DeleteRippleAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DeleteRippleAccountResponse,
		DeleteRippleAccountError,
		ThrowOnError
	>({
		...options,
		url: "/ripple/{accountName}/delete",
	});
};

export const listSolanaAccounts = <ThrowOnError extends boolean = false>(
	options: Options<ListSolanaAccountsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ListSolanaAccountsResponse,
		ListSolanaAccountsError,
		ThrowOnError
	>({
		...options,
		url: "/solana",
	});
};

export const createSolanaAccount = <ThrowOnError extends boolean = false>(
	options: Options<CreateSolanaAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateSolanaAccountResponse,
		CreateSolanaAccountError,
		ThrowOnError
	>({
		...options,
		url: "/solana",
	});
};

export const getSolanaAccount = <ThrowOnError extends boolean = false>(
	options: Options<GetSolanaAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetSolanaAccountResponse,
		GetSolanaAccountError,
		ThrowOnError
	>({
		...options,
		url: "/solana/{accountName}",
	});
};

export const signSolanaTransaction = <ThrowOnError extends boolean = false>(
	options: Options<SignSolanaTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SignSolanaTransactionResponse,
		SignSolanaTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/solana/{accountName}/sign-tx",
	});
};

export const multiSignSolanaTransaction = <
	ThrowOnError extends boolean = false,
>(
	options: Options<MultiSignSolanaTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		MultiSignSolanaTransactionResponse,
		MultiSignSolanaTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/solana/{accountName}/multi-sign-tx",
	});
};

export const transferSolanaTransaction = <ThrowOnError extends boolean = false>(
	options: Options<TransferSolanaTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		TransferSolanaTransactionResponse,
		TransferSolanaTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/solana/{accountName}/transfer",
	});
};

export const transferTokensSignSolanaTransaction = <
	ThrowOnError extends boolean = false,
>(
	options: Options<TransferTokensSignSolanaTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		TransferTokensSignSolanaTransactionResponse,
		TransferTokensSignSolanaTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/solana/{accountName}/transfer-tokens",
	});
};

export const exportSolanaAccount = <ThrowOnError extends boolean = false>(
	options: Options<ExportSolanaAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ExportSolanaAccountResponse,
		ExportSolanaAccountError,
		ThrowOnError
	>({
		...options,
		url: "/solana/{accountName}/export",
	});
};

export const deleteSolanaAccount = <ThrowOnError extends boolean = false>(
	options: Options<DeleteSolanaAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DeleteSolanaAccountResponse,
		DeleteSolanaAccountError,
		ThrowOnError
	>({
		...options,
		url: "/solana/{accountName}/delete",
	});
};

export const getFusions = <ThrowOnError extends boolean = false>(
	options: Options<GetFusionsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetFusionsResponse,
		GetFusionsError,
		ThrowOnError
	>({
		...options,
		url: "/thena/data/fusions",
	});
};

export const getFusionByAddress = <ThrowOnError extends boolean = false>(
	options: Options<GetFusionByAddressData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetFusionByAddressResponse,
		GetFusionByAddressError,
		ThrowOnError
	>({
		...options,
		url: "/thena/data/fusions/{address}",
	});
};

export const getFusionsByType = <ThrowOnError extends boolean = false>(
	options: Options<GetFusionsByTypeData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetFusionsByTypeResponse,
		GetFusionsByTypeError,
		ThrowOnError
	>({
		...options,
		url: "/thena/data/fusions/type/{type}",
	});
};

export const getTopAprFusions = <ThrowOnError extends boolean = false>(
	options: Options<GetTopAprFusionsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTopAprFusionsResponse,
		GetTopAprFusionsError,
		ThrowOnError
	>({
		...options,
		url: "/thena/data/fusions/top-apr",
	});
};

export const getTotalValueLocked2 = <ThrowOnError extends boolean = false>(
	options: Options<GetTotalValueLocked2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTotalValueLocked2Response,
		GetTotalValueLocked2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/data/tvl",
	});
};

export const getTopTokens = <ThrowOnError extends boolean = false>(
	options: Options<GetTopTokensData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTopTokensResponse,
		GetTopTokensError,
		ThrowOnError
	>({
		...options,
		url: "/thena/data/tokens/top",
	});
};

export const getTopPairs = <ThrowOnError extends boolean = false>(
	options: Options<GetTopPairsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTopPairsResponse,
		GetTopPairsError,
		ThrowOnError
	>({
		...options,
		url: "/thena/data/pairs/top",
	});
};

export const calculateOptimalVoteDistribution2 = <
	ThrowOnError extends boolean = false,
>(
	options: Options<CalculateOptimalVoteDistribution2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		CalculateOptimalVoteDistribution2Response,
		CalculateOptimalVoteDistribution2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/data/vote-distribution",
	});
};

export const getQuote = <ThrowOnError extends boolean = false>(
	options: Options<GetQuoteData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetQuoteResponse,
		GetQuoteError,
		ThrowOnError
	>({
		...options,
		url: "/thorswap/quote",
	});
};

export const swap = <ThrowOnError extends boolean = false>(
	options: Options<SwapData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SwapResponse,
		SwapError,
		ThrowOnError
	>({
		...options,
		url: "/thorswap/swap",
	});
};

export const getGasPrice = <ThrowOnError extends boolean = false>(
	options: Options<GetGasPriceData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetGasPriceResponse,
		GetGasPriceError,
		ThrowOnError
	>({
		...options,
		url: "/thorswap/gasPrice",
	});
};

export const getSupportedChains = <ThrowOnError extends boolean = false>(
	options: Options<GetSupportedChainsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetSupportedChainsResponse,
		GetSupportedChainsError,
		ThrowOnError
	>({
		...options,
		url: "/thorswap/supportedChains",
	});
};

export const getSupportedProviders = <ThrowOnError extends boolean = false>(
	options: Options<GetSupportedProvidersData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetSupportedProvidersResponse,
		GetSupportedProvidersError,
		ThrowOnError
	>({
		...options,
		url: "/thorswap/supportedProviders",
	});
};

/**
 * Lists accounts using the provided authorization token.
 */
export const tronListTronAccounts = <ThrowOnError extends boolean = false>(
	options: Options<TronListTronAccountsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		TronListTronAccountsResponse,
		TronListTronAccountsError,
		ThrowOnError
	>({
		...options,
		url: "/tron",
	});
};

/**
 * Creates a new account using the provided TronInput data.
 */
export const tronCreateTronAccount = <ThrowOnError extends boolean = false>(
	options: Options<TronCreateTronAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		TronCreateTronAccountResponse,
		TronCreateTronAccountError,
		ThrowOnError
	>({
		...options,
		url: "/tron",
	});
};

/**
 * Retrieves account information from the Tron blockchain.
 */
export const tronGetTronAccount = <ThrowOnError extends boolean = false>(
	options: Options<TronGetTronAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		TronGetTronAccountResponse,
		TronGetTronAccountError,
		ThrowOnError
	>({
		...options,
		url: "/tron/{accountName}",
	});
};

/**
 * Signs a Tron transaction using the provided account name and transaction input.
 */
export const tronSignTronTransaction = <ThrowOnError extends boolean = false>(
	options: Options<TronSignTronTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		TronSignTronTransactionResponse,
		TronSignTronTransactionError,
		ThrowOnError
	>({
		...options,
		url: "/tron/{accountName}/sign-tx",
	});
};

/**
 * Exports the account details for the specified account name.
 */
export const tronExportTronAccount = <ThrowOnError extends boolean = false>(
	options: Options<TronExportTronAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		TronExportTronAccountResponse,
		TronExportTronAccountError,
		ThrowOnError
	>({
		...options,
		url: "/tron/{accountName}/export",
	});
};

/**
 * Deletes an account using the provided account name and authorization token.
 */
export const tronDeleteTronAccount = <ThrowOnError extends boolean = false>(
	options: Options<TronDeleteTronAccountData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		TronDeleteTronAccountResponse,
		TronDeleteTronAccountError,
		ThrowOnError
	>({
		...options,
		url: "/tron/{accountName}/delete",
	});
};

export const getWeth2 = <ThrowOnError extends boolean = false>(
	options: Options<GetWeth2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetWeth2Response,
		GetWeth2Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/WETH",
	});
};

export const addLiquidity2 = <ThrowOnError extends boolean = false>(
	options: Options<AddLiquidity2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AddLiquidity2Response,
		AddLiquidity2Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/addLiquidity",
	});
};

export const addLiquidityEth2 = <ThrowOnError extends boolean = false>(
	options: Options<AddLiquidityEth2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AddLiquidityEth2Response,
		AddLiquidityEth2Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/addLiquidityETH",
	});
};

export const getAmountIn = <ThrowOnError extends boolean = false>(
	options: Options<GetAmountInData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		GetAmountInResponse,
		GetAmountInError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/getAmountIn",
	});
};

export const getAmountOut2 = <ThrowOnError extends boolean = false>(
	options: Options<GetAmountOut2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		GetAmountOut2Response,
		GetAmountOut2Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/getAmountOut",
	});
};

export const getAmountsIn = <ThrowOnError extends boolean = false>(
	options: Options<GetAmountsInData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		GetAmountsInResponse,
		GetAmountsInError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/getAmountsIn",
	});
};

export const getAmountsOut2 = <ThrowOnError extends boolean = false>(
	options: Options<GetAmountsOut2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		GetAmountsOut2Response,
		GetAmountsOut2Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/getAmountsOut",
	});
};

export const quote = <ThrowOnError extends boolean = false>(
	options: Options<QuoteData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		QuoteResponse,
		QuoteError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/quote",
	});
};

export const removeLiquidity1 = <ThrowOnError extends boolean = false>(
	options: Options<RemoveLiquidity1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		RemoveLiquidity1Response,
		RemoveLiquidity1Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/removeLiquidity",
	});
};

export const removeLiquidityEth1 = <ThrowOnError extends boolean = false>(
	options: Options<RemoveLiquidityEth1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		RemoveLiquidityEth1Response,
		RemoveLiquidityEth1Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/removeLiquidityETH",
	});
};

export const removeLiquidityEthSupportingFeeOnTransferTokens = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		RemoveLiquidityEthSupportingFeeOnTransferTokensData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).post<
		RemoveLiquidityEthSupportingFeeOnTransferTokensResponse,
		RemoveLiquidityEthSupportingFeeOnTransferTokensError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/removeLiquidityETHSupportingFeeOnTransferTokens",
	});
};

export const removeLiquidityEthWithPermit = <
	ThrowOnError extends boolean = false,
>(
	options: Options<RemoveLiquidityEthWithPermitData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		RemoveLiquidityEthWithPermitResponse,
		RemoveLiquidityEthWithPermitError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/removeLiquidityETHWithPermit",
	});
};

export const removeLiquidityEthWithPermitSupportingFeeOnTransferTokens = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		RemoveLiquidityEthWithPermitSupportingFeeOnTransferTokensData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).post<
		RemoveLiquidityEthWithPermitSupportingFeeOnTransferTokensResponse,
		RemoveLiquidityEthWithPermitSupportingFeeOnTransferTokensError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
	});
};

export const removeLiquidityWithPermit = <ThrowOnError extends boolean = false>(
	options: Options<RemoveLiquidityWithPermitData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		RemoveLiquidityWithPermitResponse,
		RemoveLiquidityWithPermitError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/removeLiquidityWithPermit",
	});
};

export const swapEthForExactTokens = <ThrowOnError extends boolean = false>(
	options: Options<SwapEthForExactTokensData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SwapEthForExactTokensResponse,
		SwapEthForExactTokensError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/swapETHForExactTokens",
	});
};

export const swapExactEthForTokens2 = <ThrowOnError extends boolean = false>(
	options: Options<SwapExactEthForTokens2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SwapExactEthForTokens2Response,
		SwapExactEthForTokens2Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/swapExactETHForTokens",
	});
};

export const swapExactEthForTokensSupportingFeeOnTransferTokens = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		SwapExactEthForTokensSupportingFeeOnTransferTokensData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).post<
		SwapExactEthForTokensSupportingFeeOnTransferTokensResponse,
		SwapExactEthForTokensSupportingFeeOnTransferTokensError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/swapExactETHForTokensSupportingFeeOnTransferTokens",
	});
};

export const swapExactTokensForEth2 = <ThrowOnError extends boolean = false>(
	options: Options<SwapExactTokensForEth2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SwapExactTokensForEth2Response,
		SwapExactTokensForEth2Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/swapExactTokensForETH",
	});
};

export const swapExactTokensForEthSupportingFeeOnTransferTokens = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		SwapExactTokensForEthSupportingFeeOnTransferTokensData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).post<
		SwapExactTokensForEthSupportingFeeOnTransferTokensResponse,
		SwapExactTokensForEthSupportingFeeOnTransferTokensError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/swapExactTokensForETHSupportingFeeOnTransferTokens",
	});
};

export const swapExactTokensForTokens2 = <ThrowOnError extends boolean = false>(
	options: Options<SwapExactTokensForTokens2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SwapExactTokensForTokens2Response,
		SwapExactTokensForTokens2Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/swapExactTokensForTokens",
	});
};

export const swapExactTokensForTokensSupportingFeeOnTransferTokens = <
	ThrowOnError extends boolean = false,
>(
	options: Options<
		SwapExactTokensForTokensSupportingFeeOnTransferTokensData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).post<
		SwapExactTokensForTokensSupportingFeeOnTransferTokensResponse,
		SwapExactTokensForTokensSupportingFeeOnTransferTokensError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/swapExactTokensForTokensSupportingFeeOnTransferTokens",
	});
};

export const swapTokensForExactEth = <ThrowOnError extends boolean = false>(
	options: Options<SwapTokensForExactEthData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SwapTokensForExactEthResponse,
		SwapTokensForExactEthError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/swapTokensForExactETH",
	});
};

export const swapTokensForExactTokens = <ThrowOnError extends boolean = false>(
	options: Options<SwapTokensForExactTokensData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SwapTokensForExactTokensResponse,
		SwapTokensForExactTokensError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v2/router/{account}/swapTokensForExactTokens",
	});
};

export const mint = <ThrowOnError extends boolean = false>(
	options: Options<MintData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		MintResponse,
		MintError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/{address}/mint",
	});
};

export const increaseLiquidity = <ThrowOnError extends boolean = false>(
	options: Options<IncreaseLiquidityData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		IncreaseLiquidityResponse,
		IncreaseLiquidityError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/{address}/increaseLiquidity",
	});
};

export const decreaseLiquidity = <ThrowOnError extends boolean = false>(
	options: Options<DecreaseLiquidityData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DecreaseLiquidityResponse,
		DecreaseLiquidityError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/{address}/decreaseLiquidity",
	});
};

export const collect = <ThrowOnError extends boolean = false>(
	options: Options<CollectData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CollectResponse,
		CollectError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/{address}/collect",
	});
};

export const burn1 = <ThrowOnError extends boolean = false>(
	options: Options<Burn1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Burn1Response,
		Burn1Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/{address}/burn",
	});
};

export const createAndInitializePoolIfNecessary = <
	ThrowOnError extends boolean = false,
>(
	options: Options<CreateAndInitializePoolIfNecessaryData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateAndInitializePoolIfNecessaryResponse,
		CreateAndInitializePoolIfNecessaryError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/{address}/createAndInitializePoolIfNecessary",
	});
};

export const approve2 = <ThrowOnError extends boolean = false>(
	options: Options<Approve2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Approve2Response,
		Approve2Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/{address}/approve",
	});
};

export const setApprovalForAll1 = <ThrowOnError extends boolean = false>(
	options: Options<SetApprovalForAll1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SetApprovalForAll1Response,
		SetApprovalForAll1Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/{address}/setApprovalForAll",
	});
};

export const transferFrom2 = <ThrowOnError extends boolean = false>(
	options: Options<TransferFrom2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		TransferFrom2Response,
		TransferFrom2Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/{address}/transferFrom",
	});
};

export const permit = <ThrowOnError extends boolean = false>(
	options: Options<PermitData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		PermitResponse,
		PermitError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/{address}/permit",
	});
};

export const multicall = <ThrowOnError extends boolean = false>(
	options: Options<MulticallData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		MulticallResponse,
		MulticallError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/{address}/multicall",
	});
};

export const sweepToken = <ThrowOnError extends boolean = false>(
	options: Options<SweepTokenData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SweepTokenResponse,
		SweepTokenError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/{address}/sweepToken",
	});
};

export const unwrapWeth9 = <ThrowOnError extends boolean = false>(
	options: Options<UnwrapWeth9Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		UnwrapWeth9Response,
		UnwrapWeth9Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/{address}/unwrapWETH9",
	});
};

export const refundEth = <ThrowOnError extends boolean = false>(
	options: Options<RefundEthData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		RefundEthResponse,
		RefundEthError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/{address}/refundETH",
	});
};

export const positions = <ThrowOnError extends boolean = false>(
	options: Options<PositionsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		PositionsResponse,
		PositionsError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/positions",
	});
};

export const tokenOfOwnerByIndex = <ThrowOnError extends boolean = false>(
	options: Options<TokenOfOwnerByIndexData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		TokenOfOwnerByIndexResponse,
		TokenOfOwnerByIndexError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/tokenOfOwnerByIndex",
	});
};

export const balanceOf = <ThrowOnError extends boolean = false>(
	options: Options<BalanceOfData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		BalanceOfResponse,
		BalanceOfError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/balanceOf",
	});
};

export const domainSeparator = <ThrowOnError extends boolean = false>(
	options: Options<DomainSeparatorData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DomainSeparatorResponse,
		DomainSeparatorError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/DOMAIN_SEPARATOR",
	});
};

export const permitTypehash = <ThrowOnError extends boolean = false>(
	options: Options<PermitTypehashData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		PermitTypehashResponse,
		PermitTypehashError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/PERMIT_TYPEHASH",
	});
};

export const weth9 = <ThrowOnError extends boolean = false>(
	options: Options<Weth9Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Weth9Response,
		Weth9Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/WETH9",
	});
};

export const factory = <ThrowOnError extends boolean = false>(
	options: Options<FactoryData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		FactoryResponse,
		FactoryError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/factory",
	});
};

export const name = <ThrowOnError extends boolean = false>(
	options: Options<NameData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<NameResponse, NameError, ThrowOnError>(
		{
			...options,
			url: "/uniswap/v3/nft/name",
		},
	);
};

export const symbol = <ThrowOnError extends boolean = false>(
	options: Options<SymbolData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		SymbolResponse,
		SymbolError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/symbol",
	});
};

export const tokenUri = <ThrowOnError extends boolean = false>(
	options: Options<TokenUriData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		TokenUriResponse,
		TokenUriError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/tokenURI",
	});
};

export const baseUri = <ThrowOnError extends boolean = false>(
	options: Options<BaseUriData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		BaseUriResponse,
		BaseUriError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/baseURI",
	});
};

export const ownerOf = <ThrowOnError extends boolean = false>(
	options: Options<OwnerOfData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OwnerOfResponse,
		OwnerOfError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/ownerOf",
	});
};

export const getApproved1 = <ThrowOnError extends boolean = false>(
	options: Options<GetApproved1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetApproved1Response,
		GetApproved1Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/getApproved",
	});
};

export const isApprovedForAll1 = <ThrowOnError extends boolean = false>(
	options: Options<IsApprovedForAll1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		IsApprovedForAll1Response,
		IsApprovedForAll1Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/isApprovedForAll",
	});
};

export const totalSupply = <ThrowOnError extends boolean = false>(
	options: Options<TotalSupplyData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		TotalSupplyResponse,
		TotalSupplyError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/totalSupply",
	});
};

export const tokenByIndex = <ThrowOnError extends boolean = false>(
	options: Options<TokenByIndexData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		TokenByIndexResponse,
		TokenByIndexError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/tokenByIndex",
	});
};

export const supportsInterface = <ThrowOnError extends boolean = false>(
	options: Options<SupportsInterfaceData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		SupportsInterfaceResponse,
		SupportsInterfaceError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/nft/supportsInterface",
	});
};

export const exactInput = <ThrowOnError extends boolean = false>(
	options: Options<ExactInputData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ExactInputResponse,
		ExactInputError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/{address}/exactInput",
	});
};

export const exactInputSingle = <ThrowOnError extends boolean = false>(
	options: Options<ExactInputSingleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ExactInputSingleResponse,
		ExactInputSingleError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/{address}/exactInputSingle",
	});
};

export const exactOutput = <ThrowOnError extends boolean = false>(
	options: Options<ExactOutputData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ExactOutputResponse,
		ExactOutputError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/{address}/exactOutput",
	});
};

export const exactOutputSingle = <ThrowOnError extends boolean = false>(
	options: Options<ExactOutputSingleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ExactOutputSingleResponse,
		ExactOutputSingleError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/{address}/exactOutputSingle",
	});
};

export const multicall1 = <ThrowOnError extends boolean = false>(
	options: Options<Multicall1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Multicall1Response,
		Multicall1Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/{address}/multicall",
	});
};

export const refundEth1 = <ThrowOnError extends boolean = false>(
	options: Options<RefundEth1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		RefundEth1Response,
		RefundEth1Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/{address}/refundETH",
	});
};

export const selfPermit = <ThrowOnError extends boolean = false>(
	options: Options<SelfPermitData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SelfPermitResponse,
		SelfPermitError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/{address}/selfPermit",
	});
};

export const selfPermitAllowed = <ThrowOnError extends boolean = false>(
	options: Options<SelfPermitAllowedData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SelfPermitAllowedResponse,
		SelfPermitAllowedError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/{address}/selfPermitAllowed",
	});
};

export const selfPermitAllowedIfNecessary = <
	ThrowOnError extends boolean = false,
>(
	options: Options<SelfPermitAllowedIfNecessaryData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SelfPermitAllowedIfNecessaryResponse,
		SelfPermitAllowedIfNecessaryError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/{address}/selfPermitAllowedIfNecessary",
	});
};

export const selfPermitIfNecessary = <ThrowOnError extends boolean = false>(
	options: Options<SelfPermitIfNecessaryData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SelfPermitIfNecessaryResponse,
		SelfPermitIfNecessaryError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/{address}/selfPermitIfNecessary",
	});
};

export const sweepToken1 = <ThrowOnError extends boolean = false>(
	options: Options<SweepToken1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SweepToken1Response,
		SweepToken1Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/{address}/sweepToken",
	});
};

export const sweepTokenWithFee = <ThrowOnError extends boolean = false>(
	options: Options<SweepTokenWithFeeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SweepTokenWithFeeResponse,
		SweepTokenWithFeeError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/{address}/sweepTokenWithFee",
	});
};

export const unwrapWeth91 = <ThrowOnError extends boolean = false>(
	options: Options<UnwrapWeth91Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		UnwrapWeth91Response,
		UnwrapWeth91Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/{address}/unwrapWETH9",
	});
};

export const unwrapWeth9WithFee = <ThrowOnError extends boolean = false>(
	options: Options<UnwrapWeth9WithFeeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		UnwrapWeth9WithFeeResponse,
		UnwrapWeth9WithFeeError,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/{address}/unwrapWETH9WithFee",
	});
};

export const weth91 = <ThrowOnError extends boolean = false>(
	options: Options<Weth91Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Weth91Response,
		Weth91Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/WETH9",
	});
};

export const factory1 = <ThrowOnError extends boolean = false>(
	options: Options<Factory1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		Factory1Response,
		Factory1Error,
		ThrowOnError
	>({
		...options,
		url: "/uniswap/v3/router/factory",
	});
};

export const getBalanceOf2 = <ThrowOnError extends boolean = false>(
	options: Options<GetBalanceOf2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetBalanceOf2Response,
		GetBalanceOf2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{account}/balanceOf",
	});
};

export const getOwnerOf2 = <ThrowOnError extends boolean = false>(
	options: Options<GetOwnerOf2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetOwnerOf2Response,
		GetOwnerOf2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{tokenId}/ownerOf",
	});
};

export const getTokenUri2 = <ThrowOnError extends boolean = false>(
	options: Options<GetTokenUri2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTokenUri2Response,
		GetTokenUri2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{tokenId}/tokenURI",
	});
};

export const getApproved2 = <ThrowOnError extends boolean = false>(
	options: Options<GetApproved2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetApproved2Response,
		GetApproved2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{tokenId}/getApproved",
	});
};

export const isApprovedForAll2 = <ThrowOnError extends boolean = false>(
	options: Options<IsApprovedForAll2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		IsApprovedForAll2Response,
		IsApprovedForAll2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{owner}/isApprovedForAll",
	});
};

export const getBalanceOfNft2 = <ThrowOnError extends boolean = false>(
	options: Options<GetBalanceOfNft2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetBalanceOfNft2Response,
		GetBalanceOfNft2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{tokenId}/balanceOfNFT",
	});
};

export const getTotalSupply2 = <ThrowOnError extends boolean = false>(
	options: Options<GetTotalSupply2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTotalSupply2Response,
		GetTotalSupply2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/totalSupply",
	});
};

export const getLocked1 = <ThrowOnError extends boolean = false>(
	options: Options<GetLocked1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetLocked1Response,
		GetLocked1Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{tokenId}/locked",
	});
};

export const getLockedEnd = <ThrowOnError extends boolean = false>(
	options: Options<GetLockedEndData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetLockedEndResponse,
		GetLockedEndError,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{tokenId}/lockedEnd",
	});
};

export const createLock2 = <ThrowOnError extends boolean = false>(
	options: Options<CreateLock2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateLock2Response,
		CreateLock2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/createLock",
	});
};

export const createLockFor1 = <ThrowOnError extends boolean = false>(
	options: Options<CreateLockFor1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateLockFor1Response,
		CreateLockFor1Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/createLockFor",
	});
};

export const increaseLockAmount1 = <ThrowOnError extends boolean = false>(
	options: Options<IncreaseLockAmount1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		IncreaseLockAmount1Response,
		IncreaseLockAmount1Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/increaseLockAmount",
	});
};

export const increaseUnlockTime2 = <ThrowOnError extends boolean = false>(
	options: Options<IncreaseUnlockTime2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		IncreaseUnlockTime2Response,
		IncreaseUnlockTime2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/increaseUnlockTime",
	});
};

export const withdraw1 = <ThrowOnError extends boolean = false>(
	options: Options<Withdraw1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Withdraw1Response,
		Withdraw1Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/withdraw",
	});
};

export const approve3 = <ThrowOnError extends boolean = false>(
	options: Options<Approve3Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Approve3Response,
		Approve3Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/approve",
	});
};

export const setApprovalForAll2 = <ThrowOnError extends boolean = false>(
	options: Options<SetApprovalForAll2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SetApprovalForAll2Response,
		SetApprovalForAll2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/setApprovalForAll",
	});
};

export const transferFrom3 = <ThrowOnError extends boolean = false>(
	options: Options<TransferFrom3Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		TransferFrom3Response,
		TransferFrom3Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/transferFrom",
	});
};

export const safeTransferFrom1 = <ThrowOnError extends boolean = false>(
	options: Options<SafeTransferFrom1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SafeTransferFrom1Response,
		SafeTransferFrom1Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/safeTransferFrom",
	});
};

export const merge2 = <ThrowOnError extends boolean = false>(
	options: Options<Merge2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Merge2Response,
		Merge2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/merge",
	});
};

export const split2 = <ThrowOnError extends boolean = false>(
	options: Options<Split2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Split2Response,
		Split2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/split",
	});
};

export const voting = <ThrowOnError extends boolean = false>(
	options: Options<VotingData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		VotingResponse,
		VotingError,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/voting",
	});
};

export const abstain1 = <ThrowOnError extends boolean = false>(
	options: Options<Abstain1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Abstain1Response,
		Abstain1Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/abstain",
	});
};

export const attach1 = <ThrowOnError extends boolean = false>(
	options: Options<Attach1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Attach1Response,
		Attach1Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/attach",
	});
};

export const detach1 = <ThrowOnError extends boolean = false>(
	options: Options<Detach1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Detach1Response,
		Detach1Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/detach",
	});
};

export const depositFor = <ThrowOnError extends boolean = false>(
	options: Options<DepositForData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DepositForResponse,
		DepositForError,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/depositFor",
	});
};

export const checkpoint1 = <ThrowOnError extends boolean = false>(
	options: Options<Checkpoint1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Checkpoint1Response,
		Checkpoint1Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/checkpoint",
	});
};

export const delegate2 = <ThrowOnError extends boolean = false>(
	options: Options<Delegate2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Delegate2Response,
		Delegate2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/delegate",
	});
};

export const delegateBySig1 = <ThrowOnError extends boolean = false>(
	options: Options<DelegateBySig1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DelegateBySig1Response,
		DelegateBySig1Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{address}/delegateBySig",
	});
};

export const getLastUserSlope = <ThrowOnError extends boolean = false>(
	options: Options<GetLastUserSlopeData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetLastUserSlopeResponse,
		GetLastUserSlopeError,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{tokenId}/getLastUserSlope",
	});
};

export const getUserPointHistory = <ThrowOnError extends boolean = false>(
	options: Options<GetUserPointHistoryData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetUserPointHistoryResponse,
		GetUserPointHistoryError,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{tokenId}/userPointHistory",
	});
};

export const getUserPointHistoryTs = <ThrowOnError extends boolean = false>(
	options: Options<GetUserPointHistoryTsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetUserPointHistoryTsResponse,
		GetUserPointHistoryTsError,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{tokenId}/userPointHistoryTS",
	});
};

export const getBalanceOfAtNft = <ThrowOnError extends boolean = false>(
	options: Options<GetBalanceOfAtNftData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetBalanceOfAtNftResponse,
		GetBalanceOfAtNftError,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{tokenId}/balanceOfAtNFT",
	});
};

export const getTotalSupplyAt = <ThrowOnError extends boolean = false>(
	options: Options<GetTotalSupplyAtData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTotalSupplyAtResponse,
		GetTotalSupplyAtError,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/totalSupplyAt",
	});
};

export const getTotalSupplyAtT = <ThrowOnError extends boolean = false>(
	options: Options<GetTotalSupplyAtTData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTotalSupplyAtTResponse,
		GetTotalSupplyAtTError,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/totalSupplyAtT",
	});
};

export const getPastVotes2 = <ThrowOnError extends boolean = false>(
	options: Options<GetPastVotes2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetPastVotes2Response,
		GetPastVotes2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{account}/getPastVotes",
	});
};

export const getPastTotalSupply = <ThrowOnError extends boolean = false>(
	options: Options<GetPastTotalSupplyData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetPastTotalSupplyResponse,
		GetPastTotalSupplyError,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/getPastTotalSupply",
	});
};

export const getVotes2 = <ThrowOnError extends boolean = false>(
	options: Options<GetVotes2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetVotes2Response,
		GetVotes2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{account}/getVotes",
	});
};

export const getDelegates2 = <ThrowOnError extends boolean = false>(
	options: Options<GetDelegates2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetDelegates2Response,
		GetDelegates2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/nft/{delegator}/delegates",
	});
};

export const getTotalWeight2 = <ThrowOnError extends boolean = false>(
	options: Options<GetTotalWeight2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetTotalWeight2Response,
		GetTotalWeight2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/totalWeight",
	});
};

export const getWeights2 = <ThrowOnError extends boolean = false>(
	options: Options<GetWeights2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetWeights2Response,
		GetWeights2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/weights",
	});
};

export const isGauge2 = <ThrowOnError extends boolean = false>(
	options: Options<IsGauge2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		IsGauge2Response,
		IsGauge2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/isGauge",
	});
};

export const vote2 = <ThrowOnError extends boolean = false>(
	options: Options<Vote2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Vote2Response,
		Vote2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/vote",
	});
};

export const reset2 = <ThrowOnError extends boolean = false>(
	options: Options<Reset2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Reset2Response,
		Reset2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/reset",
	});
};

export const poke2 = <ThrowOnError extends boolean = false>(
	options: Options<Poke2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Poke2Response,
		Poke2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/poke",
	});
};

export const createGauge2 = <ThrowOnError extends boolean = false>(
	options: Options<CreateGauge2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateGauge2Response,
		CreateGauge2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/createGauge",
	});
};

export const voteWithOptimalDistribution2 = <
	ThrowOnError extends boolean = false,
>(
	options: Options<VoteWithOptimalDistribution2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		VoteWithOptimalDistribution2Response,
		VoteWithOptimalDistribution2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/voteWithOptimalDistribution",
	});
};

export const isWhitelisted2 = <ThrowOnError extends boolean = false>(
	options: Options<IsWhitelisted2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		IsWhitelisted2Response,
		IsWhitelisted2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/isWhitelisted",
	});
};

export const lastVoted = <ThrowOnError extends boolean = false>(
	options: Options<LastVotedData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LastVotedResponse,
		LastVotedError,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/lastVoted",
	});
};

export const poolVoteLength = <ThrowOnError extends boolean = false>(
	options: Options<PoolVoteLengthData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		PoolVoteLengthResponse,
		PoolVoteLengthError,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/poolVoteLength",
	});
};

export const attachTokenToGauge1 = <ThrowOnError extends boolean = false>(
	options: Options<AttachTokenToGauge1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AttachTokenToGauge1Response,
		AttachTokenToGauge1Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/attachTokenToGauge",
	});
};

export const detachTokenFromGauge1 = <ThrowOnError extends boolean = false>(
	options: Options<DetachTokenFromGauge1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		DetachTokenFromGauge1Response,
		DetachTokenFromGauge1Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/detachTokenFromGauge",
	});
};

export const killGauge2 = <ThrowOnError extends boolean = false>(
	options: Options<KillGauge2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		KillGauge2Response,
		KillGauge2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/killGauge",
	});
};

export const reviveGauge2 = <ThrowOnError extends boolean = false>(
	options: Options<ReviveGauge2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ReviveGauge2Response,
		ReviveGauge2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/reviveGauge",
	});
};

export const notifyRewardAmount2 = <ThrowOnError extends boolean = false>(
	options: Options<NotifyRewardAmount2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		NotifyRewardAmount2Response,
		NotifyRewardAmount2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/notifyRewardAmount",
	});
};

export const distribute2 = <ThrowOnError extends boolean = false>(
	options: Options<Distribute2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Distribute2Response,
		Distribute2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/distribute",
	});
};

export const claimBribes2 = <ThrowOnError extends boolean = false>(
	options: Options<ClaimBribes2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ClaimBribes2Response,
		ClaimBribes2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/claimBribes",
	});
};

export const claimFees2 = <ThrowOnError extends boolean = false>(
	options: Options<ClaimFees2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ClaimFees2Response,
		ClaimFees2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/claimFees",
	});
};

export const claimRewards2 = <ThrowOnError extends boolean = false>(
	options: Options<ClaimRewards2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ClaimRewards2Response,
		ClaimRewards2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/claimRewards",
	});
};

export const whitelist2 = <ThrowOnError extends boolean = false>(
	options: Options<Whitelist2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		Whitelist2Response,
		Whitelist2Error,
		ThrowOnError
	>({
		...options,
		url: "/thena/voter/{address}/whitelist",
	});
};
