// This file is auto-generated by @hey-api/openapi-ts

export const AavePoolAPIResponse_any_Schema = {
	description:
		"Represents the structure of the response from the Aave Pool API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const AavePoolTransactionSchema = {
	description: "Represents a transaction in the Aave V3 Pool.",
	properties: {
		data: {
			type: "string",
			description: "The data associated with the transaction.",
		},
		value: {
			type: "string",
			description: "The value of the transaction.",
		},
		to: {
			type: "string",
			description: "The address of the recipient.",
		},
		from: {
			type: "string",
			description: "The address of the sender.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction (optional).",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction (optional).",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description:
				"The maximum priority fee per gas for the transaction (optional).",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas for the transaction (optional).",
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce of the transaction.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of the transaction (optional).",
		},
		chainId: {
			type: "string",
			description: "The chain ID of the transaction.",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const SimulateAssetTypeSchema = {
	description: `Asset type returned when calling {@link TransactNamespace.simulateAssetChanges }.
Allows you to determine if the assets approved or / and transferred are
native, tokens or NFTs.`,
	enum: ["NATIVE", "ERC20", "ERC721", "ERC1155", "SPECIAL_NFT"],
	type: "string",
} as const;

export const SimulateChangeTypeSchema = {
	description:
		"Change type returned when calling {@link TransactNamespace.simulateAssetChanges }.",
	enum: ["APPROVE", "TRANSFER"],
	type: "string",
} as const;

export const SimulateAssetChangesChangeSchema = {
	description: `Represents an asset change from a call to
{@link TransactNamespace.simulateAssetChanges }.`,
	properties: {
		assetType: {
			$ref: "#/components/schemas/SimulateAssetType",
			description: "The type of asset from the transaction.",
		},
		changeType: {
			$ref: "#/components/schemas/SimulateChangeType",
			description: "The type of change from the transaction.",
		},
		from: {
			type: "string",
			description: "The from address.",
		},
		to: {
			type: "string",
			description: "The to address.",
		},
		rawAmount: {
			type: "string",
			description: `The raw amount as an integer string. Only available on TRANSFER changes for
NATIVE and ERC20 assets, or ERC721/ERC1155 disapprove changes (field set to
'0').`,
		},
		amount: {
			type: "string",
			description: `The amount as an integer string. This value is calculated by applying the
\`decimals\` field to the \`rawAmount\` field. Only available on TRANSFER
changes for NATIVE and ERC20 assets, or ERC721/ERC1155 disapprove changes
(field set to '0').`,
		},
		name: {
			type: "string",
			description: "The name of the asset transferred, if available.",
		},
		symbol: {
			type: "string",
			description: "The symbol of the asset transferred if available.",
		},
		decimals: {
			type: "number",
			format: "double",
			description: `The number of decimals used by the ERC20 token. Set to 0 for APPROVE
changes. Field is undefined if it's not defined in the contract and not
available from other sources.`,
		},
		contractAddress: {
			type: "string",
			description: `The contract address of the asset. Only applicable to ERC20, ERC721,
ERC1155, NFT and SPECIAL_NFT transactions.`,
		},
		logo: {
			type: "string",
			description:
				"URL for the logo of the asset, if available. Only applicable to ERC20 transactions.",
		},
		tokenId: {
			type: "string",
			description: `The token id of the asset transferred. Only applicable to ERC721,
ERC1155 and SPECIAL_NFT NFTs.`,
		},
	},
	required: ["assetType", "changeType", "from", "to"],
	type: "object",
	additionalProperties: false,
} as const;

export const SimulateAssetChangesErrorSchema = {
	description: `The error field returned in a {@link SimulateAssetChangesResponse} if the
simulation failed.`,
	properties: {
		message: {
			type: "string",
			description: "The error message.",
		},
	},
	required: ["message"],
	type: "object",
	additionalProperties: false,
} as const;

export const SimulateAssetChangesResponseSchema = {
	description:
		"Response object for the {@link TransactNamespace.simulateAssetChanges } method.",
	properties: {
		changes: {
			items: {
				$ref: "#/components/schemas/SimulateAssetChangesChange",
			},
			type: "array",
			description:
				"An array of asset changes that resulted from the transaction.",
		},
		gasUsed: {
			type: "string",
			description: `The amount of gas used by the transaction represented as a hex string. The
field is undefined if an error occurred.`,
		},
		error: {
			$ref: "#/components/schemas/SimulateAssetChangesError",
			description: "Optional error field that is present if an error occurred.",
		},
	},
	required: ["changes"],
	type: "object",
	additionalProperties: false,
} as const;

export const TxSchema = {
	description: "Represents a transaction object.",
	properties: {
		type: {
			type: "number",
			format: "double",
			description: "The type of the transaction.",
		},
		chain_id: {
			type: "number",
			format: "double",
			description: "The chain ID of the blockchain network.",
		},
		data: {
			type: "string",
			description: "The data payload of the transaction.",
		},
		gas: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		gas_price: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		gas_tip_cap: {
			type: "string",
			nullable: true,
			description:
				"The gas tip cap for the transaction, used in EIP-1559 transactions.",
		},
		gas_fee_cap: {
			type: "string",
			nullable: true,
			description:
				"The gas fee cap for the transaction, used in EIP-1559 transactions.",
		},
		value: {
			type: "string",
			description: "The value to be transferred in the transaction.",
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce of the transaction.",
		},
		from: {
			type: "string",
			description: "The address of the sender.",
		},
		to: {
			type: "string",
			nullable: true,
			description: "The address of the recipient.",
		},
		blob_gas: {
			type: "string",
			nullable: true,
			description: "The gas used for blob transactions.",
		},
		blob_gas_fee_cap: {
			type: "string",
			nullable: true,
			description: "The gas fee cap for blob transactions.",
		},
		blob_hashes: {
			items: {
				type: "string",
			},
			type: "array",
			nullable: true,
			description: "The hashes of the blobs included in the transaction.",
		},
		v: {
			type: "string",
			description: "The recovery id of the transaction.",
		},
		r: {
			type: "string",
			description: "The signature r value of the transaction.",
		},
		s: {
			type: "string",
			description: "The signature s value of the transaction.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const TransactionRequestSchema = {
	description: "Represents a request to perform a transaction.",
	properties: {
		nonce: {
			type: "string",
			description: "A unique identifier for the transaction.",
		},
		data: {
			type: "string",
			description: "The data to be sent with the transaction.",
		},
		value: {
			type: "string",
			description: "The amount of value to be transferred.",
		},
		to: {
			type: "string",
			description: "The address to which the transaction is directed.",
		},
		from: {
			type: "string",
			description: "The address from which the transaction is sent.",
		},
		maxFeePerGas: {
			type: "string",
			description:
				"The maximum fee per gas unit that the sender is willing to pay.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description:
				"The maximum priority fee per gas unit that the sender is willing to pay.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const TransactionDataSchema = {
	description: "Represents the data associated with a transaction.",
	properties: {
		moon_scan_url: {
			type: "string",
			description: "The URL to view the transaction on MoonScan.",
		},
		transaction_hash: {
			type: "string",
			description: "The hash of the transaction.",
		},
		signed_transaction: {
			type: "string",
			description: "The signed transaction data.",
		},
		signed_message: {
			type: "string",
			description: "The signed message associated with the transaction.",
		},
		raw_transaction: {
			type: "string",
			description: "The raw transaction data.",
		},
		signature: {
			type: "string",
			description: "The signature of the transaction.",
		},
		transaction: {
			$ref: "#/components/schemas/Tx",
			description: "The transaction details.",
		},
		userOps: {
			items: {
				$ref: "#/components/schemas/TransactionRequest",
			},
			type: "array",
			description:
				"The list of user operations associated with the transaction.",
		},
		userop_transaction: {
			type: "string",
			description: "The user operation transaction data.",
		},
	},
	required: ["transaction_hash", "signed_transaction"],
	type: "object",
	additionalProperties: false,
} as const;

export const BroadCastRawTransactionResponseSchema = {
	description: "Represents the response from broadcasting a raw transaction.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the transaction was successful.",
		},
		message: {
			type: "string",
			description: "The message associated with the transaction.",
		},
		data: {
			type: "string",
			description: "The transaction hash.",
		},
	},
	required: ["success", "message", "data"],
	type: "object",
	additionalProperties: false,
} as const;

export const TransactionSchema = {
	description: "Represents a transaction with various optional properties.",
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description: "The simulation response of asset changes.",
		},
		transaction_hash: {
			type: "string",
			description: "The hash of the transaction.",
		},
		signed_transaction: {
			type: "string",
			description: "The signed transaction data.",
		},
		raw_transaction: {
			type: "string",
			description: "The raw transaction data.",
		},
		data: {
			type: "string",
			nullable: true,
			description: `Additional data related to the transaction.
Replace with the actual type if known.`,
		},
		transactions: {
			items: {
				$ref: "#/components/schemas/TransactionData",
			},
			type: "array",
			description: "An array of transaction data.",
		},
		moon_scan_url: {
			type: "string",
			description: "The URL to the transaction on MoonScan.",
		},
		signature: {
			type: "string",
			description: "The signature of the transaction.",
		},
		transaction: {
			$ref: "#/components/schemas/Tx",
			description: "The transaction details.",
		},
		userOps: {
			items: {
				$ref: "#/components/schemas/TransactionRequest",
			},
			type: "array",
			description: "An array of user operation requests.",
		},
		userop_transaction: {
			type: "string",
			description: "The user operation transaction data.",
		},
		user_op: {
			type: "string",
			description: "The user operation data.",
		},
		success: {
			type: "boolean",
			description: "Indicates whether the transaction was successful.",
		},
		message: {
			type: "string",
			description: "A message related to the transaction.",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description: "The response after broadcasting the raw transaction.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const AavePoolExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description: "Optional response from simulating asset changes.",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description:
				"Optional response indicating whether the transaction was broadcasted.",
		},
		message: {
			type: "string",
			description:
				"Optional message providing additional information about the execution.",
		},
		success: {
			type: "boolean",
			description: "Indicates whether the function execution was successful.",
		},
		user_op: {
			type: "string",
			description: "Optional user operation identifier.",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "Optional data related to the transaction.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters passed to the function.",
		},
		function: {
			type: "string",
			description: "The name of the function that was executed.",
		},
		transaction: {
			$ref: "#/components/schemas/AavePoolTransaction",
			description: "The transaction associated with the function execution.",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
	description:
		"Represents the result of executing a function on the Aave pool.",
} as const;

export const AavePoolAPIResponse_AavePoolExecuteFunctionResult_Schema = {
	description:
		"Represents the structure of the response from the Aave Pool API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			$ref: "#/components/schemas/AavePoolExecuteFunctionResult",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const AccessTupleSchema = {
	description: "Represents a tuple containing access information.",
	properties: {
		address: {
			type: "string",
			description: "The address associated with the access tuple.",
		},
		storageKeys: {
			items: {
				type: "string",
			},
			type: "array",
			description: "An array of storage keys related to the address.",
		},
	},
	required: ["address", "storageKeys"],
	type: "object",
	additionalProperties: false,
} as const;

export const TokenAmountSchema = {
	description: "Represents an amount of a specific token.",
	properties: {
		tokenAddress: {
			type: "string",
			description: "The address of the token.",
		},
		amount: {
			type: "string",
			description: "The amount of the token.",
		},
	},
	required: ["tokenAddress", "amount"],
	type: "object",
	additionalProperties: false,
} as const;

export const TokenProportionSchema = {
	description: "Represents the proportion of a specific token.",
	properties: {
		tokenAddress: {
			type: "string",
			description: "The address of the token.",
		},
		proportion: {
			type: "number",
			format: "double",
			description:
				"The proportion of the token, typically represented as a percentage or a fraction.",
		},
	},
	required: ["tokenAddress", "proportion"],
	type: "object",
	additionalProperties: false,
} as const;

export const AavePoolInputBodySchema = {
	description: `Interface representing the input body for Aave pool transactions.
Extends the InputBody interface.`,
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		data: {
			type: "string",
			description: "The data payload for the transaction.",
		},
		value: {
			type: "string",
			description: "The value of the transaction.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce for the transaction.",
		},
		simulate: {
			type: "boolean",
			description: "Indicates if the transaction should be simulated.",
		},
		gas: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Indicates if the transaction is a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Indicates if the transaction is from an externally owned account.",
		},
		contract_address: {
			type: "string",
			description: "The contract address involved in the transaction.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Indicates if the transaction should be broadcasted.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "Indicates if the nonce should always be incremented.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount involved in the transaction.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode for the transaction.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code for the transaction.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Indicates if the asset should be used as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Indicates if the AToken should be received.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const PoolAddressProviderAPIResponse_string_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "string",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const PoolAddressProviderTransactionSchema = {
	properties: {
		data: {
			type: "string",
		},
		value: {
			type: "string",
		},
		to: {
			type: "string",
		},
		from: {
			type: "string",
		},
		gasPrice: {
			type: "string",
		},
		gasLimit: {
			type: "string",
		},
		maxPriorityFeePerGas: {
			type: "string",
		},
		maxFeePerGas: {
			type: "string",
		},
		nonce: {
			type: "number",
			format: "double",
		},
		type: {
			type: "number",
			format: "double",
		},
		chainId: {
			type: "string",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const PoolAddressProviderExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
		},
		message: {
			type: "string",
		},
		success: {
			type: "boolean",
		},
		user_op: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
		},
		params: {
			items: {},
			type: "array",
		},
		function: {
			type: "string",
		},
		transaction: {
			$ref: "#/components/schemas/PoolAddressProviderTransaction",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
} as const;

export const PoolAddressProviderAPIResponse_PoolAddressProviderExecuteFunctionResult_Schema =
	{
		properties: {
			success: {
				type: "boolean",
			},
			message: {
				type: "string",
			},
			data: {
				$ref: "#/components/schemas/PoolAddressProviderExecuteFunctionResult",
			},
		},
		required: ["success", "message"],
		type: "object",
		additionalProperties: false,
	} as const;

export const PoolAddressProviderInputBodySchema = {
	description: `Interface representing the input body for the Pool Address Provider.
Extends the InputBody interface.`,
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		data: {
			type: "string",
			description: "The data to be sent.",
		},
		value: {
			type: "string",
			description: "The value to be sent.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce for the transaction.",
		},
		simulate: {
			type: "boolean",
			description: "Whether to simulate the transaction.",
		},
		gas: {
			type: "string",
			description: "The gas for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Whether to perform a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Whether the transaction is from an externally owned account.",
		},
		contract_address: {
			type: "string",
			description: "The contract address.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Whether to broadcast the transaction.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "Whether to always increment the nonce.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount involved in the transaction.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
		newAddress: {
			type: "string",
		},
		newMarketId: {
			type: "string",
		},
		newImplementationAddress: {
			type: "string",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const PoolAddressProviderRegistryAPIResponse_string_Schema = {
	description:
		"Represents the API response structure for the Pool Address Provider Registry.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			type: "string",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const PoolAddressProviderRegistryAPIResponse_any_Array_Schema = {
	description:
		"Represents the API response structure for the Pool Address Provider Registry.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			items: {},
			type: "array",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const AAVEv3RewardsAPIResponse_string_Array_Schema = {
	description:
		"Represents the structure of the API response for AAVE v3 rewards.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const AAVEv3RewardsAPIResponse_string_Schema = {
	description:
		"Represents the structure of the API response for AAVE v3 rewards.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			type: "string",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const AAVEv3RewardsTransactionSchema = {
	description: "Represents a transaction for AAVE v3 rewards.",
	properties: {
		data: {
			type: "string",
			description: "The data payload of the transaction.",
		},
		value: {
			type: "string",
			description: "The value to be transferred in the transaction, in wei.",
		},
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		from: {
			type: "string",
			description: "The sender address of the transaction.",
		},
		gasPrice: {
			type: "string",
			description: `The gas price for the transaction, in wei.
Optional.`,
		},
		gasLimit: {
			type: "string",
			description: `The gas limit for the transaction.
Optional.`,
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: `The maximum priority fee per gas for the transaction, in wei.
Optional.`,
		},
		maxFeePerGas: {
			type: "string",
			description: `The maximum fee per gas for the transaction, in wei.
Optional.`,
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce of the transaction.",
		},
		type: {
			type: "number",
			format: "double",
			description: `The type of the transaction.
Optional.`,
		},
		chainId: {
			type: "string",
			description: "The chain ID of the network where the transaction is sent.",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const AAVEv3RewardsExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description: "Optional response from simulating asset changes.",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description: "Optional response from broadcasting the raw transaction.",
		},
		message: {
			type: "string",
			description:
				"Optional message providing additional information about the execution result.",
		},
		success: {
			type: "boolean",
			description:
				"Optional flag indicating whether the function execution was successful.",
		},
		user_op: {
			type: "string",
			description: "Optional user operation identifier.",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "Optional transaction data.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters passed to the executed function.",
		},
		function: {
			type: "string",
			description: "The name of the executed function.",
		},
		transaction: {
			$ref: "#/components/schemas/AAVEv3RewardsTransaction",
			description: "The transaction details of the executed function.",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
	description:
		"Represents the result of executing a function in the AAVE v3 rewards wrapper.",
} as const;

export const AAVEv3RewardsAPIResponse_AAVEv3RewardsExecuteFunctionResult_Schema =
	{
		description:
			"Represents the structure of the API response for AAVE v3 rewards.",
		properties: {
			success: {
				type: "boolean",
				description: "Indicates whether the API request was successful.",
			},
			message: {
				type: "string",
				description:
					"A message providing additional information about the API response.",
			},
			data: {
				$ref: "#/components/schemas/AAVEv3RewardsExecuteFunctionResult",
				description: "The data returned by the API, if any.",
			},
		},
		required: ["success", "message"],
		type: "object",
		additionalProperties: false,
	} as const;

export const AAVEv3RewardsInputBodySchema = {
	description: "Interface representing the input body for AAVE v3 rewards.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		data: {
			type: "string",
			description: "The data to be sent with the transaction.",
		},
		value: {
			type: "string",
			description: "The value of the transaction.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The transaction nonce.",
		},
		simulate: {
			type: "boolean",
			description: "Whether to simulate the transaction.",
		},
		gas: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Flag to indicate if the transaction is a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Flag to indicate if the transaction is from an externally owned account.",
		},
		contract_address: {
			type: "string",
			description: "The address of the contract.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Flag to indicate if the transaction should be broadcasted.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description:
				"Flag to indicate if the nonce should always be incremented.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount of tokens.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The list of asset addresses.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user address.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
		reward: {
			type: "string",
			description: "The reward address.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const BigNumberSchema = {} as const;

export const RewardInfoSchema = {
	description: "Interface representing the reward information for a token.",
	properties: {
		rewardTokenSymbol: {
			type: "string",
			description: "The symbol of the reward token.",
		},
		rewardTokenAddress: {
			type: "string",
			description: "The address of the reward token.",
		},
		rewardOracleAddress: {
			type: "string",
			description: "The address of the reward oracle.",
		},
		emissionPerSecond: {
			$ref: "#/components/schemas/BigNumber",
			description: "The emission rate of the reward token per second.",
		},
		incentivesLastUpdateTimestamp: {
			$ref: "#/components/schemas/BigNumber",
			description: "The timestamp of the last update to the incentives.",
		},
		tokenIncentivesIndex: {
			$ref: "#/components/schemas/BigNumber",
			description: "The index of the token incentives.",
		},
		emissionEndTimestamp: {
			$ref: "#/components/schemas/BigNumber",
			description: "The timestamp when the emission ends.",
		},
		rewardPriceFeed: {
			$ref: "#/components/schemas/BigNumber",
			description: "The price feed of the reward token.",
		},
		rewardTokenDecimals: {
			type: "number",
			format: "double",
			description: "The number of decimals of the reward token.",
		},
		precision: {
			type: "number",
			format: "double",
			description: "The precision of the reward token.",
		},
		priceFeedDecimals: {
			type: "number",
			format: "double",
			description: "The number of decimals of the price feed.",
		},
	},
	required: [
		"rewardTokenSymbol",
		"rewardTokenAddress",
		"rewardOracleAddress",
		"emissionPerSecond",
		"incentivesLastUpdateTimestamp",
		"tokenIncentivesIndex",
		"emissionEndTimestamp",
		"rewardPriceFeed",
		"rewardTokenDecimals",
		"precision",
		"priceFeedDecimals",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const IncentiveDataSchema = {
	description: "Interface representing the incentive data for a token.",
	properties: {
		tokenAddress: {
			type: "string",
			description: "The address of the token.",
		},
		incentiveControllerAddress: {
			type: "string",
			description: "The address of the incentive controller.",
		},
		rewardsTokenInformation: {
			items: {
				$ref: "#/components/schemas/RewardInfo",
			},
			type: "array",
			description: "An array of reward information objects.",
		},
	},
	required: [
		"tokenAddress",
		"incentiveControllerAddress",
		"rewardsTokenInformation",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const AggregatedReserveIncentiveDataSchema = {
	description: "Interface representing the aggregated reserve incentive data.",
	properties: {
		underlyingAsset: {
			type: "string",
			description: "The address of the underlying asset.",
		},
		aIncentiveData: {
			$ref: "#/components/schemas/IncentiveData",
			description: "The incentive data for the aToken.",
		},
		vIncentiveData: {
			$ref: "#/components/schemas/IncentiveData",
			description: "The incentive data for the variable debt token.",
		},
		sIncentiveData: {
			$ref: "#/components/schemas/IncentiveData",
			description: "The incentive data for the stable debt token.",
		},
	},
	required: [
		"underlyingAsset",
		"aIncentiveData",
		"vIncentiveData",
		"sIncentiveData",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const UserRewardInfoSchema = {
	description: "Interface representing the reward information for a user.",
	properties: {
		rewardTokenSymbol: {
			type: "string",
			description: "The symbol of the reward token.",
		},
		rewardOracleAddress: {
			type: "string",
			description: "The address of the reward oracle.",
		},
		rewardTokenAddress: {
			type: "string",
			description: "The address of the reward token.",
		},
		userUnclaimedRewards: {
			$ref: "#/components/schemas/BigNumber",
			description: "The amount of unclaimed rewards for the user.",
		},
		tokenIncentivesUserIndex: {
			$ref: "#/components/schemas/BigNumber",
			description: "The user's index for token incentives.",
		},
		rewardPriceFeed: {
			$ref: "#/components/schemas/BigNumber",
			description: "The price feed of the reward.",
		},
		priceFeedDecimals: {
			type: "number",
			format: "double",
			description: "The number of decimals for the price feed.",
		},
		rewardTokenDecimals: {
			type: "number",
			format: "double",
			description: "The number of decimals for the reward token.",
		},
	},
	required: [
		"rewardTokenSymbol",
		"rewardOracleAddress",
		"rewardTokenAddress",
		"userUnclaimedRewards",
		"tokenIncentivesUserIndex",
		"rewardPriceFeed",
		"priceFeedDecimals",
		"rewardTokenDecimals",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const UserIncentiveDataSchema = {
	description: "Represents the incentive data for a user.",
	properties: {
		tokenAddress: {
			type: "string",
			description: "The address of the token.",
		},
		incentiveControllerAddress: {
			type: "string",
			description: "The address of the incentive controller.",
		},
		userRewardsInformation: {
			items: {
				$ref: "#/components/schemas/UserRewardInfo",
			},
			type: "array",
			description: "An array of user rewards information.",
		},
	},
	required: [
		"tokenAddress",
		"incentiveControllerAddress",
		"userRewardsInformation",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const UserReserveIncentiveDataSchema = {
	description:
		"Interface representing the incentive data for a user's reserve.",
	properties: {
		underlyingAsset: {
			type: "string",
			description: "The underlying asset associated with the reserve.",
		},
		aTokenIncentivesUserData: {
			$ref: "#/components/schemas/UserIncentiveData",
			description: "Incentive data for the user's aToken.",
		},
		vTokenIncentivesUserData: {
			$ref: "#/components/schemas/UserIncentiveData",
			description: "Incentive data for the user's vToken.",
		},
		sTokenIncentivesUserData: {
			$ref: "#/components/schemas/UserIncentiveData",
			description: "Incentive data for the user's sToken.",
		},
	},
	required: [
		"underlyingAsset",
		"aTokenIncentivesUserData",
		"vTokenIncentivesUserData",
		"sTokenIncentivesUserData",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const FullReservesIncentiveDataSchema = {
	description: "Interface representing the full reserves incentive data.",
	properties: {
		reservesIncentiveData: {
			items: {
				$ref: "#/components/schemas/AggregatedReserveIncentiveData",
			},
			type: "array",
			description: "The aggregated reserve incentive data.",
		},
		userReserveIncentiveData: {
			items: {
				$ref: "#/components/schemas/UserReserveIncentiveData",
			},
			type: "array",
			description: "The user reserve incentive data.",
		},
	},
	required: ["reservesIncentiveData", "userReserveIncentiveData"],
	type: "object",
	additionalProperties: false,
} as const;

export const AAVEv3UiIncentiveDataProviderAPIResponse_FullReservesIncentiveData_Schema =
	{
		description:
			"Represents the structure of the API response from the AAVE v3 UI Incentive Data Provider.",
		properties: {
			success: {
				type: "boolean",
				description: "Indicates whether the API request was successful.",
			},
			message: {
				type: "string",
				description:
					"A message providing additional information about the API response.",
			},
			data: {
				$ref: "#/components/schemas/FullReservesIncentiveData",
				description: "The data returned by the API, if any.",
			},
		},
		required: ["success", "message"],
		type: "object",
		additionalProperties: false,
	} as const;

export const AAVEv3UiIncentiveDataProviderAPIResponse_AggregatedReserveIncentiveData_Array_Schema =
	{
		description:
			"Represents the structure of the API response from the AAVE v3 UI Incentive Data Provider.",
		properties: {
			success: {
				type: "boolean",
				description: "Indicates whether the API request was successful.",
			},
			message: {
				type: "string",
				description:
					"A message providing additional information about the API response.",
			},
			data: {
				items: {
					$ref: "#/components/schemas/AggregatedReserveIncentiveData",
				},
				type: "array",
				description: "The data returned by the API, if any.",
			},
		},
		required: ["success", "message"],
		type: "object",
		additionalProperties: false,
	} as const;

export const AAVEv3UiIncentiveDataProviderAPIResponse_UserReserveIncentiveData_Array_Schema =
	{
		description:
			"Represents the structure of the API response from the AAVE v3 UI Incentive Data Provider.",
		properties: {
			success: {
				type: "boolean",
				description: "Indicates whether the API request was successful.",
			},
			message: {
				type: "string",
				description:
					"A message providing additional information about the API response.",
			},
			data: {
				items: {
					$ref: "#/components/schemas/UserReserveIncentiveData",
				},
				type: "array",
				description: "The data returned by the API, if any.",
			},
		},
		required: ["success", "message"],
		type: "object",
		additionalProperties: false,
	} as const;

export const AAVEv3UiPoolDataProviderAPIResponse_string_Schema = {
	description:
		"Interface representing the API response from AAVE v3 UI Pool Data Provider.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API call was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API call.",
		},
		data: {
			type: "string",
			description: "The data returned by the API call, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const AggregatedReserveDataSchema = {
	description:
		"Interface representing the aggregated reserve data for a specific asset.",
	properties: {
		underlyingAsset: {
			type: "string",
			description: "The address of the underlying asset.",
		},
		name: {
			type: "string",
			description: "The name of the asset.",
		},
		symbol: {
			type: "string",
			description: "The symbol of the asset.",
		},
		decimals: {
			$ref: "#/components/schemas/BigNumber",
			description: "The number of decimals of the asset.",
		},
		baseLTVasCollateral: {
			$ref: "#/components/schemas/BigNumber",
			description: "The loan-to-value ratio used as collateral.",
		},
		reserveLiquidationThreshold: {
			$ref: "#/components/schemas/BigNumber",
			description: "The threshold at which the asset will be liquidated.",
		},
		reserveLiquidationBonus: {
			$ref: "#/components/schemas/BigNumber",
			description: "The bonus applied upon liquidation.",
		},
		reserveFactor: {
			$ref: "#/components/schemas/BigNumber",
			description: "The reserve factor of the asset.",
		},
		usageAsCollateralEnabled: {
			type: "boolean",
			description: "Indicates if the asset can be used as collateral.",
		},
		borrowingEnabled: {
			type: "boolean",
			description: "Indicates if borrowing is enabled for the asset.",
		},
		stableBorrowRateEnabled: {
			type: "boolean",
			description: "Indicates if stable borrow rate is enabled for the asset.",
		},
		isActive: {
			type: "boolean",
			description: "Indicates if the asset is active.",
		},
		isFrozen: {
			type: "boolean",
			description: "Indicates if the asset is frozen.",
		},
		liquidityIndex: {
			$ref: "#/components/schemas/BigNumber",
			description: "The liquidity index of the asset.",
		},
		variableBorrowIndex: {
			$ref: "#/components/schemas/BigNumber",
			description: "The variable borrow index of the asset.",
		},
		liquidityRate: {
			$ref: "#/components/schemas/BigNumber",
			description: "The liquidity rate of the asset.",
		},
		variableBorrowRate: {
			$ref: "#/components/schemas/BigNumber",
			description: "The variable borrow rate of the asset.",
		},
		stableBorrowRate: {
			$ref: "#/components/schemas/BigNumber",
			description: "The stable borrow rate of the asset.",
		},
		lastUpdateTimestamp: {
			type: "number",
			format: "double",
			description: "The timestamp of the last update.",
		},
		aTokenAddress: {
			type: "string",
			description: "The address of the aToken associated with the asset.",
		},
		stableDebtTokenAddress: {
			type: "string",
			description:
				"The address of the stable debt token associated with the asset.",
		},
		variableDebtTokenAddress: {
			type: "string",
			description:
				"The address of the variable debt token associated with the asset.",
		},
		interestRateStrategyAddress: {
			type: "string",
			description: "The address of the interest rate strategy contract.",
		},
		availableLiquidity: {
			$ref: "#/components/schemas/BigNumber",
			description: "The available liquidity of the asset.",
		},
		totalPrincipalStableDebt: {
			$ref: "#/components/schemas/BigNumber",
			description: "The total principal stable debt of the asset.",
		},
		averageStableRate: {
			$ref: "#/components/schemas/BigNumber",
			description: "The average stable rate of the asset.",
		},
		stableDebtLastUpdateTimestamp: {
			$ref: "#/components/schemas/BigNumber",
			description: "The timestamp of the last update of the stable debt.",
		},
		totalScaledVariableDebt: {
			$ref: "#/components/schemas/BigNumber",
			description: "The total scaled variable debt of the asset.",
		},
		priceInMarketReferenceCurrency: {
			$ref: "#/components/schemas/BigNumber",
			description: "The price of the asset in the market reference currency.",
		},
		variableRateSlope1: {
			$ref: "#/components/schemas/BigNumber",
			description: "The first slope of the variable rate.",
		},
		variableRateSlope2: {
			$ref: "#/components/schemas/BigNumber",
			description: "The second slope of the variable rate.",
		},
		stableRateSlope1: {
			$ref: "#/components/schemas/BigNumber",
			description: "The first slope of the stable rate.",
		},
		stableRateSlope2: {
			$ref: "#/components/schemas/BigNumber",
			description: "The second slope of the stable rate.",
		},
	},
	required: [
		"underlyingAsset",
		"name",
		"symbol",
		"decimals",
		"baseLTVasCollateral",
		"reserveLiquidationThreshold",
		"reserveLiquidationBonus",
		"reserveFactor",
		"usageAsCollateralEnabled",
		"borrowingEnabled",
		"stableBorrowRateEnabled",
		"isActive",
		"isFrozen",
		"liquidityIndex",
		"variableBorrowIndex",
		"liquidityRate",
		"variableBorrowRate",
		"stableBorrowRate",
		"lastUpdateTimestamp",
		"aTokenAddress",
		"stableDebtTokenAddress",
		"variableDebtTokenAddress",
		"interestRateStrategyAddress",
		"availableLiquidity",
		"totalPrincipalStableDebt",
		"averageStableRate",
		"stableDebtLastUpdateTimestamp",
		"totalScaledVariableDebt",
		"priceInMarketReferenceCurrency",
		"variableRateSlope1",
		"variableRateSlope2",
		"stableRateSlope1",
		"stableRateSlope2",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const BaseCurrencyInfoSchema = {
	description: "Interface representing the base currency information.",
	properties: {
		marketReferenceCurrencyUnit: {
			$ref: "#/components/schemas/BigNumber",
			description: "The unit of the market reference currency.",
		},
		marketReferenceCurrencyPriceInUsd: {
			$ref: "#/components/schemas/BigNumber",
			description: "The price of the market reference currency in USD.",
		},
		networkBaseTokenPriceInUsd: {
			$ref: "#/components/schemas/BigNumber",
			description: "The price of the network base token in USD.",
		},
		networkBaseTokenPriceDecimals: {
			type: "number",
			format: "double",
			description: "The number of decimals of the network base token price.",
		},
	},
	required: [
		"marketReferenceCurrencyUnit",
		"marketReferenceCurrencyPriceInUsd",
		"networkBaseTokenPriceInUsd",
		"networkBaseTokenPriceDecimals",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const ReservesDataSchema = {
	description: "Interface representing the reserves data.",
	properties: {
		aggregatedReserveData: {
			items: {
				$ref: "#/components/schemas/AggregatedReserveData",
			},
			type: "array",
			description: "The aggregated reserve data.",
		},
		baseCurrencyInfo: {
			$ref: "#/components/schemas/BaseCurrencyInfo",
			description: "The base currency information.",
		},
	},
	required: ["aggregatedReserveData", "baseCurrencyInfo"],
	type: "object",
	additionalProperties: false,
} as const;

export const AAVEv3UiPoolDataProviderAPIResponse_ReservesData_Schema = {
	description:
		"Interface representing the API response from AAVE v3 UI Pool Data Provider.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API call was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API call.",
		},
		data: {
			$ref: "#/components/schemas/ReservesData",
			description: "The data returned by the API call, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const AAVEv3UiPoolDataProviderAPIResponse_string_Array_Schema = {
	description:
		"Interface representing the API response from AAVE v3 UI Pool Data Provider.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API call was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API call.",
		},
		data: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The data returned by the API call, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const UserReserveDataSchema = {
	description:
		"Interface representing the data of a user's reserve in the Aave V3 protocol.",
	properties: {
		underlyingAsset: {
			type: "string",
			description: "The address of the underlying asset.",
		},
		scaledATokenBalance: {
			$ref: "#/components/schemas/BigNumber",
			description: "The scaled balance of the aToken.",
		},
		usageAsCollateralEnabledOnUser: {
			type: "boolean",
			description:
				"Indicates if the asset is being used as collateral by the user.",
		},
		stableBorrowRate: {
			$ref: "#/components/schemas/BigNumber",
			description: "The stable borrow rate of the user.",
		},
		scaledVariableDebt: {
			$ref: "#/components/schemas/BigNumber",
			description: "The scaled variable debt of the user.",
		},
		principalStableDebt: {
			$ref: "#/components/schemas/BigNumber",
			description: "The principal stable debt of the user.",
		},
		stableBorrowLastUpdateTimestamp: {
			$ref: "#/components/schemas/BigNumber",
			description:
				"The timestamp of the last update to the stable borrow rate.",
		},
	},
	required: [
		"underlyingAsset",
		"scaledATokenBalance",
		"usageAsCollateralEnabledOnUser",
		"stableBorrowRate",
		"scaledVariableDebt",
		"principalStableDebt",
		"stableBorrowLastUpdateTimestamp",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const AAVEv3UiPoolDataProviderAPIResponse_UserReserveData_Array_Schema =
	{
		description:
			"Interface representing the API response from AAVE v3 UI Pool Data Provider.",
		properties: {
			success: {
				type: "boolean",
				description: "Indicates whether the API call was successful.",
			},
			message: {
				type: "string",
				description:
					"A message providing additional information about the API call.",
			},
			data: {
				items: {
					$ref: "#/components/schemas/UserReserveData",
				},
				type: "array",
				description: "The data returned by the API call, if any.",
			},
		},
		required: ["success", "message"],
		type: "object",
		additionalProperties: false,
	} as const;

export const AAVEv3WalletBalanceProviderAPIResponse_string_Schema = {
	description:
		"Represents the response from the AAVE v3 Wallet Balance Provider API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API call was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API call.",
		},
		data: {
			type: "string",
			description: "The data returned by the API call, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const AAVEv3WalletBalanceProviderAPIResponse_string_Array_Schema = {
	description:
		"Represents the response from the AAVE v3 Wallet Balance Provider API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API call was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API call.",
		},
		data: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The data returned by the API call, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const AAVEv3WalletBalanceProviderAPIResponse__tokens_string_Array__balances_string_Array____Schema =
	{
		description:
			"Represents the response from the AAVE v3 Wallet Balance Provider API.",
		properties: {
			success: {
				type: "boolean",
				description: "Indicates whether the API call was successful.",
			},
			message: {
				type: "string",
				description:
					"A message providing additional information about the API call.",
			},
			data: {
				properties: {
					balances: {
						items: {
							type: "string",
						},
						type: "array",
					},
					tokens: {
						items: {
							type: "string",
						},
						type: "array",
					},
				},
				required: ["balances", "tokens"],
				type: "object",
				description: "The data returned by the API call, if any.",
			},
		},
		required: ["success", "message"],
		type: "object",
		additionalProperties: false,
	} as const;

export const AccountDataSchema = {
	description: "Represents the data associated with an account.",
	properties: {
		keys: {
			items: {
				type: "string",
			},
			type: "array",
			description: "An optional array of keys associated with the account.",
		},
		address: {
			type: "string",
			description: "An optional address of the account.",
		},
		private_key: {
			type: "string",
			description: "An optional private key of the account.",
		},
		public_key: {
			type: "string",
			description: "An optional public key of the account.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const AccountResponseSchema = {
	description: "Represents the response structure for an account.",
	properties: {
		keys: {
			items: {
				type: "string",
			},
			type: "array",
			description: "Optional array of keys associated with the account.",
		},
		address: {
			type: "string",
			description: "Optional address of the account.",
		},
		private_key: {
			type: "string",
			description: "Optional private key of the account.",
		},
		public_key: {
			type: "string",
			description: "Optional public key of the account.",
		},
		data: {
			$ref: "#/components/schemas/AccountData",
			description: "Data associated with the account.",
		},
	},
	required: ["data"],
	type: "object",
	additionalProperties: false,
} as const;

export const InputBodySchema = {
	description: "Represents the body of an input request.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		data: {
			type: "string",
			description: "The data to be sent.",
		},
		value: {
			type: "string",
			description: "The value to be sent.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce for the transaction.",
		},
		simulate: {
			type: "boolean",
			description: "Whether to simulate the transaction.",
		},
		gas: {
			type: "string",
			description: "The gas for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Whether to perform a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Whether the transaction is from an externally owned account.",
		},
		contract_address: {
			type: "string",
			description: "The contract address.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Whether to broadcast the transaction.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "Whether to always increment the nonce.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount involved in the transaction.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const AccountAPIResponseSchema = {
	description: `Interface representing the response from the Account API.
Extends the BaseAPIResponse to include additional data specific to account responses.`,
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/AccountResponse",
			description: "The account response data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CreateAccountInputSchema = {
	description:
		"Interface representing the input required to create an account.",
	properties: {
		private_key: {
			type: "string",
			description: "An optional private key for the account.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const NonceResponseSchema = {
	properties: {
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce of the account.",
		},
	},
	required: ["nonce"],
	type: "object",
	additionalProperties: false,
} as const;

export const NonceAPIResponseSchema = {
	description: `Represents the response from the API that includes a nonce.
Extends the BaseAPIResponse to include additional data specific to nonce responses.`,
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/NonceResponse",
			description: "The data associated with the nonce response.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const BalanceResponseSchema = {
	properties: {
		balance: {
			type: "string",
			description: "The balance of the account.",
		},
	},
	required: ["balance"],
	type: "object",
	additionalProperties: false,
} as const;

export const BalanceAPIResponseSchema = {
	description: `Represents the response from the Balance API.
Extends the BaseAPIResponse to include additional data specific to balance information.`,
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/BalanceResponse",
			description: "The data associated with the balance response.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const TransactionAPIResponseSchema = {
	description: `Interface representing the response from the Transaction API.
Extends the BaseAPIResponse interface.`,
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		transaction_hash: {
			description: "The hash of the transaction.",
		},
		signedTx: {
			description: "The signed transaction data.",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "The transaction data.",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description: "The response from broadcasting the raw transaction.",
		},
		transaction: {
			description: "Additional transaction information.",
		},
		function: {
			type: "string",
			description: "The function name associated with the transaction.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters associated with the transaction function.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const SignMessageAPIResponseSchema = {
	description: `Interface representing the response from the Sign Message API.
Extends the BaseAPIResponse interface.`,
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/TransactionData",
			description: "The transaction data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const SignMessageSchema = {
	description: "Represents a message to be signed.",
	properties: {
		chain_id: {
			type: "string",
			description: "The ID of the blockchain network.",
		},
		name: {
			type: "string",
			description: "The name associated with the message.",
		},
		data: {
			type: "string",
			description: "The data to be signed.",
		},
		encoding: {
			type: "string",
			description: "The encoding format of the data.",
		},
		header: {
			type: "boolean",
			description: "Indicates if the message includes a header.",
		},
		signtype: {
			type: "boolean",
			description: "Indicates if the message includes a signature type.",
		},
	},
	required: ["data"],
	type: "object",
	additionalProperties: false,
} as const;

export const ExportAccountAPIResponseSchema = {
	description: `Interface representing the response from the Export Account API.
Extends the BaseAPIResponse interface.`,
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			properties: {
				public_key: {
					type: "string",
				},
				private_key: {
					type: "string",
				},
				address: {
					type: "string",
				},
			},
			required: ["public_key", "private_key", "address"],
			type: "object",
			description: "The data object containing account details.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const SignTypedDataSchema = {
	description: "Interface representing the structure for signing typed data.",
	properties: {
		chain_id: {
			type: "string",
			description: "The optional chain ID associated with the data.",
		},
		data: {
			type: "string",
			description: "The data to be signed.",
		},
	},
	required: ["data"],
	type: "object",
	additionalProperties: false,
} as const;

export const DeployInputSchema = {
	description:
		"Interface representing the input required for deploying a contract.",
	properties: {
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		abi: {
			type: "string",
			description: "The ABI (Application Binary Interface) of the contract.",
		},
		bytecode: {
			type: "string",
			description: "The bytecode of the contract.",
		},
		constructor_args: {
			type: "string",
			description: "Optional constructor arguments for the contract.",
		},
	},
	required: ["abi", "bytecode"],
	type: "object",
	additionalProperties: false,
} as const;

export const BroadCastRawTransactionAPIResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description:
				"The data associated with the broadcast raw transaction response.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const BroadcastInputSchema = {
	description: "Represents the input required to broadcast a transaction.",
	properties: {
		chainId: {
			type: "string",
			description: "The chain ID of the blockchain network.",
		},
		rawTransaction: {
			type: "string",
			description: "The signed transaction to be broadcasted.",
		},
	},
	required: ["chainId", "rawTransaction"],
	type: "object",
	additionalProperties: false,
} as const;

export const AbiEncodeOutputSchema = {
	description: `Interface representing the output of an ABI encoding operation.
Extends the BaseAPIResponse interface.`,
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			properties: {
				encoded: {
					type: "string",
					description:
						"The encoded string resulting from the ABI encoding operation.",
				},
			},
			required: ["encoded"],
			type: "object",
			description: "Optional data object containing the encoded string.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const AbiEncodeInputSchema = {
	description: "Interface representing the input required for ABI encoding.",
	properties: {
		abi: {
			description: "The ABI (Application Binary Interface) definition.",
		},
		functionName: {
			type: "string",
			description: "The name of the function to be called.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters to be passed to the function.",
		},
	},
	required: ["abi", "functionName", "params"],
	type: "object",
	additionalProperties: false,
} as const;

export const BitcoinInputSchema = {
	description: "Represents the input data required for Bitcoin transactions.",
	properties: {
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		private_key: {
			type: "string",
			description: "The private key of the account.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const BitcoinTransactionOutputSchema = {
	description: "Represents the output of a Bitcoin transaction.",
	properties: {
		signedTx: {
			type: "string",
			description: "The signed transaction.",
		},
		transaction_hash: {
			type: "string",
			description: "The transaction hash.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const SRC20InscriptionOutputSchema = {
	description: "Represents the output of an SRC20 inscription.",
	properties: {
		transactions: {
			type: "string",
			description: "the json string of the inscription transaction",
		},
	},
	required: ["transactions"],
	type: "object",
	additionalProperties: false,
} as const;

export const BRC20TransactionOutputSchema = {
	description: "Represents an output of a BRC20 transaction.",
	properties: {
		transaction: {
			type: "string",
			description: "The signed transaction.",
		},
	},
	required: ["transaction"],
	type: "object",
	additionalProperties: false,
} as const;

export const UnsignedPSBTOutputSchema = {
	description:
		"Represents an unsigned Partially Signed Bitcoin Transaction (PSBT) output.",
	properties: {
		psbt_hex: {
			type: "string",
			description: "The unsigned PSBT.",
		},
	},
	required: ["psbt_hex"],
	type: "object",
	additionalProperties: false,
} as const;

export const BitcoinAPIResponseSchema = {
	properties: {
		data: {
			anyOf: [
				{
					$ref: "#/components/schemas/BitcoinTransactionOutput",
				},
				{
					$ref: "#/components/schemas/SRC20InscriptionOutput",
				},
				{
					$ref: "#/components/schemas/BRC20TransactionOutput",
				},
				{
					$ref: "#/components/schemas/UnsignedPSBTOutput",
				},
			],
		},
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const BitcoinTransactionInputSchema = {
	description: "Represents an input for a Bitcoin transaction.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		value: {
			type: "number",
			format: "double",
			description: "The amount to be sent.",
		},
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		compress: {
			type: "boolean",
			description: "Indicates whether to compress the public key.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const SRC20InscriptionInputSchema = {
	properties: {
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		prev_outputs: {
			type: "string",
			description: "The operation type of the transaction.",
		},
		inscription_data: {
			type: "string",
			description:
				"The ticker symbol of the token involved in the transaction.",
		},
		commit_fee_rate: {
			type: "number",
			format: "double",
			description: "The amount of tokens involved in the transaction.",
		},
		reveal_out_value: {
			type: "number",
			format: "double",
			description: "The transaction ID of the input being used.",
		},
		address: {
			type: "string",
			description: "The output index of the input being used.",
		},
	},
	required: [
		"network",
		"prev_outputs",
		"inscription_data",
		"commit_fee_rate",
		"reveal_out_value",
		"address",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const BRC20TransactionInputSchema = {
	description: "Represents an input for a BRC20 transaction.",
	properties: {
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		op: {
			type: "string",
			description: "The operation type of the transaction.",
		},
		tick: {
			type: "string",
			description:
				"The ticker symbol of the token involved in the transaction.",
		},
		amt: {
			type: "string",
			description: "The amount of tokens involved in the transaction.",
		},
		input_txid: {
			type: "string",
			description: "The transaction ID of the input being used.",
		},
		input_vout: {
			type: "number",
			format: "double",
			description: "The output index of the input being used.",
		},
		input_amount: {
			type: "string",
			description: "The amount of the input being used.",
		},
		output_address: {
			type: "string",
			description: "The address to which the output is being sent.",
		},
		change_address: {
			type: "string",
			description: "The address to which any change is being sent.",
		},
	},
	required: [
		"network",
		"op",
		"tick",
		"amt",
		"input_txid",
		"input_vout",
		"input_amount",
		"output_address",
		"change_address",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const UnsignedPSBTInputSchema = {
	description:
		"Represents an unsigned Partially Signed Bitcoin Transaction (PSBT) input.",
	properties: {
		network: {
			type: "string",
			description:
				"The network for the transaction, either 'mainnet' or 'testnet'.",
		},
		inputs: {
			type: "string",
			description:
				"The inputs for the transaction as a JSON string of an array of TxInput objects.",
		},
		outputs: {
			type: "string",
			description:
				"The outputs for the transaction as a JSON string of an array of TxOutput objects.",
		},
	},
	required: ["network", "inputs", "outputs"],
	type: "object",
	additionalProperties: false,
} as const;

export const BitcoinCashAPIResponse_AccountResponse_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/AccountResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const BitcoinCashInputSchema = {
	description:
		"Represents the input data required for Bitcoin Cash transactions.",
	properties: {
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		private_key: {
			type: "string",
			description: "The private key of the account.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const BitcoinCashTransactionOutputSchema = {
	description: "Represents the output of a Bitcoin Cash transaction.",
	properties: {
		signedTx: {
			type: "string",
			description: "The signed transaction.",
		},
		transaction_hash: {
			type: "string",
			description: "The transaction hash.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const BitcoinCashAPIResponse_BitcoinCashTransactionOutput_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/BitcoinCashTransactionOutput",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const BitcoinCashTransactionInputSchema = {
	description: "Represents an input for a Bitcoin Cash transaction.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		value: {
			type: "number",
			format: "double",
			description: "The amount to be sent.",
		},
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		compress: {
			type: "boolean",
			description: "Indicates whether to compress the public key.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const BitcoinCashAPIResponse__signed_tx_string__Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			properties: {
				signed_tx: {
					type: "string",
				},
			},
			required: ["signed_tx"],
			type: "object",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const BitcoinCashAPIResponse__psbt_hex_string__Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			properties: {
				psbt_hex: {
					type: "string",
				},
			},
			required: ["psbt_hex"],
			type: "object",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const BitcoinCashAPIResponse__signed_psbt_hex_string__Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			properties: {
				signed_psbt_hex: {
					type: "string",
				},
			},
			required: ["signed_psbt_hex"],
			type: "object",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ChartAnalysisAPIResponseSchema = {
	description: "Represents the response from the Chart Analysis API.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			type: "string",
			description: "The analysis data returned by the API.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ComponentDefinitionSchema = {
	description: "Represents the definition of a component.",
	properties: {
		id: {
			type: "string",
			description: "The unique identifier of the component.",
		},
		name: {
			type: "string",
			description: "The name of the component.",
		},
		description: {
			type: "string",
			description: "A brief description of the component.",
		},
		xmlTag: {
			type: "string",
			description: "The XML tag associated with the component.",
		},
		version: {
			type: "string",
			description: "The version of the component.",
		},
		code: {
			type: "string",
			description: "The code of the component.",
		},
		created_at: {
			type: "string",
			format: "date-time",
			description: `The date and time when the component was created.
Optional.`,
		},
		updated_at: {
			type: "string",
			format: "date-time",
			description: `The date and time when the component was last updated.
Optional.`,
		},
		is_active: {
			type: "boolean",
			description: `Indicates whether the component is active.
Optional.`,
		},
	},
	required: ["id", "name", "description", "xmlTag", "version", "code"],
	type: "object",
	additionalProperties: false,
} as const;

export const ComponentAPIResponse_ComponentDefinition_Array_Schema = {
	description: "Represents the structure of an API response for a component.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			items: {
				$ref: "#/components/schemas/ComponentDefinition",
			},
			type: "array",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ComponentAPIResponse_ComponentDefinition_Schema = {
	description: "Represents the structure of an API response for a component.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			$ref: "#/components/schemas/ComponentDefinition",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const Pick_ComponentDefinition_Exclude_keyofComponentDefinition_id__Schema =
	{
		properties: {
			name: {
				type: "string",
				description: "The name of the component.",
			},
			description: {
				type: "string",
				description: "A brief description of the component.",
			},
			xmlTag: {
				type: "string",
				description: "The XML tag associated with the component.",
			},
			version: {
				type: "string",
				description: "The version of the component.",
			},
			code: {
				type: "string",
				description: "The code of the component.",
			},
			created_at: {
				type: "string",
				format: "date-time",
				description: `The date and time when the component was created.
Optional.`,
			},
			updated_at: {
				type: "string",
				format: "date-time",
				description: `The date and time when the component was last updated.
Optional.`,
			},
			is_active: {
				type: "boolean",
				description: `Indicates whether the component is active.
Optional.`,
			},
		},
		required: ["name", "description", "xmlTag", "version", "code"],
		type: "object",
		description:
			"From T, pick a set of properties whose keys are in the union K",
	} as const;

export const Omit_ComponentDefinition_id_Schema = {
	$ref: "#/components/schemas/Pick_ComponentDefinition.Exclude_keyofComponentDefinition.id__",
	description:
		"Construct a type with the properties of T except for those in type K.",
} as const;

export const Partial_ComponentDefinition_Schema = {
	properties: {
		id: {
			type: "string",
			description: "The unique identifier of the component.",
		},
		name: {
			type: "string",
			description: "The name of the component.",
		},
		description: {
			type: "string",
			description: "A brief description of the component.",
		},
		xmlTag: {
			type: "string",
			description: "The XML tag associated with the component.",
		},
		version: {
			type: "string",
			description: "The version of the component.",
		},
		code: {
			type: "string",
			description: "The code of the component.",
		},
		created_at: {
			type: "string",
			format: "date-time",
			description: `The date and time when the component was created.
Optional.`,
		},
		updated_at: {
			type: "string",
			format: "date-time",
			description: `The date and time when the component was last updated.
Optional.`,
		},
		is_active: {
			type: "boolean",
			description: `Indicates whether the component is active.
Optional.`,
		},
	},
	type: "object",
	description: "Make all properties in T optional",
} as const;

export const ComponentMatchSchema = {
	description:
		"Represents a component match that extends the ComponentDefinition interface.",
	properties: {
		id: {
			type: "string",
			description: "The unique identifier of the component.",
		},
		name: {
			type: "string",
			description: "The name of the component.",
		},
		description: {
			type: "string",
			description: "A brief description of the component.",
		},
		xmlTag: {
			type: "string",
			description: "The XML tag associated with the component.",
		},
		version: {
			type: "string",
			description: "The version of the component.",
		},
		code: {
			type: "string",
			description: "The code of the component.",
		},
		created_at: {
			type: "string",
			format: "date-time",
			description: `The date and time when the component was created.
Optional.`,
		},
		updated_at: {
			type: "string",
			format: "date-time",
			description: `The date and time when the component was last updated.
Optional.`,
		},
		is_active: {
			type: "boolean",
			description: `Indicates whether the component is active.
Optional.`,
		},
		similarity: {
			type: "number",
			format: "double",
			description: "The similarity score of the component match.",
		},
	},
	required: [
		"id",
		"name",
		"description",
		"xmlTag",
		"version",
		"code",
		"similarity",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const ComponentAPIResponse_ComponentMatch_Array_Schema = {
	description: "Represents the structure of an API response for a component.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			items: {
				$ref: "#/components/schemas/ComponentMatch",
			},
			type: "array",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ComponentAPIResponse_void_Schema = {
	description: "Represents the structure of an API response for a component.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ComponentAPIResponse_Partial_ComponentDefinition__Array_Schema = {
	description: "Represents the structure of an API response for a component.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			items: {
				$ref: "#/components/schemas/Partial_ComponentDefinition_",
			},
			type: "array",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CosmosAccountSchema = {
	description: "Represents a Cosmos account with an address and a public key.",
	properties: {
		address: {
			type: "string",
			description: "Account name.",
		},
		pubkey: {
			type: "string",
			description: "Public key of the account.",
		},
	},
	required: ["address", "pubkey"],
	type: "object",
	additionalProperties: false,
} as const;

export const CosmosAccountListResponseSchema = {
	description:
		"Represents the response structure for a list of Cosmos accounts.",
	properties: {
		data: {
			properties: {
				keys: {
					items: {
						$ref: "#/components/schemas/CosmosAccount",
					},
					type: "array",
				},
			},
			required: ["keys"],
			type: "object",
			description: "The list of Cosmos accounts.",
		},
	},
	required: ["data"],
	type: "object",
	additionalProperties: false,
} as const;

export const CosmosAccountListAPIResponseSchema = {
	description: "Represents the response from the Cosmos Account List API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			$ref: "#/components/schemas/CosmosAccountListResponse",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CosmosAccountResponseSchema = {
	description: "Represents the response structure for a Cosmos account.",
	properties: {
		data: {
			properties: {
				address: {
					type: "string",
				},
			},
			required: ["address"],
			type: "object",
			description: "The Cosmos account address.",
		},
	},
	required: ["data"],
	type: "object",
	additionalProperties: false,
} as const;

export const CosmosAccountAPIResponseSchema = {
	description: "Represents the response from the Cosmos Account API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			$ref: "#/components/schemas/CosmosAccountResponse",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const BaseCosmosAPIResponseSchema = {
	description:
		"Represents the base structure of a response from the Cosmos API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CosmosTransactionResponseSchema = {
	description: "Represents the response of a Cosmos transaction.",
	properties: {
		signedTx: {
			type: "string",
			description: "The signed transaction.",
		},
		txHash: {
			type: "string",
			description: "The transaction hash.",
		},
	},
	required: ["signedTx", "txHash"],
	type: "object",
	additionalProperties: false,
} as const;

export const CosmosTransactionAPIResponseSchema = {
	description: "Represents the response from the Cosmos Transaction API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			$ref: "#/components/schemas/CosmosTransactionResponse",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CosmosTransferInputSchema = {
	description:
		"Represents the input required for a Cosmos blockchain transfer.",
	properties: {
		fromAddress: {
			type: "string",
			description: "The address from which the transfer is initiated.",
		},
		toAddress: {
			type: "string",
			description: "The address to which the transfer is sent.",
		},
		amount: {
			type: "string",
			description: "The amount of tokens to be transferred.",
		},
		denom: {
			type: "string",
			description: "The denomination of the tokens to be transferred.",
		},
		chainId: {
			type: "string",
			description: "The ID of the blockchain chain.",
		},
		sequence: {
			type: "number",
			format: "double",
			description:
				"The sequence number of the account initiating the transfer.",
		},
		accountNumber: {
			type: "number",
			format: "double",
			description: "The account number of the account initiating the transfer.",
		},
		feeDenom: {
			type: "string",
			description: "The denomination of the fee to be paid for the transfer.",
		},
		feeAmount: {
			type: "string",
			description: "The amount of the fee to be paid for the transfer.",
		},
		gasLimit: {
			type: "number",
			format: "double",
			description: "The gas limit for the transfer transaction.",
		},
		memo: {
			type: "string",
			description: "An optional memo to include with the transfer.",
		},
		timeoutHeight: {
			type: "number",
			format: "double",
			description: "The timeout height for the transfer transaction.",
		},
	},
	required: [
		"fromAddress",
		"toAddress",
		"amount",
		"denom",
		"chainId",
		"sequence",
		"accountNumber",
		"feeDenom",
		"feeAmount",
		"gasLimit",
		"memo",
		"timeoutHeight",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const CosmosSignedMessageResponseSchema = {
	description:
		"Represents the response containing a signed message from the Cosmos blockchain.",
	properties: {
		signedMessage: {
			type: "string",
			description: "The signed message.",
		},
	},
	required: ["signedMessage"],
	type: "object",
	additionalProperties: false,
} as const;

export const CosmosSignedMessageAPIResponseSchema = {
	description: "Represents the response from the Cosmos Signed Message API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			$ref: "#/components/schemas/CosmosSignedMessageResponse",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CosmosSignMessageInputSchema = {
	description:
		"Represents the input required for signing a message in the Cosmos ecosystem.",
	properties: {
		message: {
			type: "string",
			description: "The address of the account signing the message.",
		},
	},
	required: ["message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CosmosIBCTransferInputSchema = {
	description: `Interface representing the input required for an IBC (Inter-Blockchain Communication) transfer in the Cosmos network.
Extends the \`CosmosTransferInput\` interface to include additional properties specific to IBC transfers.`,
	properties: {
		fromAddress: {
			type: "string",
			description: "The address from which the transfer is initiated.",
		},
		toAddress: {
			type: "string",
			description: "The address to which the transfer is sent.",
		},
		amount: {
			type: "string",
			description: "The amount of tokens to be transferred.",
		},
		denom: {
			type: "string",
			description: "The denomination of the tokens to be transferred.",
		},
		chainId: {
			type: "string",
			description: "The ID of the blockchain chain.",
		},
		sequence: {
			type: "number",
			format: "double",
			description:
				"The sequence number of the account initiating the transfer.",
		},
		accountNumber: {
			type: "number",
			format: "double",
			description: "The account number of the account initiating the transfer.",
		},
		feeDenom: {
			type: "string",
			description: "The denomination of the fee to be paid for the transfer.",
		},
		feeAmount: {
			type: "string",
			description: "The amount of the fee to be paid for the transfer.",
		},
		gasLimit: {
			type: "number",
			format: "double",
			description: "The gas limit for the transfer transaction.",
		},
		memo: {
			type: "string",
			description: "An optional memo to include with the transfer.",
		},
		timeoutHeight: {
			type: "number",
			format: "double",
			description: "The timeout height for the transfer transaction.",
		},
		sourcePort: {
			type: "string",
			description: "The source port for the IBC transfer.",
		},
		sourceChannel: {
			type: "string",
			description: "The source channel for the IBC transfer.",
		},
		timeoutTimestamp: {
			type: "number",
			format: "double",
			description:
				"The timeout timestamp for the IBC transfer, specified in nanoseconds.",
		},
	},
	required: [
		"fromAddress",
		"toAddress",
		"amount",
		"denom",
		"chainId",
		"sequence",
		"accountNumber",
		"feeDenom",
		"feeAmount",
		"gasLimit",
		"memo",
		"timeoutHeight",
		"sourcePort",
		"sourceChannel",
		"timeoutTimestamp",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const WalletBalanceAPIResponseSchema = {
	description:
		"Interface representing the response from the Wallet Balance API.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			items: {},
			type: "array",
			description: "The wallet balance data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const EvmAddressJSONSchema = {
	type: "string",
} as const;

export const BigNumberJSONSchema = {
	type: "string",
} as const;

export const EvmInternalTransactionJSONSchema = {
	properties: {
		transaction_hash: {
			type: "string",
		},
		block_number: {
			type: "string",
		},
		block_hash: {
			type: "string",
		},
		type: {
			type: "string",
		},
		from: {
			type: "string",
		},
		to: {
			type: "string",
		},
		value: {
			type: "string",
		},
		gas: {
			type: "string",
		},
		gas_used: {
			type: "string",
		},
		input: {
			type: "string",
		},
		output: {
			type: "string",
		},
	},
	required: [
		"transaction_hash",
		"block_number",
		"block_hash",
		"type",
		"from",
		"to",
		"value",
		"gas",
		"gas_used",
		"input",
		"output",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const EvmETransactionCategoryJSONSchema = {
	type: "string",
	enum: [
		"send",
		"receive",
		"token send",
		"token receive",
		"nft send",
		"nft receive",
		"token swap",
		"deposit",
		"withdraw",
		"nft purchase",
		"nft sale",
		"airdrop",
		"mint",
		"burn",
		"borrow",
		"contract interaction",
	],
} as const;

export const EvmContractTokenDetailsJSONSchema = {
	properties: {
		address: {
			$ref: "#/components/schemas/EvmAddressJSON",
		},
		address_label: {
			type: "string",
		},
		token_name: {
			type: "string",
		},
		token_logo: {
			type: "string",
		},
		token_symbol: {
			type: "string",
		},
	},
	required: ["address", "token_name", "token_logo", "token_symbol"],
	type: "object",
	additionalProperties: false,
} as const;

export const EvmContractSpenderDetailsJSONSchema = {
	properties: {
		address: {
			$ref: "#/components/schemas/EvmAddressJSON",
		},
		address_label: {
			type: "string",
		},
		name: {
			type: "string",
		},
		symbol: {
			type: "string",
		},
		logo: {
			type: "string",
		},
	},
	required: ["address"],
	type: "object",
	additionalProperties: false,
} as const;

export const EvmCommonContractDataJSONSchema = {
	properties: {
		value: {
			type: "string",
		},
		value_formatted: {
			type: "string",
		},
		token: {
			$ref: "#/components/schemas/EvmContractTokenDetailsJSON",
		},
		spender: {
			$ref: "#/components/schemas/EvmContractSpenderDetailsJSON",
		},
	},
	required: ["value", "token", "spender"],
	type: "object",
	additionalProperties: false,
} as const;

export const EvmResolveContractInteractionResponseJSONSchema = {
	properties: {
		approvals: {
			items: {
				$ref: "#/components/schemas/EvmCommonContractDataJSON",
			},
			type: "array",
		},
		revokes: {
			items: {
				$ref: "#/components/schemas/EvmCommonContractDataJSON",
			},
			type: "array",
		},
		approvalsAll: {
			items: {
				$ref: "#/components/schemas/EvmCommonContractDataJSON",
			},
			type: "array",
		},
		revokesAll: {
			items: {
				$ref: "#/components/schemas/EvmCommonContractDataJSON",
			},
			type: "array",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const EvmNormalizedMetadataAttributeValueJSONSchema = {
	additionalProperties: false,
	type: "object",
} as const;

export const EvmNormalizedMetadataAttributeJSONSchema = {
	properties: {
		trait_type: {
			type: "string",
		},
		value: {
			$ref: "#/components/schemas/EvmNormalizedMetadataAttributeValueJSON",
		},
		display_type: {
			type: "string",
		},
		max_value: {
			type: "number",
			format: "double",
		},
		trait_count: {
			type: "number",
			format: "double",
		},
		order: {
			type: "number",
			format: "double",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const EvmNormalizedMetadataJSONSchema = {
	properties: {
		name: {
			type: "string",
		},
		description: {
			type: "string",
		},
		image: {
			type: "string",
		},
		external_link: {
			type: "string",
		},
		animation_url: {
			type: "string",
		},
		attributes: {
			items: {
				$ref: "#/components/schemas/EvmNormalizedMetadataAttributeJSON",
			},
			type: "array",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const EvmWalletHistoryNftTransferJSONSchema = {
	properties: {
		token_address: {
			$ref: "#/components/schemas/EvmAddressJSON",
		},
		token_id: {
			type: "string",
		},
		from_address_entity: {
			type: "string",
		},
		from_address_entity_logo: {
			type: "string",
		},
		from_address: {
			$ref: "#/components/schemas/EvmAddressJSON",
		},
		from_address_label: {
			type: "string",
		},
		to_address_entity: {
			type: "string",
		},
		to_address_entity_logo: {
			type: "string",
		},
		to_address: {
			$ref: "#/components/schemas/EvmAddressJSON",
		},
		to_address_label: {
			type: "string",
		},
		value: {
			type: "string",
		},
		amount: {
			type: "string",
		},
		contract_type: {
			type: "string",
		},
		transaction_type: {
			type: "string",
		},
		log_index: {
			type: "number",
			format: "double",
		},
		operator: {
			type: "string",
		},
		possible_spam: {
			type: "boolean",
		},
		verified_collection: {
			type: "boolean",
		},
		direction: {
			type: "string",
		},
		collection_logo: {
			type: "string",
		},
		collection_banner_image: {
			type: "string",
		},
		normalized_metadata: {
			$ref: "#/components/schemas/EvmNormalizedMetadataJSON",
		},
	},
	required: [
		"token_address",
		"token_id",
		"from_address",
		"value",
		"amount",
		"contract_type",
		"transaction_type",
		"log_index",
		"possible_spam",
		"direction",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const EvmWalletHistoryErc20TransferJSONSchema = {
	properties: {
		token_name: {
			type: "string",
		},
		token_symbol: {
			type: "string",
		},
		token_logo: {
			type: "string",
		},
		token_decimals: {
			type: "string",
		},
		address: {
			$ref: "#/components/schemas/EvmAddressJSON",
		},
		block_timestamp: {
			type: "string",
		},
		to_address_entity: {
			type: "string",
		},
		to_address_entity_logo: {
			type: "string",
		},
		to_address: {
			$ref: "#/components/schemas/EvmAddressJSON",
		},
		to_address_label: {
			type: "string",
		},
		from_address_entity: {
			type: "string",
		},
		from_address_entity_logo: {
			type: "string",
		},
		from_address: {
			$ref: "#/components/schemas/EvmAddressJSON",
		},
		from_address_label: {
			type: "string",
		},
		value: {
			type: "string",
		},
		value_formatted: {
			type: "string",
		},
		log_index: {
			type: "number",
			format: "double",
		},
		possible_spam: {
			type: "boolean",
		},
		verified_contract: {
			type: "boolean",
		},
	},
	required: [
		"token_name",
		"token_symbol",
		"token_logo",
		"token_decimals",
		"address",
		"from_address",
		"value",
		"value_formatted",
		"log_index",
		"possible_spam",
		"verified_contract",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const EvmNativeTransferJSONSchema = {
	properties: {
		from_address_entity: {
			type: "string",
		},
		from_address_entity_logo: {
			type: "string",
		},
		from_address: {
			$ref: "#/components/schemas/EvmAddressJSON",
		},
		from_address_label: {
			type: "string",
		},
		to_address_entity: {
			type: "string",
		},
		to_address_entity_logo: {
			type: "string",
		},
		to_address: {
			$ref: "#/components/schemas/EvmAddressJSON",
		},
		to_address_label: {
			type: "string",
		},
		value: {
			type: "string",
		},
		value_formatted: {
			type: "string",
		},
		direction: {
			type: "string",
		},
		internal_transaction: {
			type: "boolean",
		},
		token_symbol: {
			type: "string",
		},
		token_logo: {
			type: "string",
		},
	},
	required: [
		"from_address",
		"value",
		"value_formatted",
		"internal_transaction",
		"token_symbol",
		"token_logo",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const EvmDecodedEventParamsItemJSONSchema = {
	properties: {
		name: {
			type: "string",
		},
		value: {
			type: "string",
		},
		type: {
			type: "string",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const EvmDecodedEventJSONSchema = {
	properties: {
		signature: {
			type: "string",
		},
		label: {
			type: "string",
		},
		type: {
			type: "string",
		},
		params: {
			items: {
				$ref: "#/components/schemas/EvmDecodedEventParamsItemJSON",
			},
			type: "array",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const EvmLogVerboseJSONSchema = {
	properties: {
		log_index: {
			type: "string",
		},
		transaction_hash: {
			type: "string",
		},
		transaction_index: {
			type: "string",
		},
		address: {
			$ref: "#/components/schemas/EvmAddressJSON",
		},
		data: {
			type: "string",
		},
		topic0: {
			type: "string",
		},
		topic1: {
			type: "string",
		},
		topic2: {
			type: "string",
		},
		topic3: {
			type: "string",
		},
		block_timestamp: {
			type: "string",
		},
		block_number: {
			$ref: "#/components/schemas/BigNumberJSON",
		},
		block_hash: {
			type: "string",
		},
		decoded_event: {
			$ref: "#/components/schemas/EvmDecodedEventJSON",
		},
	},
	required: [
		"log_index",
		"transaction_hash",
		"transaction_index",
		"address",
		"data",
		"topic0",
		"block_timestamp",
		"block_number",
		"block_hash",
		"decoded_event",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const EvmWalletHistoryTransactionJSONSchema = {
	properties: {
		hash: {
			type: "string",
		},
		nonce: {
			type: "string",
		},
		transaction_index: {
			type: "string",
		},
		from_address_entity: {
			type: "string",
		},
		from_address_entity_logo: {
			type: "string",
		},
		from_address: {
			$ref: "#/components/schemas/EvmAddressJSON",
		},
		from_address_label: {
			type: "string",
		},
		to_address_entity: {
			type: "string",
		},
		to_address_entity_logo: {
			type: "string",
		},
		to_address: {
			$ref: "#/components/schemas/EvmAddressJSON",
		},
		to_address_label: {
			type: "string",
		},
		value: {
			type: "string",
		},
		gas: {
			type: "string",
		},
		gas_price: {
			type: "string",
		},
		input: {
			type: "string",
		},
		receipt_cumulative_gas_used: {
			type: "string",
		},
		receipt_gas_used: {
			type: "string",
		},
		receipt_contract_address: {
			type: "string",
		},
		receipt_status: {
			type: "string",
		},
		transaction_fee: {
			type: "string",
		},
		block_timestamp: {
			type: "string",
		},
		block_number: {
			$ref: "#/components/schemas/BigNumberJSON",
		},
		block_hash: {
			type: "string",
		},
		internal_transactions: {
			items: {
				$ref: "#/components/schemas/EvmInternalTransactionJSON",
			},
			type: "array",
		},
		category: {
			$ref: "#/components/schemas/EvmETransactionCategoryJSON",
		},
		contract_interactions: {
			$ref: "#/components/schemas/EvmResolveContractInteractionResponseJSON",
		},
		possible_spam: {
			type: "boolean",
		},
		method_label: {
			type: "string",
		},
		summary: {
			type: "string",
		},
		nft_transfers: {
			items: {
				$ref: "#/components/schemas/EvmWalletHistoryNftTransferJSON",
			},
			type: "array",
		},
		erc20_transfers: {
			items: {
				$ref: "#/components/schemas/EvmWalletHistoryErc20TransferJSON",
			},
			type: "array",
		},
		native_transfers: {
			items: {
				$ref: "#/components/schemas/EvmNativeTransferJSON",
			},
			type: "array",
		},
		logs: {
			items: {
				$ref: "#/components/schemas/EvmLogVerboseJSON",
			},
			type: "array",
		},
	},
	required: [
		"hash",
		"nonce",
		"transaction_index",
		"from_address",
		"value",
		"gas_price",
		"receipt_cumulative_gas_used",
		"receipt_gas_used",
		"receipt_status",
		"block_timestamp",
		"block_number",
		"block_hash",
		"category",
		"summary",
		"nft_transfers",
		"erc20_transfers",
		"native_transfers",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const WalletHistoryAPIResponseSchema = {
	description:
		"Interface representing the response from the Wallet History API.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			items: {
				$ref: "#/components/schemas/EvmWalletHistoryTransactionJSON",
			},
			type: "array",
			description: "The wallet history data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const SuccessResponse$9Schema = {
	items: {
		properties: {
			verified_contract: {
				type: "boolean",
				example: false,
			},
			possible_spam: {
				type: "boolean",
				example: false,
			},
			created_at: {
				type: "string",
			},
			validated: {
				type: "number",
				format: "double",
			},
			block_number: {
				type: "string",
			},
			thumbnail: {
				type: "string",
				nullable: true,
			},
			logo_hash: {
				type: "string",
				nullable: true,
			},
			logo: {
				type: "string",
				nullable: true,
			},
			decimals: {
				type: "string",
				example: 18,
			},
			symbol: {
				type: "string",
			},
			name: {
				type: "string",
			},
			address_label: {
				type: "string",
				nullable: true,
			},
			address: {
				type: "string",
			},
		},
		required: [
			"possible_spam",
			"created_at",
			"decimals",
			"symbol",
			"name",
			"address",
		],
		type: "object",
	},
	type: "array",
} as const;

export const GetTokenMetadataJSONResponseSchema = {
	$ref: "#/components/schemas/SuccessResponse$9",
} as const;

export const TokenMetadataAPIResponseSchema = {
	description: "Represents the response from the Token Metadata API.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/SuccessResponse$9",
			description: "The token metadata information.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const NFTsAPIResponseSchema = {
	description: "Interface representing the response from the NFTs API.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			items: {},
			type: "array",
			description: "The NFT data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const PortfolioAPIResponseSchema = {
	description: `Interface representing the response from the Portfolio API.
Extends the BaseAPIResponse interface.`,
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			properties: {
				pollUrl: {
					type: "string",
					description: "The URL to poll for updates.",
				},
				jobId: {
					type: "string",
					description: "The job ID associated with the request.",
				},
				status: {
					type: "string",
					description: "The status of the response.",
				},
				reason: {
					type: "string",
					description: "The reason for the response status.",
				},
				totalNFTs: {
					type: "number",
					format: "double",
					description: "The total number of NFTs.",
				},
				totalTokens: {
					type: "number",
					format: "double",
					description: "The total number of tokens.",
				},
				pageSize: {
					type: "number",
					format: "double",
					description: "The number of items per page.",
				},
				page: {
					type: "number",
					format: "double",
					description: "The current page number.",
				},
				nft_balances: {
					items: {},
					type: "array",
					description: "An array of NFT balances.",
				},
				token_balances: {
					items: {},
					type: "array",
					description: "An array of token balances.",
				},
				address: {
					type: "string",
					description: "The address associated with the portfolio.",
				},
			},
			type: "object",
			description: "The data object containing portfolio details.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const DogeCoinInputSchema = {
	description: "Represents the input required for DogeCoin transactions.",
	properties: {
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		private_key: {
			type: "string",
			description: "The private key of the account.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const DogeCoinTransactionOutputSchema = {
	description: "Represents the output of a DogeCoin transaction.",
	properties: {
		signedTx: {
			type: "string",
			description: "The signed transaction.",
		},
		transaction_hash: {
			type: "string",
			description: "The transaction hash.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const DogeCoinAPIResponseSchema = {
	description: `Interface representing the response from the DogeCoin API.
Extends the BaseAPIResponse interface.`,
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/DogeCoinTransactionOutput",
			description: "The data associated with the DogeCoin transaction output.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const DogeCoinTransactionInputSchema = {
	description: "Represents an input for a DogeCoin transaction.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		value: {
			type: "number",
			format: "double",
			description: "The amount to be sent.",
		},
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		compress: {
			type: "boolean",
			description: "Indicates whether to compress the public key.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const EnsResolveResponseSchema = {
	description:
		"Represents the response from an ENS (Ethereum Name Service) resolve operation.",
	properties: {
		address: {
			type: "string",
			description: "The address associated with the domain.",
		},
	},
	required: ["address"],
	type: "object",
	additionalProperties: false,
} as const;

export const EnsResolveAPIResponseSchema = {
	description: `Interface representing the response from the ENS resolve API.
Extends the BaseAPIResponse interface.`,
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/EnsResolveResponse",
			description: "The ENS resolve response data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const EnsResolveInputSchema = {
	description:
		"Represents the input required to resolve an ENS (Ethereum Name Service) domain.",
	properties: {
		domain: {
			type: "string",
			description: "The domain to be resolved.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID of the blockchain network.",
		},
	},
	required: ["domain", "chain_id"],
	type: "object",
	additionalProperties: false,
} as const;

export const ENSReverseResolveResponseSchema = {
	description: "Represents the response from an ENS reverse resolution.",
	properties: {
		domain: {
			type: "string",
			description: "The domain name resolved from the ENS reverse lookup.",
		},
	},
	required: ["domain"],
	type: "object",
	additionalProperties: false,
} as const;

export const ENSReverseResolveAPIResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/ENSReverseResolveResponse",
			description: "The ENS reverse resolve response data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ENSReverseResolveInputSchema = {
	description:
		"Interface representing the input required for ENS reverse resolution.",
	properties: {
		address: {
			type: "string",
			description: "The blockchain address to be reverse resolved.",
		},
		chain_id: {
			type: "string",
			description: "The identifier of the blockchain network.",
		},
	},
	required: ["address", "chain_id"],
	type: "object",
	additionalProperties: false,
} as const;

export const EosInputSchema = {
	description: "Represents the input data required for EOS operations.",
	properties: {
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		private_key: {
			type: "string",
			description: "The private key of the account.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const EosTransactionOutputSchema = {
	description: "Represents the output of an EOS transaction.",
	properties: {
		signedTx: {
			type: "string",
			description: "The signed transaction.",
		},
		transaction_hash: {
			type: "string",
			description: "The transaction hash.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const EosAPIResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/EosTransactionOutput",
			description: "The data associated with the Eos response.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const EosTransactionInputSchema = {
	description: "Represents an input for an EOS transaction.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		value: {
			type: "number",
			format: "double",
			description: "The amount to be sent.",
		},
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		compress: {
			type: "boolean",
			description: "Indicates whether to compress the public key.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const Erc1155RequestSchema = {
	description:
		"Interface representing a request for ERC-1155 token operations.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		data: {
			type: "string",
			description: "The data to be sent.",
		},
		value: {
			type: "string",
			description: "The value to be sent.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce for the transaction.",
		},
		simulate: {
			type: "boolean",
			description: "Whether to simulate the transaction.",
		},
		gas: {
			type: "string",
			description: "The gas for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Whether to perform a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Whether the transaction is from an externally owned account.",
		},
		contract_address: {
			type: "string",
			description: "The contract address.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "Optional. A comma-separated list of token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Optional. Indicates whether the tokens are approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Whether to broadcast the transaction.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "Whether to always increment the nonce.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount involved in the transaction.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const ERC20APIResponse_number_Schema = {
	description:
		"Interface representing the structure of an API response for ERC20 operations.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			type: "number",
			format: "double",
			description: "Optional data payload returned by the API.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ERC20APIResponse_string_Schema = {
	description:
		"Interface representing the structure of an API response for ERC20 operations.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			type: "string",
			description: "Optional data payload returned by the API.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ERC20TransactionSchema = {
	description: "Represents an ERC-20 token transaction.",
	properties: {
		data: {
			type: "string",
			description: "The data payload of the transaction.",
		},
		value: {
			type: "string",
			description: "The value to be transferred in the transaction, in wei.",
		},
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		from: {
			type: "string",
			description: "The sender address of the transaction.",
		},
		gasPrice: {
			type: "string",
			description: `The gas price for the transaction, in wei.
Optional.`,
		},
		gasLimit: {
			type: "string",
			description: `The gas limit for the transaction.
Optional.`,
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: `The maximum priority fee per gas for EIP-1559 transactions, in wei.
Optional.`,
		},
		maxFeePerGas: {
			type: "string",
			description: `The maximum fee per gas for EIP-1559 transactions, in wei.
Optional.`,
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce of the transaction.",
		},
		type: {
			type: "number",
			format: "double",
			description: `The type of the transaction.
Optional.`,
		},
		chainId: {
			type: "string",
			description: "The chain ID of the network where the transaction is sent.",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const ERC20ExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description: "Optional response from simulating asset changes.",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description:
				"Optional response indicating whether the transaction was broadcasted.",
		},
		message: {
			type: "string",
			description:
				"Optional message providing additional information about the execution.",
		},
		success: {
			type: "boolean",
			description: "Indicates whether the execution was successful.",
		},
		user_op: {
			type: "string",
			description: "Optional user operation identifier.",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "Optional transaction data.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters passed to the function.",
		},
		function: {
			type: "string",
			description: "The name of the executed function",
		},
		transaction: {
			$ref: "#/components/schemas/ERC20Transaction",
			description: "The transaction details.",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
	description: "Represents the result of executing an ERC20 function.",
} as const;

export const ERC20APIResponse_ERC20ExecuteFunctionResult_Schema = {
	description:
		"Interface representing the structure of an API response for ERC20 operations.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			$ref: "#/components/schemas/ERC20ExecuteFunctionResult",
			description: "Optional data payload returned by the API.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ERC20InputBodySchema = {
	description:
		"Interface representing the input body for an ERC20 transaction.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address of the ERC20 token transfer.",
		},
		data: {
			type: "string",
			description: "Additional data to include in the transaction.",
		},
		value: {
			type: "string",
			description: "The value of the transaction in wei.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce to use for the transaction.",
		},
		simulate: {
			type: "boolean",
			description: "Flag to indicate if the transaction should be simulated.",
		},
		gas: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Flag to indicate if the transaction should be a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Flag to indicate if the transaction is from an externally owned account.",
		},
		contract_address: {
			type: "string",
			description: "The address of the ERC20 contract.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Flag to indicate if the transaction should be broadcasted.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description:
				"Flag to indicate if the nonce should always be incremented.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount of ERC20 tokens to transfer.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const ERC4626APIResponseSchema = {
	description:
		"Interface representing the structure of the API response for ERC4626.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description: "Provides a message related to the API response.",
		},
		data: {
			description: "Optional data returned by the API.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ERC721APIResponseSchema = {
	description:
		"Interface representing the structure of the response from the ERC721 API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			description: "Optional data returned by the API.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CompanyFactsSchema = {
	description: "Represents the financial and general information of a company.",
	properties: {
		ticker: {
			type: "string",
			description: "The stock ticker symbol of the company.",
		},
		name: {
			type: "string",
			description: "The name of the company.",
		},
		cik: {
			type: "string",
			description: "The Central Index Key (CIK) assigned by the SEC.",
		},
		market_cap: {
			type: "number",
			format: "double",
			description: "The market capitalization of the company.",
		},
		weighted_average_shares: {
			type: "number",
			format: "double",
			description: "The weighted average number of shares outstanding.",
		},
		number_of_employees: {
			type: "number",
			format: "double",
			description: "The number of employees working for the company.",
		},
		sic_code: {
			type: "string",
			description:
				"The Standard Industrial Classification (SIC) code of the company.",
		},
		sic_description: {
			type: "string",
			description: "The description of the SIC code.",
		},
		website_url: {
			type: "string",
			description: "The website URL of the company.",
		},
		listing_date: {
			type: "string",
			description: "The date when the company was listed.",
		},
		is_active: {
			type: "boolean",
			description: "Indicates whether the company is currently active.",
		},
	},
	required: [
		"ticker",
		"name",
		"cik",
		"market_cap",
		"weighted_average_shares",
		"number_of_employees",
		"sic_code",
		"sic_description",
		"website_url",
		"listing_date",
		"is_active",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const CompanyFactsAPIResponseSchema = {
	description: "Represents the response of the `getCompanyFacts` endpoint.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/CompanyFacts",
			description: "The company facts data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const IncomeStatementSchema = {
	description: "Represents an income statement for a financial entity.",
	properties: {
		ticker: {
			type: "string",
			description: "The ticker symbol of the company.",
		},
		calendar_date: {
			type: "string",
			description: "The calendar date of the income statement.",
		},
		report_period: {
			type: "string",
			description: "The reporting period of the income statement.",
		},
		period: {
			type: "string",
			enum: ["quarterly", "ttm", "annual"],
			description:
				'The period type of the income statement, which can be "quarterly", "ttm" (trailing twelve months), or "annual".',
		},
		currency: {
			type: "string",
			description: "The currency in which the financials are reported.",
		},
		revenue: {
			type: "number",
			format: "double",
			description: "The total revenue generated by the company.",
		},
		cost_of_revenue: {
			type: "number",
			format: "double",
			description: "The cost associated with generating the revenue.",
		},
		gross_profit: {
			type: "number",
			format: "double",
			description:
				"The gross profit, calculated as revenue minus cost of revenue.",
		},
		operating_expense: {
			type: "number",
			format: "double",
			description: "The total operating expenses of the company.",
		},
		selling_general_and_administrative_expenses: {
			type: "number",
			format: "double",
			description:
				"The expenses related to selling, general, and administrative activities.",
		},
		research_and_development: {
			type: "number",
			format: "double",
			description:
				"The expenses related to research and development activities.",
		},
		operating_income: {
			type: "number",
			format: "double",
			description:
				"The operating income, calculated as gross profit minus operating expenses.",
		},
		interest_expense: {
			type: "number",
			format: "double",
			description: "The interest expense incurred by the company.",
		},
		ebit: {
			type: "number",
			format: "double",
			description: "Earnings before interest and taxes.",
		},
		income_tax_expense: {
			type: "number",
			format: "double",
			description: "The income tax expense incurred by the company.",
		},
		net_income_discontinued_operations: {
			type: "number",
			format: "double",
			description: "The net income from discontinued operations.",
		},
		net_income_non_controlling_interests: {
			type: "number",
			format: "double",
			description: "The net income attributable to non-controlling interests.",
		},
		net_income: {
			type: "number",
			format: "double",
			description: "The net income of the company.",
		},
		net_income_common_stock: {
			type: "number",
			format: "double",
			description: "The net income attributable to common stockholders.",
		},
		preferred_dividends_impact: {
			type: "number",
			format: "double",
			description: "The impact of preferred dividends on net income.",
		},
		consolidated_income: {
			type: "number",
			format: "double",
			description: "The consolidated income of the company.",
		},
		earnings_per_share: {
			type: "number",
			format: "double",
			description: "The earnings per share of the company.",
		},
		earnings_per_share_diluted: {
			type: "number",
			format: "double",
			description: "The diluted earnings per share of the company.",
		},
		dividends_per_common_share: {
			type: "number",
			format: "double",
			description: "The dividends paid per common share.",
		},
		weighted_average_shares: {
			type: "number",
			format: "double",
			description: "The weighted average number of shares outstanding.",
		},
		weighted_average_shares_diluted: {
			type: "number",
			format: "double",
			description: "The weighted average number of diluted shares outstanding.",
		},
	},
	required: [
		"ticker",
		"calendar_date",
		"report_period",
		"period",
		"currency",
		"revenue",
		"cost_of_revenue",
		"gross_profit",
		"operating_expense",
		"selling_general_and_administrative_expenses",
		"research_and_development",
		"operating_income",
		"interest_expense",
		"ebit",
		"income_tax_expense",
		"net_income_discontinued_operations",
		"net_income_non_controlling_interests",
		"net_income",
		"net_income_common_stock",
		"preferred_dividends_impact",
		"consolidated_income",
		"earnings_per_share",
		"earnings_per_share_diluted",
		"dividends_per_common_share",
		"weighted_average_shares",
		"weighted_average_shares_diluted",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const IncomeStatementsAPIResponseSchema = {
	description: "Represents the response of the `getIncomeStatements` endpoint.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			items: {
				$ref: "#/components/schemas/IncomeStatement",
			},
			type: "array",
			description: "The income statement data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const BalanceSheetSchema = {
	description: "Represents a balance sheet for a financial entity.",
	properties: {
		ticker: {
			type: "string",
			description: "The stock ticker symbol of the company.",
		},
		calendar_date: {
			type: "string",
			description: "The date of the balance sheet in the calendar.",
		},
		report_period: {
			type: "string",
			description: "The reporting period of the balance sheet.",
		},
		period: {
			type: "string",
			enum: ["quarterly", "ttm", "annual"],
			description:
				'The period type of the balance sheet, which can be "quarterly", "ttm" (trailing twelve months), or "annual".',
		},
		currency: {
			type: "string",
			description:
				"The currency in which the balance sheet values are denominated.",
		},
		total_assets: {
			type: "number",
			format: "double",
			description: "The total assets of the company.",
		},
		current_assets: {
			type: "number",
			format: "double",
			description: "The current assets of the company.",
		},
		cash_and_equivalents: {
			type: "number",
			format: "double",
			description: "The cash and cash equivalents of the company.",
		},
		inventory: {
			type: "number",
			format: "double",
			description: "The inventory of the company.",
		},
		current_investments: {
			type: "number",
			format: "double",
			description: "The current investments of the company.",
		},
		trade_and_non_trade_receivables: {
			type: "number",
			format: "double",
			description: "The trade and non-trade receivables of the company.",
		},
		non_current_assets: {
			type: "number",
			format: "double",
			description: "The non-current assets of the company.",
		},
		property_plant_and_equipment: {
			type: "number",
			format: "double",
			description: "The property, plant, and equipment of the company.",
		},
		goodwill_and_intangible_assets: {
			type: "number",
			format: "double",
			description: "The goodwill and intangible assets of the company.",
		},
		investments: {
			type: "number",
			format: "double",
			description: "The total investments of the company.",
		},
		non_current_investments: {
			type: "number",
			format: "double",
			description: "The non-current investments of the company.",
		},
		outstanding_shares: {
			type: "number",
			format: "double",
			description: "The number of outstanding shares of the company.",
		},
		tax_assets: {
			type: "number",
			format: "double",
			description: "The tax assets of the company.",
		},
		total_liabilities: {
			type: "number",
			format: "double",
			description: "The total liabilities of the company.",
		},
		current_liabilities: {
			type: "number",
			format: "double",
			description: "The current liabilities of the company.",
		},
		current_debt: {
			type: "number",
			format: "double",
			description: "The current debt of the company.",
		},
		trade_and_non_trade_payables: {
			type: "number",
			format: "double",
			description: "The trade and non-trade payables of the company.",
		},
		deferred_revenue: {
			type: "number",
			format: "double",
			description: "The deferred revenue of the company.",
		},
		deposit_liabilities: {
			type: "number",
			format: "double",
			description: "The deposit liabilities of the company.",
		},
		non_current_liabilities: {
			type: "number",
			format: "double",
			description: "The non-current liabilities of the company.",
		},
		non_current_debt: {
			type: "number",
			format: "double",
			description: "The non-current debt of the company.",
		},
		tax_liabilities: {
			type: "number",
			format: "double",
			description: "The tax liabilities of the company.",
		},
		shareholders_equity: {
			type: "number",
			format: "double",
			description: "The shareholders' equity of the company.",
		},
		retained_earnings: {
			type: "number",
			format: "double",
			description: "The retained earnings of the company.",
		},
		accumulated_other_comprehensive_income: {
			type: "number",
			format: "double",
			description: "The accumulated other comprehensive income of the company.",
		},
		total_debt: {
			type: "number",
			format: "double",
			description: "The total debt of the company.",
		},
	},
	required: [
		"ticker",
		"calendar_date",
		"report_period",
		"period",
		"currency",
		"total_assets",
		"current_assets",
		"cash_and_equivalents",
		"inventory",
		"current_investments",
		"trade_and_non_trade_receivables",
		"non_current_assets",
		"property_plant_and_equipment",
		"goodwill_and_intangible_assets",
		"investments",
		"non_current_investments",
		"outstanding_shares",
		"tax_assets",
		"total_liabilities",
		"current_liabilities",
		"current_debt",
		"trade_and_non_trade_payables",
		"deferred_revenue",
		"deposit_liabilities",
		"non_current_liabilities",
		"non_current_debt",
		"tax_liabilities",
		"shareholders_equity",
		"retained_earnings",
		"accumulated_other_comprehensive_income",
		"total_debt",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const BalanceSheetsAPIResponseSchema = {
	description: "Represents the response of the `getBalanceSheets` endpoint.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			items: {
				$ref: "#/components/schemas/BalanceSheet",
			},
			type: "array",
			description: "The balance sheet data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CashFlowStatementSchema = {
	description:
		"Represents a cash flow statement for a specific financial period.",
	properties: {
		ticker: {
			type: "string",
			description: "The ticker symbol of the company.",
		},
		calendar_date: {
			type: "string",
			description: "The calendar date of the cash flow statement.",
		},
		report_period: {
			type: "string",
			description: "The reporting period of the cash flow statement.",
		},
		period: {
			type: "string",
			enum: ["quarterly", "ttm", "annual"],
			description: `The period type of the cash flow statement.
Can be "quarterly", "ttm" (trailing twelve months), or "annual".`,
		},
		currency: {
			type: "string",
			description:
				"The currency in which the cash flow amounts are denominated.",
		},
		net_cash_flow_from_operations: {
			type: "number",
			format: "double",
			description: "Net cash flow from operating activities.",
		},
		depreciation_and_amortization: {
			type: "number",
			format: "double",
			description: "Depreciation and amortization expenses.",
		},
		share_based_compensation: {
			type: "number",
			format: "double",
			description: "Share-based compensation expenses.",
		},
		net_cash_flow_from_investing: {
			type: "number",
			format: "double",
			description: "Net cash flow from investing activities.",
		},
		capital_expenditure: {
			type: "number",
			format: "double",
			description: "Capital expenditures.",
		},
		business_acquisitions_and_disposals: {
			type: "number",
			format: "double",
			description: "Cash flow from business acquisitions and disposals.",
		},
		investment_acquisitions_and_disposals: {
			type: "number",
			format: "double",
			description: "Cash flow from investment acquisitions and disposals.",
		},
		net_cash_flow_from_financing: {
			type: "number",
			format: "double",
			description: "Net cash flow from financing activities.",
		},
		issuance_or_repayment_of_debt_securities: {
			type: "number",
			format: "double",
			description: "Cash flow from issuance or repayment of debt securities.",
		},
		issuance_or_purchase_of_equity_shares: {
			type: "number",
			format: "double",
			description: "Cash flow from issuance or purchase of equity shares.",
		},
		dividends_and_other_cash_distributions: {
			type: "number",
			format: "double",
			description: "Cash flow from dividends and other cash distributions.",
		},
		change_in_cash_and_equivalents: {
			type: "number",
			format: "double",
			description: "Change in cash and cash equivalents.",
		},
		effect_of_exchange_rate_changes: {
			type: "number",
			format: "double",
			description:
				"Effect of exchange rate changes on cash and cash equivalents.",
		},
	},
	required: [
		"ticker",
		"calendar_date",
		"report_period",
		"period",
		"currency",
		"net_cash_flow_from_operations",
		"depreciation_and_amortization",
		"share_based_compensation",
		"net_cash_flow_from_investing",
		"capital_expenditure",
		"business_acquisitions_and_disposals",
		"investment_acquisitions_and_disposals",
		"net_cash_flow_from_financing",
		"issuance_or_repayment_of_debt_securities",
		"issuance_or_purchase_of_equity_shares",
		"dividends_and_other_cash_distributions",
		"change_in_cash_and_equivalents",
		"effect_of_exchange_rate_changes",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const CashFlowStatementsAPIResponseSchema = {
	description:
		"Represents the response of the `getCashFlowStatements` endpoint.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			items: {
				$ref: "#/components/schemas/CashFlowStatement",
			},
			type: "array",
			description: "The cash flow statement data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const SegmentedRevenueItemSchema = {
	description: "Represents an item of segmented revenue data.",
	properties: {
		axis: {
			type: "string",
			description: "The axis of the revenue data.",
		},
		key: {
			type: "string",
			description: "The key associated with the revenue data.",
		},
		value: {
			type: "number",
			format: "double",
			description: "The value of the revenue data.",
		},
		segment: {
			type: "string",
			description: "The segment of the revenue data.",
		},
		start_period: {
			type: "string",
			description: "The start period of the revenue data (optional).",
		},
		end_period: {
			type: "string",
			description: "The end period of the revenue data (optional).",
		},
	},
	required: ["axis", "key", "value", "segment"],
	type: "object",
	additionalProperties: false,
} as const;

export const SegmentedRevenueSchema = {
	description: "Represents the segmented revenue data for a specific company.",
	properties: {
		ticker: {
			type: "string",
			description: "The stock ticker symbol of the company.",
		},
		report_period: {
			type: "string",
			description: "The reporting period for the revenue data.",
		},
		period: {
			type: "string",
			enum: ["annual", "quarterly"],
			description: "The type of reporting period, either annual or quarterly.",
		},
		items: {
			items: {
				$ref: "#/components/schemas/SegmentedRevenueItem",
			},
			type: "array",
			description: "An array of segmented revenue items.",
		},
	},
	required: ["ticker", "report_period", "period", "items"],
	type: "object",
	additionalProperties: false,
} as const;

export const SegmentedRevenuesAPIResponseSchema = {
	description:
		"Represents the response of the `getSegmentedRevenues` endpoint.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			items: {
				$ref: "#/components/schemas/SegmentedRevenue",
			},
			type: "array",
			description: "The segmented revenue data",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const AllFinancialsSchema = {
	description: "Represents a collection of financial statements.",
	properties: {
		income_statements: {
			items: {
				$ref: "#/components/schemas/IncomeStatement",
			},
			type: "array",
			description: "An array of income statements.",
		},
		balance_sheets: {
			items: {
				$ref: "#/components/schemas/BalanceSheet",
			},
			type: "array",
			description: "An array of balance sheets.",
		},
		cash_flow_statements: {
			items: {
				$ref: "#/components/schemas/CashFlowStatement",
			},
			type: "array",
			description: "An array of cash flow statements.",
		},
	},
	required: ["income_statements", "balance_sheets", "cash_flow_statements"],
	type: "object",
	additionalProperties: false,
} as const;

export const AllFinancialsAPIResponseSchema = {
	description: "Represents the response of the `getAllFinancials` endpoint.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/AllFinancials",
			description: "The all financials data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const AvailableTickersAPIResponseSchema = {
	description: "Represents the response of the `getAvailableTickers` endpoint.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The available tickers.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const InsiderTransactionSchema = {
	description: "Represents an insider transaction for a financial dataset.",
	properties: {
		ticker: {
			type: "string",
			description: "The ticker symbol of the company.",
		},
		issuer: {
			type: "string",
			description: "The issuer of the security.",
		},
		name: {
			type: "string",
			description: "The name of the insider.",
		},
		title: {
			type: "string",
			description: "The title of the insider.",
		},
		is_board_director: {
			type: "boolean",
			description: "Indicates if the insider is a board director.",
		},
		transaction_date: {
			type: "string",
			description: "The date of the transaction.",
		},
		transaction_shares: {
			type: "number",
			format: "double",
			description: "The number of shares involved in the transaction.",
		},
		transaction_price_per_share: {
			type: "number",
			format: "double",
			description: "The price per share at which the transaction occurred.",
		},
		transaction_value: {
			type: "number",
			format: "double",
			description: "The total value of the transaction.",
		},
		shares_owned_before_transaction: {
			type: "number",
			format: "double",
			description: "The number of shares owned before the transaction.",
		},
		shares_owned_after_transaction: {
			type: "number",
			format: "double",
			description: "The number of shares owned after the transaction.",
		},
		security_title: {
			type: "string",
			description: "The title of the security involved in the transaction.",
		},
		filing_date: {
			type: "string",
			description: "The date the transaction was filed.",
		},
	},
	required: [
		"ticker",
		"issuer",
		"name",
		"title",
		"is_board_director",
		"transaction_date",
		"transaction_shares",
		"transaction_price_per_share",
		"transaction_value",
		"shares_owned_before_transaction",
		"shares_owned_after_transaction",
		"security_title",
		"filing_date",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const InsiderTransactionsAPIResponseSchema = {
	description:
		"Represents the response of the `getInsiderTransactions` endpoint.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			items: {
				$ref: "#/components/schemas/InsiderTransaction",
			},
			type: "array",
			description: "The insider transaction data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const OptionsChainItemSchema = {
	description: "Represents an item in an options chain.",
	properties: {
		ticker: {
			type: "string",
			description: "The ticker symbol of the underlying asset.",
		},
		type: {
			type: "string",
			enum: ["Call", "Put"],
			description: 'The type of option, either "Call" or "Put".',
		},
		strike_price: {
			type: "number",
			format: "double",
			description: "The strike price of the option.",
		},
		expiration_date: {
			type: "string",
			description: "The expiration date of the option in ISO 8601 format.",
		},
		shares_per_contract: {
			type: "number",
			format: "double",
			description: "The number of shares per contract.",
		},
		volume: {
			type: "number",
			format: "double",
			description: "The trading volume of the option.",
		},
		open_interest: {
			type: "number",
			format: "double",
			description: "The open interest of the option.",
		},
		bid_price: {
			type: "number",
			format: "double",
			description: "The bid price of the option.",
		},
		bid_size: {
			type: "number",
			format: "double",
			description: "The bid size of the option.",
		},
		ask_price: {
			type: "number",
			format: "double",
			description: "The ask price of the option.",
		},
		ask_size: {
			type: "number",
			format: "double",
			description: "The ask size of the option.",
		},
		last_trade_price: {
			type: "number",
			format: "double",
			description: "The last traded price of the option.",
		},
		last_trade_size: {
			type: "number",
			format: "double",
			description: "The size of the last trade.",
		},
		last_trade_time: {
			type: "string",
			description: "The time of the last trade in ISO 8601 format.",
		},
		last_trade_time_nanoseconds: {
			type: "number",
			format: "double",
			description: "The nanoseconds part of the last trade time.",
		},
	},
	required: [
		"ticker",
		"type",
		"strike_price",
		"expiration_date",
		"shares_per_contract",
		"volume",
		"open_interest",
		"bid_price",
		"bid_size",
		"ask_price",
		"ask_size",
		"last_trade_price",
		"last_trade_size",
		"last_trade_time",
		"last_trade_time_nanoseconds",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const OptionsChainAPIResponseSchema = {
	description: "Represents the response of the `getOptionsChain` endpoint.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			items: {
				$ref: "#/components/schemas/OptionsChainItem",
			},
			type: "array",
			description: "The options chain data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const PriceDataSchema = {
	description: "Represents the price data for a financial instrument.",
	properties: {
		open: {
			type: "number",
			format: "double",
			description: "The opening price of the instrument.",
		},
		close: {
			type: "number",
			format: "double",
			description: "The closing price of the instrument.",
		},
		high: {
			type: "number",
			format: "double",
			description:
				"The highest price of the instrument during the time period.",
		},
		low: {
			type: "number",
			format: "double",
			description: "The lowest price of the instrument during the time period.",
		},
		volume: {
			type: "number",
			format: "double",
			description: "The trading volume of the instrument.",
		},
		time: {
			type: "string",
			description: "The time of the data point in ISO 8601 format.",
		},
		time_milliseconds: {
			type: "number",
			format: "double",
			description:
				"The time of the data point in milliseconds since the Unix epoch.",
		},
	},
	required: [
		"open",
		"close",
		"high",
		"low",
		"volume",
		"time",
		"time_milliseconds",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const PricesAPIResponseSchema = {
	description: "Represents the response of the `getPrices` endpoint.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			items: {
				$ref: "#/components/schemas/PriceData",
			},
			type: "array",
			description: "The price data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const PriceIntervalSchema = {
	type: "string",
	enum: ["second", "minute", "day", "week", "month", "quarter", "year"],
	description: "Represents the price interval for historical price data.",
} as const;

export const SearchResultSchema = {
	description: "Represents a financial dataset search result.",
	properties: {
		ticker: {
			type: "string",
			description: "The stock ticker symbol of the company.",
		},
		report_period: {
			type: "string",
			description: "The reporting period of the financial data.",
		},
		period: {
			type: "string",
			description: "The currency in which the financial data is denominated.",
		},
		currency: {
			type: "string",
			description: "The currency in which the financial data is denominated.",
		},
	},
	required: ["ticker", "report_period", "period", "currency"],
	type: "object",
	additionalProperties: {},
} as const;

export const SearchFinancialsAPIResponseSchema = {
	description: "Represents the response of the `searchFinancials` endpoint.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			items: {
				$ref: "#/components/schemas/SearchResult",
			},
			type: "array",
			description: "The search results.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const SearchFilterSchema = {
	description: "Represents a filter to be applied in a search query.",
	properties: {
		field: {
			type: "string",
			description: "The name of the field to filter on.",
		},
		operator: {
			type: "string",
			enum: ["eq", "gt", "gte", "lt", "lte"],
			description: "The operator to use for comparison.",
		},
		value: {
			type: "number",
			format: "double",
			description: "The value to compare the field against.",
		},
	},
	required: ["field", "operator", "value"],
	type: "object",
	additionalProperties: false,
} as const;

export const SearchRequestSchema = {
	description: "Represents a request to search for financial datasets.",
	properties: {
		period: {
			type: "string",
			enum: ["annual", "quarterly", "ttm"],
			description: "The reporting period for the financial data.",
		},
		limit: {
			type: "number",
			format: "double",
			description: "The maximum number of results to return.",
		},
		order_by: {
			type: "string",
			enum: ["ticker", "-ticker", "report_period", "-report_period"],
			description: "The field by which to order the results.",
		},
		currency: {
			type: "string",
			enum: ["USD", "EUR", "GBP", "JPY", "CHF", "AUD", "CAD", "SEK"],
			description: "The currency in which the financial data is denominated.",
		},
		filters: {
			items: {
				$ref: "#/components/schemas/SearchFilter",
			},
			type: "array",
			description: "An array of filters to apply to the search.",
		},
	},
	required: ["filters"],
	type: "object",
	additionalProperties: false,
} as const;

export const PriceSnapshotSchema = {
	description:
		"Represents a snapshot of a financial instrument's price at a specific point in time.",
	properties: {
		price: {
			type: "number",
			format: "double",
			description: "The stock ticker symbol of the company.",
		},
		ticker: {
			type: "string",
			description: "The percentage change in price for the day.",
		},
		day_change: {
			type: "number",
			format: "double",
			description: "The absolute change in price for the day.",
		},
		day_change_percent: {
			type: "number",
			format: "double",
			description: "The percentage change in price for the day.",
		},
		time: {
			type: "string",
			description: "The opening price of the instrument.",
		},
		time_nanoseconds: {
			type: "number",
			format: "double",
			description:
				"The time of the snapshot in milliseconds since the Unix epoch.",
		},
	},
	required: [
		"price",
		"ticker",
		"day_change",
		"day_change_percent",
		"time",
		"time_nanoseconds",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const PriceSnapshotAPIResponseSchema = {
	description: "Represents the response of the `getPriceSnapshot` endpoint.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/PriceSnapshot",
			description: "The price snapshot data.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LineItemsSearchResultSchema = {
	description:
		"Represents the result of a search for line items in financial datasets.",
	properties: {
		ticker: {
			type: "string",
			description: "The stock ticker symbol.",
		},
		report_period: {
			type: "string",
			description: "The reporting period of the financial data.",
		},
		period: {
			type: "string",
			description: "The period for which the financial data is reported.",
		},
		currency: {
			type: "string",
			description: "The currency in which the financial data is denominated.",
		},
	},
	required: ["ticker", "report_period", "period", "currency"],
	type: "object",
	additionalProperties: {},
} as const;

export const LineItemsSearchAPIResponseSchema = {
	description: "Represents the response of the `searchFinancials` endpoint.",
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			items: {
				$ref: "#/components/schemas/LineItemsSearchResult",
			},
			type: "array",
			description: "The search results.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const Record_string_string_Schema = {
	properties: {},
	type: "object",
	description: "Construct a type with a set of properties K of type T",
} as const;

export const JupiterAPIResponse_Record_string_string__Schema = {
	description: "Represents the structure of a response from the Jupiter API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			$ref: "#/components/schemas/Record_string.string_",
			description:
				"Optional data returned by the API. The type of this property is determined by the generic type parameter `T`.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const JupiterAPIResponse_any_Schema = {
	description: "Represents the structure of a response from the Jupiter API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			description:
				"Optional data returned by the API. The type of this property is determined by the generic type parameter `T`.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const JupiterAPIResponse_string_Array_Schema = {
	description: "Represents the structure of a response from the Jupiter API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			items: {
				type: "string",
			},
			type: "array",
			description:
				"Optional data returned by the API. The type of this property is determined by the generic type parameter `T`.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const JupiterExecuteFunctionResultSchema = {
	description:
		"Represents the result of executing a function in the Jupiter system.",
	properties: {
		transaction: {
			description: "The transaction object associated with the execution.",
		},
		function: {
			type: "string",
			description: "The name of the function that was executed.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters passed to the function.",
		},
		data: {
			description: "Additional data returned by the function execution.",
		},
		success: {
			type: "boolean",
			description: "Indicates whether the function execution was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the execution result.",
		},
		jupiter: {
			description: "The Jupiter-specific data related to the execution.",
		},
		transactionHash: {
			type: "string",
			description: "The hash of the transaction associated with the",
		},
	},
	required: ["function", "params"],
	type: "object",
	additionalProperties: false,
} as const;

export const JupiterAPIResponse_JupiterExecuteFunctionResult_Schema = {
	description: "Represents the structure of a response from the Jupiter API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			$ref: "#/components/schemas/JupiterExecuteFunctionResult",
			description:
				"Optional data returned by the API. The type of this property is determined by the generic type parameter `T`.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const Pick_JupiterInputBody_Exclude_keyofJupiterInputBody_accountName__Schema =
	{
		properties: {
			inputMint: {
				type: "string",
				description: "The mint address of the input token.",
			},
			outputMint: {
				type: "string",
				description: "The mint address of the output token.",
			},
			amount: {
				type: "number",
				format: "double",
				description: "The amount of input tokens to be exchanged.",
			},
			slippage: {
				type: "number",
				format: "double",
				description: `The maximum allowable slippage for the transaction, expressed as a percentage.
Optional.`,
			},
			feeBps: {
				type: "number",
				format: "double",
				description: `The fee in basis points (bps) to be applied to the transaction.
Optional.`,
			},
			dryrun: {
				type: "boolean",
				description: `If true, the transaction will be simulated but not executed.
Optional.`,
			},
			broadcast: {
				type: "boolean",
				description: `If true, the transaction will be broadcast to the network.
Optional.`,
			},
		},
		required: ["inputMint", "outputMint", "amount"],
		type: "object",
		description:
			"From T, pick a set of properties whose keys are in the union K",
	} as const;

export const Omit_JupiterInputBody_accountName_Schema = {
	$ref: "#/components/schemas/Pick_JupiterInputBody.Exclude_keyofJupiterInputBody.accountName__",
	description:
		"Construct a type with the properties of T except for those in type K.",
} as const;

export const LendingPoolAPIResponse_number_Schema = {
	description:
		"Represents the structure of the API response for the Lending Pool.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description: "Provides a message related to the API response.",
		},
		data: {
			type: "number",
			format: "double",
			description: "Contains the data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LendingPoolTransactionSchema = {
	description: "Represents a transaction in the lending pool.",
	properties: {
		data: {
			type: "string",
			description: "The data payload of the transaction.",
		},
		value: {
			type: "string",
			description: "The value being transferred in the transaction.",
		},
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		from: {
			type: "string",
			description: "The sender address of the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction (optional).",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction (optional).",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description:
				"The maximum priority fee per gas for the transaction (optional).",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas for the transaction (optional).",
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce of the transaction.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of the transaction (optional).",
		},
		chainId: {
			type: "string",
			description: "The chain ID of the blockchain network.",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const LendingPoolExecuteFunctionResultSchema = {
	properties: {
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description: "Optional response from broadcasting the raw transaction.",
		},
		message: {
			type: "string",
			description:
				"Optional message providing additional information about the execution result.",
		},
		success: {
			type: "boolean",
			description:
				"Optional flag indicating if the function execution was successful.",
		},
		user_op: {
			type: "string",
			description: "Optional user operation identifier.",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "Optional transaction data.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters passed to the executed function.",
		},
		function: {
			type: "string",
			description: "The name of the executed function.",
		},
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description: "Optional response from simulating asset changes.",
		},
		transaction: {
			$ref: "#/components/schemas/LendingPoolTransaction",
			description: "The transaction details of the executed function.",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
	description:
		"Represents the result of executing a function on the lending pool.",
} as const;

export const LendingPoolAPIResponse_LendingPoolExecuteFunctionResult_Schema = {
	description:
		"Represents the structure of the API response for the Lending Pool.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description: "Provides a message related to the API response.",
		},
		data: {
			$ref: "#/components/schemas/LendingPoolExecuteFunctionResult",
			description: "Contains the data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LendingPoolInputBodySchema = {
	description: `Interface representing the input body for LendingPool operations.
Extends the InputBody interface.`,
	properties: {
		to: {
			type: "string",
			description: "The address to which the operation is directed.",
		},
		data: {
			type: "string",
			description: "Additional data for the operation.",
		},
		value: {
			type: "string",
			description: "The value involved in the operation.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce for the transaction",
		},
		simulate: {
			type: "boolean",
			description: "Flag indicating if the operation should be simulated.",
		},
		gas: {
			type: "string",
			description: "The gas for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Flag indicating if the operation is a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Flag indicating if the operation is performed by an Externally Owned Account.",
		},
		contract_address: {
			type: "string",
			description: "The contract address involved in the operation.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Flag indicating if the transaction should be broadcasted.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "Flag indicating if the nonce should always be incremented.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the operation.",
		},
		amount: {
			type: "string",
			description: "The amount involved in the operation.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the operation is performed.",
		},
		receiverAddress: {
			type: "string",
			description: "The address of the receiver.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "Array of assets involved in the operation.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "Array of amounts involved in the operation.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "Array of modes involved in the operation.",
		},
		params: {
			type: "string",
			description: "Additional parameters for the operation.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode for the operation.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Flag indicating if the asset should be used as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the operation.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Flag indicating if AToken should be received.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const LendingPoolAPIResponse_any_Schema = {
	description:
		"Represents the structure of the API response for the Lending Pool.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description: "Provides a message related to the API response.",
		},
		data: {
			description: "Contains the data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LendingPoolAPIResponse_string_Array_Schema = {
	description:
		"Represents the structure of the API response for the Lending Pool.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description: "Provides a message related to the API response.",
		},
		data: {
			items: {
				type: "string",
			},
			type: "array",
			description: "Contains the data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LendingPoolAPIResponse_string_Schema = {
	description:
		"Represents the structure of the API response for the Lending Pool.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description: "Provides a message related to the API response.",
		},
		data: {
			type: "string",
			description: "Contains the data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LendingPoolAPIResponse_boolean_Schema = {
	description:
		"Represents the structure of the API response for the Lending Pool.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description: "Provides a message related to the API response.",
		},
		data: {
			type: "boolean",
			description: "Contains the data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LeveragerAPIResponse_string_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "string",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LeveragerAPIResponse_boolean_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "boolean",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LeveragerTransactionSchema = {
	description: "Represents a transaction for the Leverager.",
	properties: {
		data: {
			type: "string",
			description: "The data payload of the transaction.",
		},
		value: {
			type: "string",
			description: "The value to be transferred in the transaction.",
		},
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		from: {
			type: "string",
			description: "The sender address of the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction (optional).",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction (optional).",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description:
				"The maximum priority fee per gas for the transaction (optional).",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas for the transaction (optional).",
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce of the transaction.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of the transaction (optional).",
		},
		chainId: {
			type: "string",
			description: "The chain ID of the blockchain network.",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const LeveragerExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description: "Optional response from simulating asset changes",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description: "Optional response from broadcasting the raw transaction",
		},
		message: {
			type: "string",
			description:
				"Optional message providing additional information about the execution",
		},
		success: {
			type: "boolean",
			description: "Optional flag indicating if the execution was successful",
		},
		user_op: {
			type: "string",
			description: "Optional user operation identifier",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "Optional transaction data",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters passed to the function",
		},
		function: {
			type: "string",
			description: "The name of the function that was executed",
		},
		transaction: {
			$ref: "#/components/schemas/LeveragerTransaction",
			description: "The transaction associated with the",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
} as const;

export const LeveragerAPIResponse_LeveragerExecuteFunctionResult_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/LeveragerExecuteFunctionResult",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LeveragerInputBodySchema = {
	description: "Represents the input body for the Leverager.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		data: {
			type: "string",
			description: "Additional data for the transaction.",
		},
		value: {
			type: "string",
			description: "The value of the transaction.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce for the transaction.",
		},
		simulate: {
			type: "boolean",
			description: "Indicates if the transaction should be simulated.",
		},
		gas: {
			type: "string",
			description: "The gas amount for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Indicates if the transaction is a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Indicates if the transaction is from an externally owned account.",
		},
		contract_address: {
			type: "string",
			description: "The contract address involved in the transaction.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Indicates if the transaction should be broadcasted.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: `Indicates if the nonce should always be incremented
for the transaction.`,
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount involved in the transaction.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "An array of assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters for the transaction.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			type: "string",
			description: "The minimum health factor required.",
		},
		premiums: {
			items: {
				type: "string",
			},
			type: "array",
			description: "An array of premiums for the transaction.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: `The role of the user in the
transaction.`,
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			type: "string",
			description: "The initial deposit amount.",
		},
		borrowAmount: {
			type: "string",
			description: "The amount to be borrowed.",
		},
		amouts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "An array of amounts corresponding to the assets.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const TokenDetailsSchema = {
	properties: {
		address: {
			type: "string",
		},
		chainId: {
			type: "number",
			format: "double",
		},
		symbol: {
			type: "string",
		},
		decimals: {
			type: "number",
			format: "double",
		},
		name: {
			type: "string",
		},
		coinKey: {
			type: "string",
		},
		logoURI: {
			type: "string",
		},
		priceUSD: {
			type: "string",
		},
	},
	required: [
		"address",
		"chainId",
		"symbol",
		"decimals",
		"name",
		"coinKey",
		"logoURI",
		"priceUSD",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const ActionSchema = {
	properties: {
		fromChainId: {
			type: "number",
			format: "double",
		},
		fromAmount: {
			type: "string",
		},
		fromToken: {
			$ref: "#/components/schemas/TokenDetails",
		},
		fromAddress: {
			type: "string",
		},
		toChainId: {
			type: "number",
			format: "double",
		},
		toToken: {
			$ref: "#/components/schemas/TokenDetails",
		},
		toAddress: {
			type: "string",
		},
		slippage: {
			type: "number",
			format: "double",
		},
	},
	required: [
		"fromChainId",
		"fromAmount",
		"fromToken",
		"fromAddress",
		"toChainId",
		"toToken",
		"toAddress",
		"slippage",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const TokenInfoSchema = {
	properties: {
		address: {
			type: "string",
		},
		symbol: {
			type: "string",
		},
		name: {
			type: "string",
		},
		decimals: {
			type: "number",
			format: "double",
		},
		logoURI: {
			type: "string",
		},
	},
	required: ["address", "symbol", "name", "decimals"],
	type: "object",
	additionalProperties: false,
} as const;

export const GasCostSchema = {
	properties: {
		type: {
			type: "string",
		},
		price: {
			type: "string",
		},
		estimate: {
			type: "string",
		},
		limit: {
			type: "string",
		},
		amount: {
			type: "string",
		},
		amountUSD: {
			type: "string",
		},
		token: {
			$ref: "#/components/schemas/TokenInfo",
		},
	},
	required: [
		"type",
		"price",
		"estimate",
		"limit",
		"amount",
		"amountUSD",
		"token",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const TokenSchema = {
	properties: {
		name: {
			type: "string",
		},
		address: {
			type: "string",
		},
		symbol: {
			type: "string",
		},
		decimals: {
			type: "number",
			format: "double",
		},
		logoURI: {
			type: "string",
		},
		chainId: {
			type: "number",
			format: "double",
		},
	},
	required: ["name", "address", "symbol", "decimals", "logoURI", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const FeeCostSchema = {
	properties: {
		name: {
			type: "string",
		},
		percentage: {
			type: "number",
			format: "double",
		},
		token: {
			$ref: "#/components/schemas/Token",
		},
		amount: {
			type: "number",
			format: "double",
		},
	},
	required: ["name", "percentage", "token", "amount"],
	type: "object",
	additionalProperties: false,
} as const;

export const EstimateSchema = {
	properties: {
		fromAmount: {
			type: "string",
		},
		toAmount: {
			type: "string",
		},
		toAmountMin: {
			type: "string",
		},
		approvalAddress: {
			type: "string",
		},
		gasCosts: {
			items: {
				$ref: "#/components/schemas/GasCost",
			},
			type: "array",
		},
		executionDuration: {
			type: "number",
			format: "double",
		},
		feeCosts: {
			items: {
				$ref: "#/components/schemas/FeeCost",
			},
			type: "array",
		},
		fromAmountUSD: {
			type: "string",
		},
		toAmountUSD: {
			type: "string",
		},
	},
	required: [
		"fromAmount",
		"toAmount",
		"toAmountMin",
		"approvalAddress",
		"gasCosts",
		"executionDuration",
		"fromAmountUSD",
		"toAmountUSD",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const StepSchema = {
	properties: {
		id: {
			type: "string",
		},
		type: {
			type: "string",
		},
		tool: {
			type: "string",
		},
		action: {
			$ref: "#/components/schemas/Action",
		},
		estimate: {
			$ref: "#/components/schemas/Estimate",
		},
	},
	required: ["id", "type", "tool", "action", "estimate"],
	type: "object",
	additionalProperties: false,
} as const;

export const QuoteSchema = {
	properties: {
		id: {
			type: "string",
		},
		type: {
			type: "string",
		},
		tool: {
			type: "string",
		},
		action: {
			$ref: "#/components/schemas/Action",
		},
		estimate: {
			$ref: "#/components/schemas/Estimate",
		},
		includedSteps: {
			items: {
				$ref: "#/components/schemas/Step",
			},
			type: "array",
		},
		transactionRequest: {
			$ref: "#/components/schemas/TransactionRequest",
		},
	},
	required: [
		"id",
		"type",
		"tool",
		"action",
		"estimate",
		"includedSteps",
		"transactionRequest",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const ApiResponse_Quote_Schema = {
	description: "Represents a standard API response.",
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/Quote",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const PostQuoteSchema = {
	description: "Interface representing the structure of a post quote.",
	properties: {
		quote: {
			$ref: "#/components/schemas/Quote",
			description: "The quote object.",
		},
		input: {
			$ref: "#/components/schemas/InputBody",
			description: "The input body.",
		},
		signed: {
			description: "The signed transaction.",
		},
		broadcast: {
			description: "The broadcasted transaction.",
		},
	},
	required: ["quote", "input", "signed", "broadcast"],
	type: "object",
	additionalProperties: false,
} as const;

export const ApiResponse_PostQuote_Schema = {
	description: "Represents a standard API response.",
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/PostQuote",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const TransactionStatusSchema = {
	properties: {
		chainId: {
			type: "number",
			format: "double",
		},
		txHash: {
			type: "string",
		},
		txLink: {
			type: "string",
		},
		amount: {
			type: "string",
		},
		token: {
			$ref: "#/components/schemas/TokenInfo",
		},
		gasPrice: {
			type: "string",
		},
		gasUsed: {
			type: "string",
		},
	},
	required: [
		"chainId",
		"txHash",
		"txLink",
		"amount",
		"token",
		"gasPrice",
		"gasUsed",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const StatusResponseSchema = {
	properties: {
		sending: {
			$ref: "#/components/schemas/TransactionStatus",
		},
		receiving: {
			$ref: "#/components/schemas/TransactionStatus",
		},
		tool: {
			type: "string",
		},
		status: {
			type: "string",
		},
		substatus: {
			type: "string",
		},
	},
	required: ["sending", "receiving", "tool", "status", "substatus"],
	type: "object",
	additionalProperties: false,
} as const;

export const ApiResponse_StatusResponse_Schema = {
	description: "Represents a standard API response.",
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/StatusResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ChainSchema = {
	properties: {
		key: {
			type: "string",
		},
		chainType: {
			type: "string",
			enum: ["EVM", "SOL"],
		},
		name: {
			type: "string",
		},
		coin: {
			type: "string",
		},
		id: {
			type: "number",
			format: "double",
		},
		mainnet: {
			type: "boolean",
		},
		logoURI: {
			type: "string",
		},
		tokenlistUrl: {
			type: "string",
		},
		multicallAddress: {
			type: "string",
		},
		metamask: {
			properties: {
				rpcUrls: {
					items: {
						type: "string",
					},
					type: "array",
				},
				nativeCurrency: {
					properties: {
						decimals: {
							type: "number",
							format: "double",
						},
						symbol: {
							type: "string",
						},
						name: {
							type: "string",
						},
					},
					required: ["decimals", "symbol", "name"],
					type: "object",
				},
				chainName: {
					type: "string",
				},
				blockExplorerUrls: {
					items: {
						type: "string",
					},
					type: "array",
				},
				chainId: {
					type: "string",
				},
			},
			required: [
				"rpcUrls",
				"nativeCurrency",
				"chainName",
				"blockExplorerUrls",
				"chainId",
			],
			type: "object",
		},
		nativeToken: {
			properties: {
				priceUSD: {
					type: "string",
				},
				logoURI: {
					type: "string",
				},
				coinKey: {
					type: "string",
				},
				name: {
					type: "string",
				},
				decimals: {
					type: "number",
					format: "double",
				},
				symbol: {
					type: "string",
				},
				chainId: {
					type: "number",
					format: "double",
				},
				address: {
					type: "string",
				},
			},
			required: [
				"priceUSD",
				"logoURI",
				"coinKey",
				"name",
				"decimals",
				"symbol",
				"chainId",
				"address",
			],
			type: "object",
		},
	},
	required: [
		"key",
		"chainType",
		"name",
		"coin",
		"id",
		"mainnet",
		"logoURI",
		"tokenlistUrl",
		"multicallAddress",
		"metamask",
		"nativeToken",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const ChainsResponseSchema = {
	properties: {
		chains: {
			items: {
				$ref: "#/components/schemas/Chain",
			},
			type: "array",
		},
	},
	required: ["chains"],
	type: "object",
	additionalProperties: false,
} as const;

export const ApiResponse_ChainsResponse_Schema = {
	description: "Represents a standard API response.",
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/ChainsResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const BridgeSupportedChainSchema = {
	properties: {
		fromChainId: {
			type: "number",
			format: "double",
		},
		toChainId: {
			type: "number",
			format: "double",
		},
	},
	required: ["fromChainId", "toChainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const BridgeSchema = {
	properties: {
		key: {
			type: "string",
		},
		name: {
			type: "string",
		},
		logoURI: {
			type: "string",
		},
		supportedChains: {
			items: {
				$ref: "#/components/schemas/BridgeSupportedChain",
			},
			type: "array",
		},
	},
	required: ["key", "name", "logoURI", "supportedChains"],
	type: "object",
	additionalProperties: false,
} as const;

export const ExchangeSchema = {
	properties: {
		key: {
			type: "string",
		},
		name: {
			type: "string",
		},
		logoURI: {
			type: "string",
		},
		supportedChains: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
		},
	},
	required: ["key", "name", "logoURI", "supportedChains"],
	type: "object",
	additionalProperties: false,
} as const;

export const ToolsResponseSchema = {
	properties: {
		bridges: {
			items: {
				$ref: "#/components/schemas/Bridge",
			},
			type: "array",
		},
		exchanges: {
			items: {
				$ref: "#/components/schemas/Exchange",
			},
			type: "array",
		},
	},
	required: ["bridges", "exchanges"],
	type: "object",
	additionalProperties: false,
} as const;

export const ApiResponse_ToolsResponse_Schema = {
	description: "Represents a standard API response.",
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/ToolsResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const TokensResponseSchema = {
	properties: {
		tokens: {
			properties: {},
			additionalProperties: {
				items: {
					$ref: "#/components/schemas/Token",
				},
				type: "array",
			},
			type: "object",
		},
	},
	required: ["tokens"],
	type: "object",
	additionalProperties: false,
} as const;

export const ApiResponse_TokensResponse_Schema = {
	description: "Represents a standard API response.",
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/TokensResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ApiResponse_TokenDetails_Schema = {
	description: "Represents a standard API response.",
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/TokenDetails",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ConnectionSchema = {
	properties: {
		fromChainId: {
			type: "number",
			format: "double",
		},
		toChainId: {
			type: "number",
			format: "double",
		},
		fromTokens: {
			items: {
				$ref: "#/components/schemas/Token",
			},
			type: "array",
		},
		toTokens: {
			items: {
				$ref: "#/components/schemas/Token",
			},
			type: "array",
		},
	},
	required: ["fromChainId", "toChainId", "fromTokens", "toTokens"],
	type: "object",
	additionalProperties: false,
} as const;

export const ConnectionsResponseSchema = {
	properties: {
		connections: {
			items: {
				$ref: "#/components/schemas/Connection",
			},
			type: "array",
		},
	},
	required: ["connections"],
	type: "object",
	additionalProperties: false,
} as const;

export const ApiResponse_ConnectionsResponse_Schema = {
	description: "Represents a standard API response.",
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/ConnectionsResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const TokenInfoByChainIdSchema = {
	description: "Interface representing token information by chain ID.",
	properties: {},
	type: "object",
	additionalProperties: {
		items: {
			$ref: "#/components/schemas/TokenInfo",
		},
		type: "array",
	},
} as const;

export const ApiResponse_TokenInfoByChainId_Schema = {
	description: "Represents a standard API response.",
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/TokenInfoByChainId",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LitecoinInputSchema = {
	description: "Represents the input data required for a Litecoin transaction.",
	properties: {
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		private_key: {
			type: "string",
			description: "The private key of the account.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const LitecoinTransactionOutputSchema = {
	description: "Represents the output of a Litecoin transaction.",
	properties: {
		signedTx: {
			type: "string",
			description: "The signed transaction.",
		},
		transaction_hash: {
			type: "string",
			description: "The transaction hash.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const LitecoinAPIResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/LitecoinTransactionOutput",
			description: "The data associated with the Litecoin response.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LitecoinTransactionInputSchema = {
	description: "Represents an input for a Litecoin transaction.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		value: {
			type: "number",
			format: "double",
			description: "The amount to be sent.",
		},
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		compress: {
			type: "boolean",
			description: "Indicates whether to compress the public key.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const LynexAPIResponseSchema = {
	description: "Represents the response structure from the Lynex API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			description: "Optional data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexNFTAPIResponse_string_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "string",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexNFTAPIResponse_any_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexNFTTransactionSchema = {
	description: "Represents a transaction for a Lynex NFT.",
	properties: {
		data: {
			type: "string",
			description: "The data payload of the transaction.",
		},
		value: {
			type: "string",
			description: "The value to be transferred in the transaction.",
		},
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		from: {
			type: "string",
			description: "The sender address of the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction (optional).",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction (optional).",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description:
				"The maximum priority fee per gas for the transaction (optional).",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas for the transaction (optional).",
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce of the transaction.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of the transaction (optional).",
		},
		chainId: {
			type: "string",
			description: "The chain ID of the blockchain network.",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexNFTExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description: "Optional response from simulating asset changes.",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description: "Optional response from broadcasting the raw transaction.",
		},
		message: {
			type: "string",
			description:
				"Optional message providing additional information about the execution.",
		},
		success: {
			type: "boolean",
			description:
				"Optional flag indicating whether the execution was successful.",
		},
		user_op: {
			type: "string",
			description: "Optional user operation identifier.",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "Optional additional transaction data.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters passed to the executed function.",
		},
		function: {
			type: "string",
			description: "The name of the executed function.",
		},
		transaction: {
			$ref: "#/components/schemas/LynexNFTTransaction",
			description: "The transaction details of the executed function.",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
} as const;

export const LynexNFTAPIResponse_LynexNFTExecuteFunctionResult_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/LynexNFTExecuteFunctionResult",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexNFTInputBodySchema = {
	properties: {
		to: {
			type: "string",
			description: "The recipient address",
		},
		data: {
			type: "string",
			description: "The data to be sent with the transaction",
		},
		value: {
			type: "string",
			description: "The value to be sent with the transaction",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction",
		},
		nonce: {
			type: "string",
			description: "The nonce for the transaction",
		},
		simulate: {
			type: "boolean",
			description: "Indicates if the transaction should be simulated",
		},
		gas: {
			type: "string",
			description: "The gas limit for the transaction",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Indicates if the transaction should be a dry run",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Indicates if the transaction is from an externally owned account",
		},
		contract_address: {
			type: "string",
			description: "The contract address",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Indicates if the operator is approved",
		},
		broadcast: {
			type: "boolean",
			description: "Indicates if the transaction should be broadcasted",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "Indicates if the nonce should always be incremented",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount to be transferred or locked",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
		tokenId: {
			type: "string",
			description: "The token ID",
		},
		lockDuration: {
			type: "string",
			description: "The lock duration",
		},
		permanent: {
			type: "boolean",
			description: "Indicates if the lock is permanent",
		},
		delegatee: {
			type: "string",
			description: "The delegatee address",
		},
		splitWeights: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The split weights",
		},
		operator: {
			type: "string",
			description: "The operator address",
		},
		expiry: {
			type: "string",
			description: "The expiry time",
		},
		v: {
			type: "string",
			description: "The v parameter for the signature",
		},
		r: {
			type: "string",
			description: "The r parameter for the signature",
		},
		s: {
			type: "string",
			description: "The s parameter for the signature",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const LynexNFTAPIResponse_boolean_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "boolean",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const VestingPeriodDataSchema = {
	properties: {
		start: {
			type: "string",
		},
		end: {
			type: "string",
		},
	},
	required: ["start", "end"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexNFTAPIResponse_VestingPeriodData_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/VestingPeriodData",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexRouterAPIResponse_string_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "string",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexRouterAPIResponse__amountOut_string__stable_boolean__Schema =
	{
		properties: {
			success: {
				type: "boolean",
			},
			message: {
				type: "string",
			},
			data: {
				properties: {
					stable: {
						type: "boolean",
					},
					amountOut: {
						type: "string",
					},
				},
				required: ["stable", "amountOut"],
				type: "object",
			},
		},
		required: ["success", "message"],
		type: "object",
		additionalProperties: false,
	} as const;

export const LynexRouterAPIResponse_string_Array_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			items: {
				type: "string",
			},
			type: "array",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexRouterTransactionSchema = {
	description: "Represents a transaction in the Lynex Router.",
	properties: {
		data: {
			type: "string",
			description: "The data payload of the transaction.",
		},
		value: {
			type: "string",
			description: "The value to be transferred in the transaction.",
		},
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		from: {
			type: "string",
			description: "The sender address of the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction (optional).",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction (optional).",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description:
				"The maximum priority fee per gas unit for the transaction (optional).",
		},
		maxFeePerGas: {
			type: "string",
			description:
				"The maximum fee per gas unit for the transaction (optional).",
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce of the transaction.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of the transaction (optional).",
		},
		chainId: {
			type: "string",
			description: "The chain ID of the blockchain network.",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexRouterExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description: "Optional response from simulating asset changes.",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description: "Optional response from broadcasting the raw transaction.",
		},
		message: {
			type: "string",
			description:
				"Optional message providing additional information about the execution.",
		},
		success: {
			type: "boolean",
			description:
				"Optional flag indicating whether the execution was successful.",
		},
		user_op: {
			type: "string",
			description: "Optional user operation identifier.",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "Optional additional transaction data.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters passed to the executed function.",
		},
		function: {
			type: "string",
			description: "The name of the executed function.",
		},
		transaction: {
			$ref: "#/components/schemas/LynexRouterTransaction",
			description: "The transaction details.",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
} as const;

export const LynexRouterAPIResponse_LynexRouterExecuteFunctionResult_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/LynexRouterExecuteFunctionResult",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexRouterInputBodySchema = {
	description: "Represents the input body for Lynex Router functions.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		data: {
			type: "string",
			description: "The data to be included in the transaction.",
		},
		value: {
			type: "string",
			description: "The value to be transferred.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce for the transaction.",
		},
		simulate: {
			type: "boolean",
			description: "Indicates if the transaction should be simulated.",
		},
		gas: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Indicates if the transaction is a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Indicates if the transaction is from an externally owned account.",
		},
		contract_address: {
			type: "string",
			description: "The contract address.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Indicates if the transaction should be broadcasted.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "Indicates if the nonce should always be incremented.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount to be transferred.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
		tokenA: {
			type: "string",
			description: "The address of token A.",
		},
		tokenB: {
			type: "string",
			description: "The address of token B.",
		},
		stable: {
			type: "string",
			description: "Indicates if the liquidity is stable.",
		},
		amountADesired: {
			type: "string",
			description: "The desired amount of token A.",
		},
		amountBDesired: {
			type: "string",
			description: "The desired amount of token B.",
		},
		amountAMin: {
			type: "string",
			description: "The minimum amount of token A.",
		},
		amountBMin: {
			type: "string",
			description: "The minimum amount of token B.",
		},
		deadline: {
			type: "string",
			description: "The deadline for the transaction.",
		},
		token: {
			type: "string",
			description: "The address of the token.",
		},
		amountTokenDesired: {
			type: "string",
			description: "The desired amount of the token.",
		},
		amountTokenMin: {
			type: "string",
			description: "The minimum amount of the token.",
		},
		amountETHMin: {
			type: "string",
			description: "The minimum amount of ETH.",
		},
		amountIn: {
			type: "string",
			description: "The input amount.",
		},
		amountOutMin: {
			type: "string",
			description: "The minimum output amount.",
		},
		routes: {
			items: {},
			type: "array",
			description: "The routes for the transaction.",
		},
	},
	required: [
		"tokenA",
		"tokenB",
		"stable",
		"amountADesired",
		"amountBDesired",
		"amountAMin",
		"amountBMin",
		"deadline",
		"token",
		"amountTokenDesired",
		"amountTokenMin",
		"amountETHMin",
		"amountIn",
		"amountOutMin",
		"routes",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexVoterAPIResponse_string_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "string",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexVoterAPIResponse_boolean_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "boolean",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexVoterTransactionSchema = {
	description: "Represents a transaction for the Lynex Voter.",
	properties: {
		data: {
			type: "string",
			description: "The data to be sent with the transaction.",
		},
		value: {
			type: "string",
			description: "The value to be sent with the transaction, in wei.",
		},
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		from: {
			type: "string",
			description: "The sender address of the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "(Optional) The gas price for the transaction, in wei.",
		},
		gasLimit: {
			type: "string",
			description: "(Optional) The gas limit for the transaction.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description:
				"(Optional) The maximum priority fee per gas for the transaction, in wei.",
		},
		maxFeePerGas: {
			type: "string",
			description:
				"(Optional) The maximum fee per gas for the transaction, in wei.",
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce for the transaction.",
		},
		type: {
			type: "number",
			format: "double",
			description: "(Optional) The type of the transaction.",
		},
		chainId: {
			type: "string",
			description: "The chain ID of the network where the transaction is sent.",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexVoterExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description: "Optional response from simulating asset changes.",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description: "Optional response from broadcasting the raw transaction.",
		},
		message: {
			type: "string",
			description:
				"Optional message providing additional information about the execution result.",
		},
		success: {
			type: "boolean",
			description:
				"Optional flag indicating if the function execution was successful.",
		},
		user_op: {
			type: "string",
			description: "Optional user operation identifier.",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "Optional transaction data.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters passed to the executed function.",
		},
		function: {
			type: "string",
			description: "The name of the executed function.",
		},
		transaction: {
			$ref: "#/components/schemas/LynexVoterTransaction",
			description: "The transaction details of the executed function.",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
} as const;

export const LynexVoterAPIResponse_LynexVoterExecuteFunctionResult_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/LynexVoterExecuteFunctionResult",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const LynexVoterInputBodySchema = {
	properties: {
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		data: {
			type: "string",
			description: "The data payload of the transaction.",
		},
		value: {
			type: "string",
			description: "The value being transferred in the transaction.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce of the transaction.",
		},
		simulate: {
			type: "boolean",
			description: "Flag indicating if the operation should be simulated.",
		},
		gas: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Flag indicating if the operation is a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Flag indicating if the operation is performed by an Externally Owned Account.",
		},
		contract_address: {
			type: "string",
			description: "The contract address involved in the operation.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Flag indicating if the transaction should be broadcasted.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "Flag indicating if the nonce should always be incremented.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount involved in the transaction.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
		pool_vote: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The pool votes for the transaction.",
		},
		weights: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The weights for the pool votes.",
		},
		gauge: {
			type: "string",
			description: "The gauge involved in the operation.",
		},
		pool: {
			type: "string",
			description: "The pool involved in the operation.",
		},
		gauge_type: {
			type: "string",
			description: "The type of the gauge.",
		},
		bribes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The bribes involved in the operation.",
		},
		tokens: {
			items: {
				items: {
					type: "string",
				},
				type: "array",
			},
			type: "array",
			description: "The tokens involved in the operation.",
		},
		fees: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The fees involved in the operation.",
		},
		gauges: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The gauges involved in the operation.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const MultiCallAPIResponse_string_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "string",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const FlowNodeSchema = {
	properties: {
		id: {
			type: "string",
		},
		type: {
			type: "string",
			enum: ["action", "condition", "userFunction"],
		},
		data: {
			properties: {
				userFunctionName: {
					type: "string",
				},
				condition: {
					type: "string",
				},
				params: {},
				function: {
					type: "string",
				},
				wrapper: {
					type: "string",
				},
			},
			type: "object",
		},
	},
	required: ["id", "type", "data"],
	type: "object",
	additionalProperties: false,
} as const;

export const FlowEdgeSchema = {
	properties: {
		id: {
			type: "string",
		},
		source: {
			type: "string",
		},
		target: {
			type: "string",
		},
		label: {
			type: "string",
		},
	},
	required: ["id", "source", "target"],
	type: "object",
	additionalProperties: false,
} as const;

export const Record_string_any_Schema = {
	properties: {
		message: {
			type: "string",
			description: "The error message.",
		},
	},
	required: ["message"],
	type: "object",
	description: "Construct a type with a set of properties K of type T",
} as const;

export const MultiCallInputBodySchema = {
	properties: {
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		flow: {
			properties: {
				edges: {
					items: {
						$ref: "#/components/schemas/FlowEdge",
					},
					type: "array",
				},
				nodes: {
					items: {
						$ref: "#/components/schemas/FlowNode",
					},
					type: "array",
				},
			},
			required: ["edges", "nodes"],
			type: "object",
		},
		globalVariables: {
			$ref: "#/components/schemas/Record_string.any_",
		},
		calls: {
			items: {
				properties: {
					chainId: {
						type: "string",
					},
					params: {},
					function: {
						type: "string",
					},
					wrapper: {
						type: "string",
					},
					from: {
						type: "string",
					},
				},
				required: ["chainId", "params", "function", "wrapper", "from"],
				type: "object",
			},
			type: "array",
		},
	},
	required: ["calls"],
	type: "object",
	additionalProperties: false,
} as const;

export const MultiCallAPIResponseSchema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const MultiCallAPIResponse_any_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ScheduleJobBodySchema = {
	properties: {
		jobId: {
			type: "string",
		},
		schedule: {
			type: "string",
		},
	},
	required: ["jobId", "schedule"],
	type: "object",
	additionalProperties: false,
} as const;

export const MultiCallAPIResponse_any_Array_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			items: {},
			type: "array",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const JsonSchema = {
	anyOf: [
		{
			type: "string",
		},
		{
			type: "number",
			format: "double",
		},
		{
			type: "boolean",
		},
		{
			properties: {},
			additionalProperties: {
				$ref: "#/components/schemas/Json",
			},
			type: "object",
		},
		{
			items: {
				$ref: "#/components/schemas/Json",
			},
			type: "array",
		},
	],
	nullable: true,
} as const;

export const JobsSchema = {
	properties: {
		user_id: {
			type: "string",
		},
		updated_at: {
			type: "string",
		},
		status: {
			type: "string",
		},
		id: {
			type: "string",
		},
		global_variables: {
			allOf: [
				{
					$ref: "#/components/schemas/Json",
				},
			],
			nullable: true,
		},
		flow_id: {
			type: "string",
			nullable: true,
		},
		flow: {
			allOf: [
				{
					$ref: "#/components/schemas/Json",
				},
			],
			nullable: true,
		},
		error: {
			allOf: [
				{
					$ref: "#/components/schemas/Json",
				},
			],
			nullable: true,
		},
		created_at: {
			type: "string",
		},
		calls: {
			$ref: "#/components/schemas/Json",
		},
	},
	required: [
		"user_id",
		"updated_at",
		"status",
		"id",
		"global_variables",
		"flow_id",
		"flow",
		"error",
		"created_at",
		"calls",
	],
	type: "object",
} as const;

export const MultiCallAPIResponse_Jobs_Array_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			items: {
				$ref: "#/components/schemas/Jobs",
			},
			type: "array",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const MultiCallAPIResponse_Jobs_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/Jobs",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CreateFlowBodySchema = {
	properties: {
		name: {
			type: "string",
		},
		description: {
			type: "string",
		},
		nodes: {
			items: {
				$ref: "#/components/schemas/FlowNode",
			},
			type: "array",
		},
		edges: {
			items: {
				$ref: "#/components/schemas/FlowEdge",
			},
			type: "array",
		},
		created_at: {
			type: "string",
		},
		id: {
			type: "string",
		},
		updated_at: {
			type: "string",
		},
		user_id: {
			type: "string",
		},
	},
	required: [
		"name",
		"description",
		"nodes",
		"edges",
		"created_at",
		"id",
		"updated_at",
		"user_id",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const FlowSchema = {
	properties: {
		version: {
			type: "number",
			format: "double",
		},
		user_id: {
			type: "string",
		},
		updated_at: {
			type: "string",
		},
		nodes: {
			$ref: "#/components/schemas/Json",
		},
		name: {
			type: "string",
		},
		id: {
			type: "string",
		},
		edges: {
			$ref: "#/components/schemas/Json",
		},
		description: {
			type: "string",
			nullable: true,
		},
		created_at: {
			type: "string",
		},
	},
	required: [
		"version",
		"user_id",
		"updated_at",
		"nodes",
		"name",
		"id",
		"edges",
		"description",
		"created_at",
	],
	type: "object",
} as const;

export const MultiCallAPIResponse_Flow_Array_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			items: {
				$ref: "#/components/schemas/Flow",
			},
			type: "array",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const MultiCallAPIResponse_Flow_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/Flow",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const UpdateFlowBodySchema = {
	properties: {
		name: {
			type: "string",
		},
		description: {
			type: "string",
		},
		nodes: {
			items: {
				$ref: "#/components/schemas/FlowNode",
			},
			type: "array",
		},
		edges: {
			items: {
				$ref: "#/components/schemas/FlowEdge",
			},
			type: "array",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const OdosTransactionSchema = {
	description: "Represents a transaction in the Odos system.",
	properties: {
		data: {
			type: "string",
			description: "The data payload of the transaction.",
		},
		value: {
			type: "string",
			description: "The value being transferred in the transaction, in wei.",
		},
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		from: {
			type: "string",
			description: "The sender address of the transaction.",
		},
		gasPrice: {
			type: "string",
			description: `The gas price for the transaction, in wei.
Optional.`,
		},
		gasLimit: {
			type: "string",
			description: `The gas limit for the transaction.
Optional.`,
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce of the transaction.",
		},
		chainId: {
			type: "string",
			description: "The chain ID of the blockchain network.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: `The maximum priority fee per gas for EIP-1559 transactions, in wei.
Optional.`,
		},
		maxFeePerGas: {
			type: "string",
			description: `The maximum fee per gas for EIP-1559 transactions, in wei.
Optional.`,
		},
		type: {
			type: "number",
			format: "double",
			description: `The type of the transaction.
Optional.`,
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const OdosExecuteFunctionResultSchema = {
	properties: {
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description: "The broadcasted transaction details.",
		},
		odos: {
			description: "The Odos data.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the execution.",
		},
		success: {
			type: "boolean",
			description: "Indicates if the execution was successful.",
		},
		user_op: {
			type: "string",
			description: "Indicates if the execution was successful.",
		},
		data: {
			description: "The data returned by the executed function.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters of the executed function.",
		},
		function: {
			type: "string",
			description: "The name of the executed function.",
		},
		transaction: {
			$ref: "#/components/schemas/OdosTransaction",
			description: "The transaction details.",
		},
	},
	required: ["params", "function"],
	type: "object",
	description: "Represents the result of executing an Odos function.",
} as const;

export const OdosAPIResponse_OdosExecuteFunctionResult_Schema = {
	description: "Represents the structure of a response from the Odos API.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the API response.",
		},
		data: {
			$ref: "#/components/schemas/OdosExecuteFunctionResult",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const PathVizImageConfigSchema = {
	properties: {
		linkColors: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The colors of the links in the path visualization image.",
		},
		nodeColor: {
			type: "string",
			description: "The color of the nodes in the path visualization image.",
		},
		nodeTextColor: {
			type: "string",
			description:
				"The color of the text on the nodes in the path visualization image.",
		},
		legendTextColor: {
			type: "string",
			description:
				"The color of the text on the legend in the path visualization image.",
		},
		width: {
			type: "number",
			format: "double",
			description: "The width of the path visualization image.",
		},
		height: {
			type: "number",
			format: "double",
			description: "The height of the path visualization image.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const OdosSwapInputBodySchema = {
	description: "Represents the input body for an Odos swap operation.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		data: {
			type: "string",
			description: "The data to be sent.",
		},
		value: {
			type: "string",
			description: "The value to be sent.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce for the transaction.",
		},
		simulate: {
			type: "boolean",
			description: "Whether to simulate the transaction.",
		},
		gas: {
			type: "string",
			description: "The gas for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Whether to perform a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Whether the transaction is from an externally owned account.",
		},
		contract_address: {
			type: "string",
			description: "The contract address.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Whether to broadcast the transaction.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "Whether to always increment the nonce.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount involved in the transaction.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: `Referral code for the swap.
Optional.`,
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "An array of input tokens with their respective amounts.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description:
				"An array of output tokens with their respective proportions.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: `The maximum allowable slippage percentage for the swap.
Optional.`,
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
		sourceBlacklist: {
			items: {
				type: "string",
			},
			type: "array",
			description: `A list of sources to be excluded from the swap.
Optional.`,
		},
		sourceWhitelist: {
			items: {
				type: "string",
			},
			type: "array",
			description: `A list of sources to be included in the swap.
Optional.`,
		},
		poolBlacklist: {
			items: {
				type: "string",
			},
			type: "array",
			description: `A list of pools to be excluded from the swap.
Optional.`,
		},
		pathViz: {
			type: "boolean",
			description: `Flag to enable path visualization.
Optional.`,
		},
		pathVizImage: {
			type: "boolean",
			description: `Flag to enable path visualization image generation.
Optional.`,
		},
		pathVizImageConfig: {
			$ref: "#/components/schemas/PathVizImageConfig",
			description: `Configuration for path visualization image generation.
Optional.`,
		},
		disableRFQs: {
			type: "boolean",
			description: `Flag to disable RFQs (Request for Quotes).
Optional.`,
		},
		compact: {
			type: "boolean",
			description: `Flag to enable compact mode.
Optional.`,
		},
		likeAsset: {
			type: "boolean",
			description: `Flag to indicate if the swap should be performed with like assets.
Optional.`,
		},
		simple: {
			type: "boolean",
			description: `Flag to enable simple mode.
Optional.`,
		},
	},
	required: ["inputTokens", "outputTokens"],
	type: "object",
	additionalProperties: false,
} as const;

export const AssembleRequestSchema = {
	description: "Represents a request to assemble a specific path for a user.",
	properties: {
		userAddr: {
			type: "string",
			description: "The address of the user making the request.",
		},
		pathId: {
			type: "string",
			description: "The ID of the path to be assembled.",
		},
		simulate: {
			type: "boolean",
			description: "Whether to simulate the transaction.",
		},
		receiver: {
			type: "string",
			description: "The address of the receiver, if any.",
		},
	},
	required: ["userAddr", "pathId"],
	type: "object",
	additionalProperties: false,
} as const;

export const CryptoCurrencySchema = {
	properties: {
		networkDisplayName: {
			type: "string",
			description: "The display name of the network.",
		},
		icon: {
			type: "string",
			description:
				"The URL or path to the icon representing the cryptocurrency.",
		},
		chainId: {
			type: "number",
			format: "double",
			description: "The chain ID of the network.",
		},
		address: {
			type: "string",
			description: "The address of the cryptocurrency on the network.",
		},
		decimals: {
			type: "number",
			format: "double",
			description: "The number of decimal places the cryptocurrency supports.",
		},
		network: {
			type: "string",
			description: "The network on which the cryptocurrency operates.",
		},
		symbol: {
			type: "string",
			description: "The symbol of the cryptocurrency (e.g., ₿, Ξ).",
		},
		name: {
			type: "string",
			description: "The name of the cryptocurrency.",
		},
		code: {
			type: "string",
			description: "The code of the cryptocurrency (e.g., BTC, ETH).",
		},
		id: {
			type: "string",
			description: "The unique identifier of the cryptocurrency.",
		},
	},
	required: [
		"networkDisplayName",
		"icon",
		"chainId",
		"address",
		"decimals",
		"network",
		"symbol",
		"name",
		"code",
		"id",
	],
	type: "object",
} as const;

export const FiatCurrencySchema = {
	properties: {
		icon: {
			type: "string",
			description:
				"The URL or path to the icon representing the fiat currency.",
		},
		symbol: {
			type: "string",
			description: "The symbol of the fiat currency (e.g., $, €).",
		},
		name: {
			type: "string",
			description: "The name of the fiat currency.",
		},
		code: {
			type: "string",
			description: "The code of the fiat currency (e.g., USD, EUR).",
		},
		id: {
			type: "string",
			description: "The unique identifier for the fiat currency.",
		},
	},
	required: ["icon", "symbol", "name", "code", "id"],
	type: "object",
	description: "Represents a fiat currency.",
} as const;

export const MessageSchema = {
	properties: {
		fiat: {
			items: {
				$ref: "#/components/schemas/FiatCurrency",
			},
			type: "array",
			description: "An array of fiat currency objects.",
		},
		crypto: {
			items: {
				$ref: "#/components/schemas/CryptoCurrency",
			},
			type: "array",
			description: "An array of cryptocurrency objects.",
		},
	},
	required: ["fiat", "crypto"],
	type: "object",
} as const;

export const SupportedCurrenciesResponseSchema = {
	properties: {
		message: {
			$ref: "#/components/schemas/Message",
			description:
				"The message containing arrays of cryptocurrencies and fiat currencies.",
		},
	},
	required: ["message"],
	type: "object",
	description: "Represents the response containing supported currencies.",
} as const;

export const PaymentTypeSchema = {
	properties: {
		icon: {
			type: "string",
			description: "The URL or path to the icon representing the payment type.",
		},
		name: {
			type: "string",
			description: "The name of the payment type.",
		},
		paymentTypeId: {
			type: "string",
			description: "The unique identifier for the payment type.",
		},
	},
	required: ["icon", "name", "paymentTypeId"],
	type: "object",
	description: "Represents a type of payment method.",
} as const;

export const SupportedPaymentTypesMessageSchema = {
	properties: {
		googlepay: {
			$ref: "#/components/schemas/PaymentType",
			description: "The payment type for Google Pay.",
		},
		applepay: {
			$ref: "#/components/schemas/PaymentType",
			description: "The payment type for Apple Pay.",
		},
		creditcard: {
			$ref: "#/components/schemas/PaymentType",
			description: "The payment type for credit cards.",
		},
	},
	required: ["googlepay", "applepay", "creditcard"],
	type: "object",
	description: "Represents a message containing supported payment types.",
} as const;

export const SupportedPaymentTypesCurrencyResponseSchema = {
	properties: {
		message: {
			$ref: "#/components/schemas/SupportedPaymentTypesMessage",
			description: "The message containing supported payment types.",
		},
	},
	required: ["message"],
	type: "object",
	description:
		"Represents the response containing supported payment types and their associated message.",
} as const;

export const SupportedDefaultResponseSchema = {
	properties: {
		defaults: {
			properties: {
				id: {
					properties: {
						provider: {
							type: "string",
							description: "The provider of the transaction.",
						},
						paymentMethod: {
							type: "string",
							description: "The payment method used for the transaction.",
						},
						amount: {
							type: "number",
							format: "double",
							description: "The amount involved in the transaction.",
						},
						target: {
							type: "string",
							description: "The destination of the transaction.",
						},
						source: {
							type: "string",
							description: "The source of the transaction.",
						},
					},
					required: ["provider", "paymentMethod", "amount", "target", "source"],
					type: "object",
					description: "The unique identifier for the transaction.",
				},
			},
			required: ["id"],
			type: "object",
			description: "The default transaction details.",
		},
		recommended: {
			properties: {
				provider: {
					type: "string",
					description: "The provider of the transaction.",
				},
				paymentMethod: {
					type: "string",
					description: "The payment method used for the transaction.",
				},
				amount: {
					type: "number",
					format: "double",
					description: "The amount involved in the transaction.",
				},
				target: {
					type: "string",
					description: "The destination of the transaction.",
				},
				source: {
					type: "string",
					description: "The unique identifier for the transaction.",
				},
			},
			required: ["provider", "paymentMethod", "amount", "target", "source"],
			type: "object",
			description: "The recommended transaction details.",
		},
	},
	required: ["defaults", "recommended"],
	type: "object",
	description:
		"Represents the response structure for supported default values.",
} as const;

export const SupportedAssetResponseSchema = {
	properties: {
		country: {
			type: "string",
			description: "The country code where the assets are supported.",
		},
		assets: {
			items: {
				properties: {
					crypto: {
						items: {
							type: "string",
						},
						type: "array",
						description: "An array of supported cryptocurrencies.",
					},
					paymentMethods: {
						items: {
							type: "string",
						},
						type: "array",
						description: "An array of supported payment methods.",
					},
					fiat: {
						type: "string",
						description: "The fiat currency code.",
					},
				},
				required: ["crypto", "paymentMethods", "fiat"],
				type: "object",
			},
			type: "array",
			description: "An array of objects representing the supported assets.",
		},
	},
	required: ["country", "assets"],
	type: "object",
	description: "Represents the response structure for supported assets.",
} as const;

export const GetSupportedOnRampsResponseSchema = {
	properties: {
		message: {
			items: {
				properties: {
					id: {
						type: "string",
						description: "The unique identifier of the on-ramp.",
					},
					displayName: {
						type: "string",
						description: "The display name of the on-ramp.",
					},
					icons: {
						properties: {
							png: {
								properties: {
									"160x160": {
										type: "string",
									},
									"32x32": {
										type: "string",
									},
								},
								required: ["160x160", "32x32"],
								type: "object",
								description:
									"An object containing different sizes of the PNG format of the icon.",
							},
							svg: {
								type: "string",
								description: "The URL of the SVG format of the icon.",
							},
						},
						required: ["png", "svg"],
						type: "object",
						description: "The URL of the icon for the on-ramp.",
					},
					icon: {
						type: "string",
						description: "The on-ramp service.",
					},
				},
				required: ["id", "displayName", "icons", "icon"],
				type: "object",
			},
			type: "array",
			description: "An array of supported on-ramp objects.",
		},
	},
	required: ["message"],
	type: "object",
	description: "Represents the response from the GetSupportedOnRamps API.",
} as const;

export const QuotesSchema = {
	items: {
		$ref: "#/components/schemas/Quote",
	},
	type: "array",
	description: "Represents an array of Quote objects.",
} as const;

export const SellQuoteSchema = {
	properties: {
		recommendations: {
			items: {
				type: "string",
			},
			type: "array",
			description: "A list of recommendations related to the quote.",
		},
		quoteId: {
			type: "string",
			description: "The unique identifier for the quote.",
		},
		paymentMethod: {
			type: "string",
			description: "The method of payment used for the transaction.",
		},
		ramp: {
			type: "string",
			description: "The ramp service used for the transaction.",
		},
		payout: {
			type: "number",
			format: "double",
			description: "The amount to be paid out after fees.",
		},
		transactionFee: {
			type: "number",
			format: "double",
			description: "The fee charged for processing the transaction.",
		},
		networkFee: {
			type: "number",
			format: "double",
			description: "The fee charged by the network for the transaction.",
		},
		rate: {
			type: "number",
			format: "double",
			description: "The exchange rate for the cryptocurrency.",
		},
	},
	required: [
		"recommendations",
		"quoteId",
		"paymentMethod",
		"ramp",
		"payout",
		"transactionFee",
		"networkFee",
		"rate",
	],
	type: "object",
	description: "Represents a quote for selling cryptocurrency.",
} as const;

export const SellQuotesSchema = {
	items: {
		$ref: "#/components/schemas/SellQuote",
	},
	type: "array",
	description: "Represents an array of SellQuote objects.",
} as const;

export const TransactionInputSchema = {
	properties: {
		supportedParams: {
			properties: {
				partnerData: {
					properties: {
						redirectUrl: {
							properties: {
								success: {
									type: "string",
									description:
										"The URL to redirect to upon successful transaction.",
								},
							},
							required: ["success"],
							type: "object",
							description: "Redirect URLs for the transaction.",
						},
					},
					required: ["redirectUrl"],
					type: "object",
					description: "Partner-specific data for the transaction.",
				},
				theme: {
					properties: {
						borderRadius: {
							type: "number",
							format: "double",
							nullable: true,
							description: "The border radius of the theme.",
						},
						cardColor: {
							type: "string",
							description: "The card color of the theme.",
						},
						secondaryTextColor: {
							type: "string",
							description: "The secondary text color of the theme.",
						},
						primaryTextColor: {
							type: "string",
							description: "The primary text color of the theme.",
						},
						secondaryColor: {
							type: "string",
							description: "The secondary color of the theme.",
						},
						primaryColor: {
							type: "string",
							description: "The primary color of the theme.",
						},
						themeName: {
							type: "string",
							description: "The name of the theme.",
						},
						isDark: {
							type: "boolean",
							description: "Indicates if the theme is dark.",
						},
					},
					required: [
						"borderRadius",
						"cardColor",
						"secondaryTextColor",
						"primaryTextColor",
						"secondaryColor",
						"primaryColor",
						"themeName",
						"isDark",
					],
					type: "object",
					description: "Theme settings for the transaction.",
				},
			},
			required: ["partnerData", "theme"],
			type: "object",
			description: "Supported parameters for the transaction.",
		},
		wallet: {
			properties: {
				address: {
					type: "string",
					description: "The wallet address involved in the transaction.",
				},
			},
			required: ["address"],
			type: "object",
			description: "The wallet information for the transaction.",
		},
		metaData: {
			properties: {
				quoteId: {
					type: "string",
					description: "The quote ID associated with the transaction.",
				},
			},
			required: ["quoteId"],
			type: "object",
			description: "Additional metadata for the transaction.",
		},
		originatingHost: {
			type: "string",
			description: "The originating host of the transaction.",
		},
		partnerContext: {
			type: "string",
			description: "The context provided by the partner.",
		},
		uuid: {
			type: "string",
			description: "The unique identifier for the transaction.",
		},
		network: {
			type: "string",
			description: "The network used for the transaction.",
		},
		paymentMethod: {
			type: "string",
			description: "The payment method used for the transaction.",
		},
		type: {
			type: "string",
			description: "The type of transaction.",
		},
		amount: {
			type: "number",
			format: "double",
			description: "The amount involved in the transaction.",
		},
		destination: {
			type: "string",
			description: "The destination of the transaction.",
		},
		source: {
			type: "string",
			description: "The source of the transaction.",
		},
		onramp: {
			type: "string",
			description: "The onramp service used for the transaction.",
		},
	},
	required: [
		"supportedParams",
		"wallet",
		"metaData",
		"originatingHost",
		"partnerContext",
		"uuid",
		"network",
		"paymentMethod",
		"type",
		"amount",
		"destination",
		"source",
		"onramp",
	],
	type: "object",
	description: "Represents the input for a transaction in the OnRamper system.",
} as const;

export const OpenSeaAPIResponseSchema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const TokenStandardSchema = {
	description: "Token standards",
	enum: ["ERC20", "ERC721", "ERC1155"],
	type: "string",
} as const;

export const AssetSchema = {
	description: "Generic Blockchain Asset.",
	properties: {
		tokenId: {
			type: "string",
			nullable: true,
			description: "The asset's token ID, or null if ERC-20",
		},
		tokenAddress: {
			type: "string",
			description: "The asset's contract address",
		},
		tokenStandard: {
			$ref: "#/components/schemas/TokenStandard",
			description: 'The token standard (e.g. "ERC721") for this asset',
		},
		name: {
			type: "string",
			description: "Optional for ENS names",
		},
		decimals: {
			type: "number",
			format: "double",
			description: "Optional for fungible items",
		},
	},
	required: ["tokenId", "tokenAddress"],
	type: "object",
	additionalProperties: false,
} as const;

export const OpenSeaNFTInputBodySchema = {
	description: "Represents the input body for an OpenSea NFT transaction.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		value: {
			type: "string",
			description: "The value to be sent in the transaction.",
		},
		data: {
			type: "string",
			description: "The data to be sent in the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce of the transaction.",
		},
		gas: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		chainId: {
			type: "string",
			description: "The chain ID of the blockchain network.",
		},
		dryrun: {
			type: "boolean",
			description: "Indicates if the transaction is a dry run.",
		},
		broadcast: {
			type: "boolean",
			description: "Indicates if the transaction should be broadcasted.",
		},
		asset: {
			$ref: "#/components/schemas/Asset",
			description: "The asset involved in the transaction.",
		},
		startAmount: {
			type: "number",
			format: "double",
			description: "The starting amount for the offer.",
		},
		expirationTime: {
			type: "number",
			format: "double",
			description: "The expiration time of the offer (optional).",
		},
	},
	required: ["asset", "startAmount"],
	type: "object",
	additionalProperties: false,
} as const;

export const OpenSeaCollectionInputBodySchema = {
	description: `Represents the input body for an OpenSea collection.
Extends the \`OpenSeaInputBody\` interface.`,
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		value: {
			type: "string",
			description: "The value to be sent in the transaction.",
		},
		data: {
			type: "string",
			description: "The data to be sent in the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce of the transaction.",
		},
		gas: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		chainId: {
			type: "string",
			description: "The chain ID of the blockchain network.",
		},
		dryrun: {
			type: "boolean",
			description: "Indicates if the transaction is a dry run.",
		},
		broadcast: {
			type: "boolean",
			description: "Indicates if the transaction should be broadcasted.",
		},
		collectionSlug: {
			type: "string",
			description: "The slug identifier for the collection.",
		},
		amount: {
			type: "number",
			format: "double",
			description: "The amount of the asset.",
		},
		quantity: {
			type: "number",
			format: "double",
			description: "The quantity of the asset.",
		},
		paymentTokenAddress: {
			type: "string",
			description: "The optional address of the payment token.",
		},
	},
	required: ["collectionSlug", "amount", "quantity"],
	type: "object",
	additionalProperties: false,
} as const;

export const PingResponseSchema = {
	properties: {
		message: {
			type: "string",
		},
	},
	required: ["message"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketWrapperNewOrder_string_Schema = {
	properties: {
		order: {
			properties: {
				signature: {
					type: "string",
				},
				signatureType: {
					type: "number",
					format: "double",
				},
				side: {
					type: "string",
				},
				feeRateBps: {
					type: "string",
				},
				nonce: {
					type: "string",
				},
				expiration: {
					type: "string",
				},
				takerAmount: {
					type: "string",
				},
				makerAmount: {
					type: "string",
				},
				tokenId: {
					type: "string",
				},
				taker: {
					type: "string",
				},
				signer: {
					type: "string",
				},
				maker: {
					type: "string",
				},
				salt: {
					type: "number",
					format: "double",
				},
			},
			required: [
				"signature",
				"signatureType",
				"side",
				"feeRateBps",
				"nonce",
				"expiration",
				"takerAmount",
				"makerAmount",
				"tokenId",
				"taker",
				"signer",
				"maker",
				"salt",
			],
			type: "object",
		},
		owner: {
			type: "string",
		},
		orderType: {
			type: "string",
		},
	},
	required: ["order", "owner", "orderType"],
	type: "object",
	additionalProperties: false,
} as const;

export const CreateOrderResponseSchema = {
	properties: {
		order: {
			$ref: "#/components/schemas/PolymarketWrapperNewOrder_string_",
		},
	},
	required: ["order"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_CreateOrderResponse_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/CreateOrderResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CreateOrderBodySchema = {
	properties: {
		chain_id: {
			type: "string",
		},
		userOrder: {
			properties: {
				taker: {
					type: "string",
				},
				expiration: {
					type: "number",
					format: "double",
				},
				nonce: {
					type: "number",
					format: "double",
				},
				feeRateBps: {
					type: "number",
					format: "double",
				},
				side: {
					type: "string",
				},
				size: {
					type: "number",
					format: "double",
				},
				price: {
					type: "number",
					format: "double",
				},
				tokenID: {
					type: "string",
				},
			},
			required: ["side", "size", "price", "tokenID"],
			type: "object",
		},
		options: {
			properties: {
				negRisk: {
					type: "boolean",
				},
				tickSize: {
					type: "string",
				},
			},
			required: ["tickSize"],
			type: "object",
		},
	},
	required: ["chain_id", "userOrder", "options"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketWrapperSignedOrderSchema = {
	properties: {
		maker: {
			type: "string",
		},
		taker: {
			type: "string",
		},
		tokenId: {
			type: "string",
		},
		makerAmount: {
			type: "string",
		},
		takerAmount: {
			type: "string",
		},
		side: {
			type: "number",
			format: "double",
		},
		expiration: {
			type: "string",
		},
		nonce: {
			type: "string",
		},
		feeRateBps: {
			type: "string",
		},
		signature: {
			type: "string",
		},
		salt: {
			type: "string",
		},
		signer: {
			type: "string",
		},
		signatureType: {
			type: "number",
			format: "double",
		},
	},
	required: [
		"maker",
		"taker",
		"tokenId",
		"makerAmount",
		"takerAmount",
		"side",
		"expiration",
		"nonce",
		"feeRateBps",
		"signature",
		"salt",
		"signer",
		"signatureType",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const CreateMarketBuyOrderResponseSchema = {
	properties: {
		order: {
			$ref: "#/components/schemas/PolymarketWrapperSignedOrder",
		},
	},
	required: ["order"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_CreateMarketBuyOrderResponse_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/CreateMarketBuyOrderResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CreateMarketBuyOrderBodySchema = {
	properties: {
		chain_id: {
			type: "string",
		},
		userMarketOrder: {
			properties: {
				taker: {
					type: "string",
				},
				nonce: {
					type: "number",
					format: "double",
				},
				feeRateBps: {
					type: "number",
					format: "double",
				},
				amount: {
					type: "number",
					format: "double",
				},
				price: {
					type: "number",
					format: "double",
				},
				tokenID: {
					type: "string",
				},
			},
			required: ["amount", "tokenID"],
			type: "object",
		},
		options: {
			properties: {
				negRisk: {
					type: "boolean",
				},
				tickSize: {
					type: "string",
				},
			},
			type: "object",
		},
	},
	required: ["chain_id", "userMarketOrder"],
	type: "object",
	additionalProperties: false,
} as const;

export const PostOrderResponseSchema = {
	properties: {
		success: {
			type: "boolean",
		},
		orderID: {
			type: "string",
		},
	},
	required: ["success", "orderID"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_PostOrderResponse_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/PostOrderResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const PostOrderBodySchema = {
	properties: {
		chain_id: {
			type: "string",
		},
		order: {
			$ref: "#/components/schemas/PolymarketWrapperSignedOrder",
		},
	},
	required: ["chain_id", "order"],
	type: "object",
	additionalProperties: false,
} as const;

export const CancelOrderResponseSchema = {
	properties: {
		success: {
			type: "boolean",
		},
		orderID: {
			type: "string",
		},
	},
	required: ["success", "orderID"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_CancelOrderResponse_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/CancelOrderResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CancelOrderBodySchema = {
	properties: {
		chain_id: {
			type: "string",
		},
		orderID: {
			type: "string",
		},
	},
	required: ["chain_id", "orderID"],
	type: "object",
	additionalProperties: false,
} as const;

export const CancelOrdersResponseSchema = {
	properties: {
		success: {
			type: "boolean",
		},
		orderIDs: {
			items: {
				type: "string",
			},
			type: "array",
		},
	},
	required: ["success", "orderIDs"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_CancelOrdersResponse_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/CancelOrdersResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CancelOrdersBodySchema = {
	properties: {
		chain_id: {
			type: "string",
		},
		ordersHashes: {
			items: {
				type: "string",
			},
			type: "array",
		},
	},
	required: ["chain_id", "ordersHashes"],
	type: "object",
	additionalProperties: false,
} as const;

export const CancelMarketOrdersResponseSchema = {
	properties: {
		success: {
			type: "boolean",
		},
		orderIDs: {
			items: {
				type: "string",
			},
			type: "array",
		},
	},
	required: ["success", "orderIDs"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_CancelMarketOrdersResponse_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/CancelMarketOrdersResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const CancelMarketOrdersBodySchema = {
	properties: {
		chain_id: {
			type: "string",
		},
		payload: {
			properties: {
				outcomeId: {
					type: "string",
				},
				market: {
					type: "string",
				},
			},
			required: ["market"],
			type: "object",
		},
	},
	required: ["chain_id", "payload"],
	type: "object",
	additionalProperties: false,
} as const;

export const UpdateBalanceAllowanceResponseSchema = {
	properties: {
		success: {
			type: "boolean",
		},
		newAllowance: {
			type: "string",
		},
	},
	required: ["success", "newAllowance"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_UpdateBalanceAllowanceResponse_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/UpdateBalanceAllowanceResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const UpdateBalanceAllowanceBodySchema = {
	properties: {
		chain_id: {
			type: "string",
		},
		params: {
			properties: {
				token_id: {
					type: "string",
				},
				asset_type: {
					type: "string",
				},
			},
			required: ["asset_type"],
			type: "object",
		},
	},
	required: ["chain_id", "params"],
	type: "object",
	additionalProperties: false,
} as const;

export const DropNotificationsResponseSchema = {
	properties: {
		success: {
			type: "boolean",
		},
		droppedCount: {
			type: "number",
			format: "double",
		},
	},
	required: ["success", "droppedCount"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_DropNotificationsResponse_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/DropNotificationsResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const DropNotificationsBodySchema = {
	properties: {
		chain_id: {
			type: "string",
		},
		params: {
			properties: {
				notification_ids: {
					items: {
						type: "string",
					},
					type: "array",
				},
			},
			type: "object",
		},
	},
	required: ["chain_id", "params"],
	type: "object",
	additionalProperties: false,
} as const;

export const PaginationPayloadSchema = {
	properties: {
		limit: {
			type: "number",
			format: "double",
		},
		count: {
			type: "number",
			format: "double",
		},
		next_cursor: {
			type: "string",
		},
		data: {
			items: {},
			type: "array",
		},
	},
	required: ["limit", "count", "next_cursor", "data"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_PaginationPayload_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/PaginationPayload",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_any_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ApproveForPolymarketBodySchema = {
	properties: {
		chain_id: {
			type: "string",
		},
	},
	required: ["chain_id"],
	type: "object",
	additionalProperties: false,
} as const;

export const OrderSummarySchema = {
	properties: {
		price: {
			type: "string",
		},
		size: {
			type: "string",
		},
	},
	required: ["price", "size"],
	type: "object",
	additionalProperties: false,
} as const;

export const OrderBookSummarySchema = {
	properties: {
		market: {
			type: "string",
		},
		asset_id: {
			type: "string",
		},
		timestamp: {
			type: "string",
		},
		bids: {
			items: {
				$ref: "#/components/schemas/OrderSummary",
			},
			type: "array",
		},
		asks: {
			items: {
				$ref: "#/components/schemas/OrderSummary",
			},
			type: "array",
		},
		hash: {
			type: "string",
		},
	},
	required: ["market", "asset_id", "timestamp", "bids", "asks", "hash"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_OrderBookSummary_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/OrderBookSummary",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const OpenOrderSchema = {
	properties: {
		id: {
			type: "string",
		},
		status: {
			type: "string",
		},
		owner: {
			type: "string",
		},
		maker_address: {
			type: "string",
		},
		market: {
			type: "string",
		},
		asset_id: {
			type: "string",
		},
		side: {
			type: "string",
		},
		original_size: {
			type: "string",
		},
		size_matched: {
			type: "string",
		},
		price: {
			type: "string",
		},
		associate_trades: {
			items: {
				type: "string",
			},
			type: "array",
		},
		outcome: {
			type: "string",
		},
		created_at: {
			type: "number",
			format: "double",
		},
		expiration: {
			type: "string",
		},
		order_type: {
			type: "string",
		},
	},
	required: [
		"id",
		"status",
		"owner",
		"maker_address",
		"market",
		"asset_id",
		"side",
		"original_size",
		"size_matched",
		"price",
		"associate_trades",
		"outcome",
		"created_at",
		"expiration",
		"order_type",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const OpenOrdersResponseSchema = {
	items: {
		$ref: "#/components/schemas/OpenOrder",
	},
	type: "array",
} as const;

export const PolymarketAPIResponse_OpenOrdersResponse_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/OpenOrdersResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_OpenOrder_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/OpenOrder",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const MakerOrderSchema = {
	properties: {
		order_id: {
			type: "string",
		},
		owner: {
			type: "string",
		},
		maker_address: {
			type: "string",
		},
		matched_amount: {
			type: "string",
		},
		price: {
			type: "string",
		},
		fee_rate_bps: {
			type: "string",
		},
		asset_id: {
			type: "string",
		},
		outcome: {
			type: "string",
		},
	},
	required: [
		"order_id",
		"owner",
		"maker_address",
		"matched_amount",
		"price",
		"fee_rate_bps",
		"asset_id",
		"outcome",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const TradeSchema = {
	properties: {
		id: {
			type: "string",
		},
		taker_order_id: {
			type: "string",
		},
		market: {
			type: "string",
		},
		asset_id: {
			type: "string",
		},
		side: {
			anyOf: [
				{
					type: "number",
					format: "double",
				},
				{
					type: "string",
				},
			],
		},
		size: {
			type: "string",
		},
		fee_rate_bps: {
			type: "string",
		},
		price: {
			type: "string",
		},
		status: {
			type: "string",
		},
		match_time: {
			type: "string",
		},
		last_update: {
			type: "string",
		},
		outcome: {
			type: "string",
		},
		bucket_index: {
			type: "number",
			format: "double",
		},
		owner: {
			type: "string",
		},
		maker_address: {
			type: "string",
		},
		maker_orders: {
			items: {
				$ref: "#/components/schemas/MakerOrder",
			},
			type: "array",
		},
		transaction_hash: {
			type: "string",
		},
		trader_side: {
			type: "string",
			enum: ["TAKER", "MAKER"],
		},
	},
	required: [
		"id",
		"taker_order_id",
		"market",
		"asset_id",
		"side",
		"size",
		"fee_rate_bps",
		"price",
		"status",
		"match_time",
		"last_update",
		"outcome",
		"bucket_index",
		"owner",
		"maker_address",
		"maker_orders",
		"transaction_hash",
		"trader_side",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_Trade_Array_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			items: {
				$ref: "#/components/schemas/Trade",
			},
			type: "array",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const NotificationSchema = {
	properties: {
		type: {
			type: "number",
			format: "double",
		},
		owner: {
			type: "string",
		},
		payload: {},
	},
	required: ["type", "owner", "payload"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_Notification_Array_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			items: {
				$ref: "#/components/schemas/Notification",
			},
			type: "array",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const BalanceAllowanceResponseSchema = {
	properties: {
		balance: {
			type: "string",
		},
		allowance: {
			type: "string",
		},
	},
	required: ["balance", "allowance"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_BalanceAllowanceResponse_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/BalanceAllowanceResponse",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const MarketPriceSchema = {
	properties: {
		t: {
			type: "number",
			format: "double",
		},
		p: {
			type: "number",
			format: "double",
		},
	},
	required: ["t", "p"],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_MarketPrice_Array_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			items: {
				$ref: "#/components/schemas/MarketPrice",
			},
			type: "array",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const SideSchema = {
	enum: ["BUY", "SELL"],
	type: "string",
} as const;

export const MarketTradeEventSchema = {
	properties: {
		event_type: {
			type: "string",
		},
		market: {
			properties: {
				slug: {
					type: "string",
				},
				icon: {
					type: "string",
				},
				question: {
					type: "string",
				},
				asset_id: {
					type: "string",
				},
				condition_id: {
					type: "string",
				},
			},
			required: ["slug", "icon", "question", "asset_id", "condition_id"],
			type: "object",
		},
		user: {
			properties: {
				pseudonym: {
					type: "string",
				},
				optimized_profile_picture: {
					type: "string",
				},
				profile_picture: {
					type: "string",
				},
				username: {
					type: "string",
				},
				address: {
					type: "string",
				},
			},
			required: [
				"pseudonym",
				"optimized_profile_picture",
				"profile_picture",
				"username",
				"address",
			],
			type: "object",
		},
		side: {
			$ref: "#/components/schemas/Side",
		},
		size: {
			type: "string",
		},
		fee_rate_bps: {
			type: "string",
		},
		price: {
			type: "string",
		},
		outcome: {
			type: "string",
		},
		outcome_index: {
			type: "number",
			format: "double",
		},
		transaction_hash: {
			type: "string",
		},
		timestamp: {
			type: "string",
		},
	},
	required: [
		"event_type",
		"market",
		"user",
		"side",
		"size",
		"fee_rate_bps",
		"price",
		"outcome",
		"outcome_index",
		"transaction_hash",
		"timestamp",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const PolymarketAPIResponse_MarketTradeEvent_Array_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			items: {
				$ref: "#/components/schemas/MarketTradeEvent",
			},
			type: "array",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesAPIResponseSchema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesNFTAPIResponse_string_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "string",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesNFTTransactionSchema = {
	properties: {
		data: {
			type: "string",
		},
		value: {
			type: "string",
		},
		to: {
			type: "string",
		},
		from: {
			type: "string",
		},
		gasPrice: {
			type: "string",
		},
		gasLimit: {
			type: "string",
		},
		maxPriorityFeePerGas: {
			type: "string",
		},
		maxFeePerGas: {
			type: "string",
		},
		nonce: {
			type: "number",
			format: "double",
		},
		type: {
			type: "number",
			format: "double",
		},
		chainId: {
			type: "string",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesNFTExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
		},
		message: {
			type: "string",
		},
		success: {
			type: "boolean",
		},
		user_op: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
		},
		params: {
			items: {},
			type: "array",
		},
		function: {
			type: "string",
		},
		transaction: {
			$ref: "#/components/schemas/RamsesNFTTransaction",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
} as const;

export const RamsesNFTAPIResponse_RamsesNFTExecuteFunctionResult_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/RamsesNFTExecuteFunctionResult",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesNFTInputBodySchema = {
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		data: {
			type: "string",
			description: "The data to be sent.",
		},
		value: {
			type: "string",
			description: "The value to be sent.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce for the transaction.",
		},
		simulate: {
			type: "boolean",
			description: "Whether to simulate the transaction.",
		},
		gas: {
			type: "string",
			description: "The gas for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Whether to perform a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Whether the transaction is from an externally owned account.",
		},
		contract_address: {
			type: "string",
			description: "The contract address.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Whether to broadcast the transaction.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "Whether to always increment the nonce.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount involved in the transaction.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
		tokenId: {
			type: "string",
		},
		lock_duration: {
			type: "string",
		},
		delegatee: {
			type: "string",
		},
		expiry: {
			type: "string",
		},
		v: {
			type: "number",
			format: "double",
		},
		r: {
			type: "string",
		},
		s: {
			type: "string",
		},
		from: {
			type: "string",
		},
		operator: {
			type: "string",
		},
		_proxy: {
			type: "string",
		},
		_team: {
			type: "string",
		},
		_block: {
			type: "string",
		},
		_t: {
			type: "string",
		},
		_idx: {
			type: "string",
		},
		token: {
			type: "string",
		},
		artProxy: {
			type: "string",
		},
		voter: {
			type: "string",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const LockedDataSchema = {
	properties: {
		amount: {
			type: "string",
		},
		end: {
			type: "string",
		},
	},
	required: ["amount", "end"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesNFTAPIResponse_LockedData_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/LockedData",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesRouterTransactionSchema = {
	description: "Interface representing a Ramses Router transaction.",
	properties: {
		data: {
			type: "string",
			description: "The data for the transaction.",
		},
		value: {
			type: "string",
			description: "The value for the transaction.",
		},
		to: {
			type: "string",
			description: "The destination address for the transaction.",
		},
		from: {
			type: "string",
			description: "The source address for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "(Optional) The gas price for the transaction.",
		},
		gasLimit: {
			type: "string",
			description: "(Optional) The gas limit for the transaction.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description:
				"(Optional) The maximum priority fee per gas for the transaction, in wei.",
		},
		maxFeePerGas: {
			type: "string",
			description:
				"(Optional) The maximum fee per gas for the transaction, in wei.",
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce for the transaction.",
		},
		type: {
			type: "number",
			format: "double",
			description: "(Optional) The type of the transaction.",
		},
		chainId: {
			type: "string",
			description: "The chain ID for the transaction.",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesRouterExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description: "The simulation result of the transaction.",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description: "The broadcasted transaction details.",
		},
		message: {
			type: "string",
			description:
				"A message providing additional information about the execution result.",
		},
		success: {
			type: "boolean",
			description: "Indicates if the execution was successful.",
		},
		user_op: {
			type: "string",
			description: "Indicates if the execution was successful.",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "The data returned by the executed function.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters passed to the executed function.",
		},
		function: {
			type: "string",
			description: "The name of the executed function.",
		},
		transaction: {
			$ref: "#/components/schemas/RamsesRouterTransaction",
			description: "The transaction details.",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
} as const;

export const RamsesRouterAPIResponse_RamsesRouterExecuteFunctionResult_Schema =
	{
		properties: {
			success: {
				type: "boolean",
			},
			message: {
				type: "string",
			},
			data: {
				$ref: "#/components/schemas/RamsesRouterExecuteFunctionResult",
			},
		},
		required: ["success", "message"],
		type: "object",
		additionalProperties: false,
	} as const;

export const RamsesRouterInputBodySchema = {
	description: `Interface representing the input body for the Ramses Router.
Extends the InputBody interface.`,
	properties: {
		to: {
			type: "string",
			description: "The destination address.",
		},
		data: {
			type: "string",
			description: "The data to be sent.",
		},
		value: {
			type: "string",
			description: "The value to be sent.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce for the transaction.",
		},
		simulate: {
			type: "boolean",
			description: "Indicates if the transaction is a simulation.",
		},
		gas: {
			type: "string",
			description: "The gas for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Whether to perform a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Whether the transaction is from an externally owned account.",
		},
		contract_address: {
			type: "string",
			description: "The contract address.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Whether to broadcast the transaction.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "Whether to always increment the nonce.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount involved in the transaction.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts of the asset.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
		routes: {
			items: {
				properties: {
					stable: {
						type: "boolean",
					},
					to: {
						type: "string",
					},
					from: {
						type: "string",
					},
				},
				required: ["stable", "to", "from"],
				type: "object",
			},
			type: "array",
			description: `The routes for the asset transfer.
Each route contains the source, destination, and a flag indicating if the route is stable.`,
		},
		deadline: {
			type: "string",
			description: "The deadline for the transaction.",
		},
		tokenA: {
			type: "string",
			description: "The first token involved in the transaction.",
		},
		tokenB: {
			type: "string",
			description: "The second token involved in the transaction.",
		},
		stable: {
			type: "boolean",
			description: "Indicates if the transaction is stable.",
		},
		amountADesired: {
			type: "string",
			description: "The desired amount of token A.",
		},
		amountBDesired: {
			type: "string",
			description: "The desired amount of token B.",
		},
		amountAMin: {
			type: "string",
			description: "The minimum amount of token A.",
		},
		amountBMin: {
			type: "string",
			description: "The minimum amount of token B.",
		},
		token: {
			type: "string",
			description: "The token involved in the transaction.",
		},
		liquidity: {
			type: "string",
			description: "The liquidity amount.",
		},
		amountTokenDesired: {
			type: "string",
			description: "The desired amount of the token.",
		},
		amountTokenMin: {
			type: "string",
			description: "The minimum amount of the token.",
		},
		amountETHMin: {
			type: "string",
			description: "The minimum amount of ETH.",
		},
		approveMax: {
			type: "boolean",
			description: "Indicates if the maximum approval is granted.",
		},
		v: {
			type: "number",
			format: "double",
			description: "The v parameter for the transaction signature.",
		},
		r: {
			type: "string",
			description: "The r parameter for the transaction signature.",
		},
		s: {
			type: "string",
			description: "The s parameter for the transaction signature.",
		},
		amountIn: {
			type: "string",
			description: "The input amount for the transaction.",
		},
		amountOutMin: {
			type: "string",
			description: "The minimum output amount for the transaction.",
		},
		tokenFrom: {
			type: "string",
			description: "The source token for the transaction.",
		},
		tokenTo: {
			type: "string",
			description: "The destination token for the transaction.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesRouterAPIResponse_string_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "string",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesRouterAPIResponse__amountOut_string__stable_boolean__Schema =
	{
		properties: {
			success: {
				type: "boolean",
			},
			message: {
				type: "string",
			},
			data: {
				properties: {
					stable: {
						type: "boolean",
					},
					amountOut: {
						type: "string",
					},
				},
				required: ["stable", "amountOut"],
				type: "object",
			},
		},
		required: ["success", "message"],
		type: "object",
		additionalProperties: false,
	} as const;

export const RamsesRouterAPIResponse_string_Array_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			items: {
				type: "string",
			},
			type: "array",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesRouterAPIResponse__reserve0_string__reserve1_string__Schema =
	{
		properties: {
			success: {
				type: "boolean",
			},
			message: {
				type: "string",
			},
			data: {
				properties: {
					reserve1: {
						type: "string",
					},
					reserve0: {
						type: "string",
					},
				},
				required: ["reserve1", "reserve0"],
				type: "object",
			},
		},
		required: ["success", "message"],
		type: "object",
		additionalProperties: false,
	} as const;

export const RamsesRouterAPIResponse_boolean_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "boolean",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesRouterAPIResponse__amountA_string__amountB_string__liquidity_string____Schema =
	{
		properties: {
			success: {
				type: "boolean",
			},
			message: {
				type: "string",
			},
			data: {
				properties: {
					liquidity: {
						type: "string",
					},
					amountB: {
						type: "string",
					},
					amountA: {
						type: "string",
					},
				},
				required: ["liquidity", "amountB", "amountA"],
				type: "object",
			},
		},
		required: ["success", "message"],
		type: "object",
		additionalProperties: false,
	} as const;

export const RamsesRouterAPIResponse__amountA_string__amountB_string__Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			properties: {
				amountB: {
					type: "string",
				},
				amountA: {
					type: "string",
				},
			},
			required: ["amountB", "amountA"],
			type: "object",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const SortedTokensSchema = {
	properties: {
		token0: {
			type: "string",
		},
		token1: {
			type: "string",
		},
	},
	required: ["token0", "token1"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesRouterAPIResponse_SortedTokens_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/SortedTokens",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesVoterAPIResponse_string_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "string",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesVoterAPIResponse_boolean_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "boolean",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesVoterTransactionSchema = {
	description: "Represents a transaction for the Ramses Voter.",
	properties: {
		data: {
			type: "string",
			description: "The data payload of the transaction.",
		},
		value: {
			type: "string",
			description: "The value to be transferred in the transaction.",
		},
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		from: {
			type: "string",
			description: "The sender address of the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction (optional).",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction (optional).",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description:
				"The maximum priority fee per gas for the transaction (optional).",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas for the transaction (optional).",
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce of the transaction.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of the transaction (optional).",
		},
		chainId: {
			type: "string",
			description: "The chain ID of the blockchain network.",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesVoterExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description: "The simulation results.",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description: "The broadcasted transaction data.",
		},
		message: {
			type: "string",
			description: "The error message.",
		},
		success: {
			type: "boolean",
			description: "Indicates if the function was successful.",
		},
		user_op: {
			type: "string",
			description: "The user operation.",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "The transaction data.",
		},
		params: {
			items: {},
			type: "array",
			description: "The function parameters.",
		},
		function: {
			type: "string",
			description: "The function name.",
		},
		transaction: {
			$ref: "#/components/schemas/RamsesVoterTransaction",
			description: "The transaction data.",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
	description:
		"Represents the result of executing a function on the Ramses Voter.",
} as const;

export const RamsesVoterAPIResponse_RamsesVoterExecuteFunctionResult_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/RamsesVoterExecuteFunctionResult",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const RamsesVoterInputBodySchema = {
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		data: {
			type: "string",
			description: "Additional data for the transaction.",
		},
		value: {
			type: "string",
			description: "The value associated with the transaction.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce for the transaction.",
		},
		simulate: {
			type: "boolean",
			description: "Indicates if the transaction should be simulated.",
		},
		gas: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Indicates if the transaction is a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Indicates if the transaction is from an Externally Owned Account.",
		},
		contract_address: {
			type: "string",
			description: "The contract address involved in the transaction.",
		},
		token_id: {
			type: "string",
			description: "The token ID involved in the transaction.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Indicates if the transaction should be broadcasted.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "Indicates if the nonce should always be incremented.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount to be transferred.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
		pool: {
			type: "string",
			description: "The pool involved in the transaction.",
		},
		gauge: {
			type: "string",
			description: "The gauge involved in the transaction.",
		},
		weights: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The weights for the transaction.",
		},
		pool_vote: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The pool votes for the transaction.",
		},
		bribes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The bribes for the transaction.",
		},
		tokens: {
			items: {
				items: {
					type: "string",
				},
				type: "array",
			},
			type: "array",
			description: "The tokens involved in the transaction.",
		},
		fees: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The fees for the transaction.",
		},
		gauges: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The gauges involved in the transaction.",
		},
		token: {
			type: "string",
			description: "The token involved in the transaction.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const RippleInputSchema = {
	description: "Represents the input data required for Ripple transactions.",
	properties: {
		network: {
			type: "string",
			description:
				"The network on which the transaction will be executed. This is optional.",
		},
		private_key: {
			type: "string",
			description:
				"The private key used for signing the transaction. This is optional.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const RippleTransactionOutputSchema = {
	description: "Represents the output of a Ripple transaction.",
	properties: {
		signedTx: {
			type: "string",
			description: "The signed transaction.",
		},
		transaction_hash: {
			type: "string",
			description: "The transaction hash.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const RippleAPIResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/RippleTransactionOutput",
			description: "The data associated with the Ripple response.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const RippleTransactionInputSchema = {
	description: "Represents the input data for a Ripple transaction.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		value: {
			type: "number",
			format: "double",
			description: "The amount to be sent.",
		},
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		compress: {
			type: "boolean",
			description: "Indicates whether to compress the public key.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const SolanaInputSchema = {
	description:
		"Represents the input parameters required for a Solana transaction.",
	properties: {
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		private_key: {
			type: "string",
			description: "The private key of the account.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const SolanaTransactionOutputSchema = {
	description: "Represents the output of a Solana transaction.",
	properties: {
		signedTx: {
			type: "string",
			description: "The signed transaction.",
		},
		transaction_hash: {
			type: "string",
			description: "The transaction hash.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const SolanaAPIResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/SolanaTransactionOutput",
			description: "The data associated with the Solana response.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const SolanaSignTransactionInputSchema = {
	description: "Represents the input required to sign a Solana transaction.",
	properties: {
		unsigned_tx: {
			type: "string",
			description: "The transaction to be signed.",
		},
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
	},
	required: ["unsigned_tx"],
	type: "object",
	additionalProperties: false,
} as const;

export const SolanaTransactionInputSchema = {
	description: "Represents the input data required for a Solana transaction.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		value: {
			type: "number",
			format: "double",
			description: "The amount of value to be transferred in the transaction.",
		},
		network: {
			type: "string",
			description: "The network on which the transaction is to be executed.",
		},
		compress: {
			type: "boolean",
			description:
				"Indicates whether the transaction data should be compressed.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const ThenaAPIResponseSchema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ThorSwapAPIResponse_Quote_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/Quote",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ThorSwapAPIResponse_string_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "string",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const GasPriceSchema = {
	description:
		"Represents the gas price information for a specific blockchain.",
	properties: {
		lastTimestamp: {
			type: "number",
			format: "double",
			description: "The timestamp of the last recorded gas price.",
		},
		chainId: {
			type: "string",
			description: "The identifier of the blockchain.",
		},
		unitName: {
			type: "string",
			description: "The unit name of the gas price (e.g., Gwei, Wei).",
		},
		history: {
			items: {
				properties: {
					timestamp: {
						type: "number",
						format: "double",
					},
					value: {
						type: "number",
						format: "double",
					},
				},
				required: ["timestamp", "value"],
				type: "object",
			},
			type: "array",
			description:
				"The historical gas prices with their respective timestamps.",
		},
		average24h: {
			type: "number",
			format: "double",
			description: "The average gas price over the last 24 hours.",
		},
		average7d: {
			type: "number",
			format: "double",
			description: "The average gas price over the last 7 days.",
		},
	},
	required: [
		"lastTimestamp",
		"chainId",
		"unitName",
		"history",
		"average24h",
		"average7d",
	],
	type: "object",
	additionalProperties: false,
} as const;

export const ThorSwapAPIResponse_GasPrice_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/GasPrice",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const ThorSwapAPIResponse_string_Array_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			items: {
				type: "string",
			},
			type: "array",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const TronInputSchema = {
	description:
		"Represents the input data required for Tron network operations.",
	properties: {
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		private_key: {
			type: "string",
			description: "The private key of the account.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const TronTransactionOutputSchema = {
	description: "Represents the output of a Tron transaction.",
	properties: {
		signedTx: {
			type: "string",
			description: "The signed transaction.",
		},
		transaction_hash: {
			type: "string",
			description: "The transaction hash.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const TronAPIResponseSchema = {
	properties: {
		success: {
			type: "boolean",
			description: "The success status of the operation.",
		},
		message: {
			type: "string",
			description: "The message associated with the operation.",
		},
		body: {
			$ref: "#/components/schemas/InputBody",
			description: "The data associated with the operation.",
		},
		address: {
			type: "string",
			description: "The address associated with the operation.",
		},
		data: {
			$ref: "#/components/schemas/TronTransactionOutput",
			description: "The data associated with the Tron response.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const TronTransactionInputSchema = {
	description: "Represents an input for a Tron transaction.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		value: {
			type: "number",
			format: "double",
			description: "The amount to be sent.",
		},
		network: {
			type: "string",
			description: "The network on which the transaction is taking place.",
		},
		compress: {
			type: "boolean",
			description: "Indicates whether to compress the public key.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const UniswapV2TransactionSchema = {
	description: "Represents a UniswapV2 transaction.",
	properties: {
		data: {
			type: "string",
			description: "The data to include in the transaction.",
		},
		value: {
			type: "string",
			description: "The value to send with the transaction.",
		},
		to: {
			type: "string",
			description: "The address of the recipient.",
		},
		from: {
			type: "string",
			description: "The address of the sender.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce for the transaction.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		chainId: {
			type: "string",
			description: "The chain ID for the transaction.",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const UniswapV2ExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description: "The simulation data.",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description: "The broadcasted transaction.",
		},
		message: {
			type: "string",
			description: "The broadcasted result of the transaction.",
		},
		success: {
			type: "boolean",
			description: "The message returned by the API.",
		},
		user_op: {
			type: "string",
			description: "Indicates whether the function was successful.",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "The data returned by the API.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters passed to the function.",
		},
		function: {
			type: "string",
			description: "The name of the function executed.",
		},
		transaction: {
			$ref: "#/components/schemas/UniswapV2Transaction",
			description: "The UniswapV2 transaction.",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
	description: "Represents the result of executing a UniswapV2 function.",
} as const;

export const UniswapV2APIResponse_UniswapV2ExecuteFunctionResult_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/UniswapV2ExecuteFunctionResult",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const UniswapV2InputBodySchema = {
	description: "Represents the input body for a UniswapV2 transaction.",
	properties: {
		to: {
			type: "string",
			description: "The address of the token to swap.",
		},
		data: {
			type: "string",
			description: "The address of the token to swap.",
		},
		value: {
			type: "string",
			description: "The address of the token to swap.",
		},
		gasLimit: {
			type: "string",
			description: "The address of the token to swap.",
		},
		nonce: {
			type: "string",
			description: "The address of the token to swap.",
		},
		simulate: {
			type: "boolean",
			description: "The address of the token to swap.",
		},
		gas: {
			type: "string",
			description: "The address of the token to swap.",
		},
		gasPrice: {
			type: "string",
			description: "The address of the token to swap.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "The address of the token to swap.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description: "The address of the token to swap.",
		},
		contract_address: {
			type: "string",
			description: "The address of the token to swap.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "The address of the token to swap.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "The address of the token to swap.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The address of the token to swap.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
		amountIn: {
			type: "string",
			description: "The address of the token to swap.",
		},
		amountInMax: {
			type: "string",
			description: "The address of the token to swap.",
		},
		amountOut: {
			type: "string",
			description: "The address of the token to swap.",
		},
		amountOutMin: {
			type: "string",
			description: "The address of the token to swap.",
		},
		amountADesired: {
			type: "string",
			description: "The address of the token to swap.",
		},
		amountBDesired: {
			type: "string",
			description: "The address of the token to swap.",
		},
		amountAMin: {
			type: "string",
			description: "The address of the token to swap.",
		},
		amountBMin: {
			type: "string",
			description: "The address of the token to swap.",
		},
		amountETHMin: {
			type: "string",
			description: "The address of the token to swap.",
		},
		amountTokenDesired: {
			type: "string",
			description: "The address of the token to swap.",
		},
		amountTokenMin: {
			type: "string",
			description: "The address of the token to swap.",
		},
		liquidity: {
			type: "string",
			description: "The address of the token to swap.",
		},
		path: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The address of the token to swap.",
		},
		deadline: {
			type: "string",
			description: "The address of the token to swap.",
		},
		approveMax: {
			type: "boolean",
			description: "The address of the token to swap.",
		},
		v: {
			type: "number",
			format: "double",
			description: "The address of the token to swap.",
		},
		r: {
			type: "string",
			description: "The address of the token to swap.",
		},
		s: {
			type: "string",
			description: "The address of the token to swap.",
		},
		tokenA: {
			type: "string",
			description: "The address of the token to swap.",
		},
		tokenB: {
			type: "string",
			description: "The address of the token to swap.",
		},
		reserveA: {
			type: "string",
			description: "The address of the token to swap.",
		},
		reserveB: {
			type: "string",
			description: "The address of the token to swap.",
		},
		reserve: {
			type: "string",
			description: "The address of the token to swap.",
		},
		reserveETH: {
			type: "string",
			description: "The address of the token to swap.",
		},
		token: {
			type: "string",
			description: "The address of the token to swap.",
		},
		amountA: {
			type: "string",
			description: "The address of the token to swap.",
		},
		reserveIn: {
			type: "string",
			description: "The address of the token to swap.",
		},
		reserveOut: {
			type: "string",
			description: "The address of the token to swap.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const UniswapV3TransactionSchema = {
	description: "Represents a Uniswap V3 transaction.",
	properties: {
		data: {
			type: "string",
			description: "The data payload of the transaction.",
		},
		value: {
			type: "string",
			description: "The value to be sent with the transaction, in wei.",
		},
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		from: {
			type: "string",
			description: "The sender address of the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction, in wei (optional).",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction (optional).",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description:
				"The maximum priority fee per gas for EIP-1559 transactions, in wei (optional).",
		},
		maxFeePerGas: {
			type: "string",
			description:
				"The maximum fee per gas for EIP-1559 transactions, in wei (optional).",
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce of the transaction.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of the transaction (optional).",
		},
		chainId: {
			type: "string",
			description: "The chain ID of the network where the transaction is sent.",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const UniswapV3ExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description:
				"Optional response containing the simulation of asset changes.",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description:
				"Optional response indicating whether the transaction was broadcasted.",
		},
		message: {
			type: "string",
			description:
				"Optional message providing additional information about the execution.",
		},
		success: {
			type: "boolean",
			description: "Indicates whether the function execution was successful.",
		},
		user_op: {
			type: "string",
			description: "Optional user operation identifier.",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "Optional transaction data.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters passed to the executed function.",
		},
		function: {
			type: "string",
			description: "The name of the executed function.",
		},
		transaction: {
			$ref: "#/components/schemas/UniswapV3Transaction",
			description: "The transaction details of the executed function.",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
} as const;

export const UniswapV3NFTAPIResponse_UniswapV3ExecuteFunctionResult_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/UniswapV3ExecuteFunctionResult",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const UniswapV3InputBodySchema = {
	description: `Interface representing the input body for Uniswap V3 operations.
Extends the InputBody interface.`,
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		data: {
			type: "string",
			description: "The data to be sent with the transaction.",
		},
		value: {
			type: "string",
			description: "The value of the transaction.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce of the transaction.",
		},
		simulate: {
			type: "boolean",
			description: "Indicates if the transaction should be simulated.",
		},
		gas: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Indicates if the transaction is a dry run.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Indicates if the transaction is from an externally owned account.",
		},
		contract_address: {
			type: "string",
			description: "The address of the contract.",
		},
		token_id: {
			type: "string",
			description: "The token ID.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Indicates if the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Indicates if the transaction should be broadcasted.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "Indicates if the nonce should always be incremented.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount to be transferred.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
		token0: {
			type: "string",
			description: "The address of the first token.",
		},
		token1: {
			type: "string",
			description: "The address of the second token.",
		},
		fee: {
			type: "number",
			format: "double",
			description: "The fee tier of the pool.",
		},
		tickLower: {
			type: "number",
			format: "double",
			description: "The lower tick of the position.",
		},
		tickUpper: {
			type: "number",
			format: "double",
			description: "The upper tick of the position.",
		},
		amount0Desired: {
			type: "string",
			description: "The desired amount of token0.",
		},
		amount1Desired: {
			type: "string",
			description: "The desired amount of token1.",
		},
		amount0Min: {
			type: "string",
			description: "The minimum amount of token0.",
		},
		amount1Min: {
			type: "string",
			description: "The minimum amount of token1.",
		},
		recipient: {
			type: "string",
			description: "The recipient address.",
		},
		deadline: {
			type: "string",
			description: "The deadline for the transaction.",
		},
		tokenId: {
			type: "string",
			description: "The ID of the token.",
		},
		liquidity: {
			type: "string",
			description: "The liquidity of the position.",
		},
		token: {
			type: "string",
			description: "The address of the token.",
		},
		amount0Max: {
			type: "string",
			description: "The maximum amount of token0.",
		},
		amount1Max: {
			type: "string",
			description: "The maximum amount of token1.",
		},
		sqrtPriceX96: {
			type: "string",
			description: "The sqrt price of the pool.",
		},
		operator: {
			type: "string",
			description: "The operator address.",
		},
		spender: {
			type: "string",
			description: "The address of the spender.",
		},
		v: {
			type: "number",
			format: "double",
			description: "The recovery id of the signature.",
		},
		r: {
			type: "string",
			description: "The r value of the signature.",
		},
		s: {
			type: "string",
			description: "The s value of the signature.",
		},
		amountMinimum: {
			type: "string",
			description: "The minimum amount.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const UniswapV3NFTAPIResponse_any_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const UniswapV3NFTAPIResponse_string_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "string",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const UniswapV3NFTAPIResponse_boolean_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "boolean",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const UniswapV3APIResponse_UniswapV3ExecuteFunctionResult_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/UniswapV3ExecuteFunctionResult",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const UniswapV3APIResponse_string_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "string",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const VeTheNFTAPIResponse_string_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "string",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const VeTheNFTAPIResponse_boolean_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			type: "boolean",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const VeTheNFTAPIResponse_LockedData_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/LockedData",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const VeNFTTransactionSchema = {
	description: "Represents a transaction involving a VeNFT.",
	properties: {
		data: {
			type: "string",
			description: "The data payload of the transaction.",
		},
		value: {
			type: "string",
			description: "The value being transferred in the transaction.",
		},
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		from: {
			type: "string",
			description: "The sender address of the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas unit for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas unit for the transaction.",
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce of the transaction.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of the transaction.",
		},
		chainId: {
			type: "string",
			description: "The chain ID where the transaction is executed.",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const VeNFTExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description: "Optional response from simulating asset changes.",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description: "Optional response from broadcasting the raw transaction.",
		},
		message: {
			type: "string",
			description:
				"Optional message providing additional information about the execution.",
		},
		success: {
			type: "boolean",
			description: "Optional flag indicating if the execution was successful.",
		},
		user_op: {
			type: "string",
			description: "Optional user operation identifier.",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "Optional additional transaction data.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters passed to the function.",
		},
		function: {
			type: "string",
			description: "The name of the executed function.",
		},
		transaction: {
			$ref: "#/components/schemas/VeNFTTransaction",
			description: "The transaction associated with the function execution.",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
	description: "Represents the result of executing a VeNFT function.",
} as const;

export const VeTheNFTAPIResponse_VeNFTExecuteFunctionResult_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/VeNFTExecuteFunctionResult",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const VeNFTInputBodySchema = {
	description: "Interface representing the input body for VeNFT operations.",
	properties: {
		to: {
			type: "string",
			description: "The recipient address.",
		},
		data: {
			type: "string",
			description: "Additional data for the transaction.",
		},
		value: {
			type: "string",
			description: "The value of the transaction.",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		nonce: {
			type: "string",
			description: "The nonce for the transaction.",
		},
		simulate: {
			type: "boolean",
			description: "Indicates whether to simulate the transaction.",
		},
		gas: {
			type: "string",
			description: "The gas limit for the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction.",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description: "Indicates whether to perform a dry run of the transaction.",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Indicates whether the transaction is from an externally owned account.",
		},
		contract_address: {
			type: "string",
			description: "The contract address involved in the transaction.",
		},
		token_id: {
			type: "string",
			description: "The token ID involved in the transaction.",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Indicates whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Indicates whether to broadcast the transaction.",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description: "Indicates whether to always increment the nonce.",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount to be transferred.",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
		lock_duration: {
			type: "string",
			description: "The lock duration for the transaction.",
		},
		spender: {
			type: "string",
			description: "The spender address for the transaction.",
		},
		operator: {
			type: "string",
			description: "The operator address for the transaction.",
		},
		tokenId: {
			type: "string",
			description: "The token ID involved in the transaction.",
		},
		lock_value: {
			type: "string",
			description: "The lock value for the transaction.",
		},
		delegatee: {
			type: "string",
			description: "The delegatee address for the transaction.",
		},
		expiry: {
			type: "string",
			description: "The expiry time for the transaction.",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;

export const UserPointHistoryDataSchema = {
	properties: {
		bias: {
			type: "string",
		},
		slope: {
			type: "string",
		},
		ts: {
			type: "string",
		},
		blk: {
			type: "string",
		},
	},
	required: ["bias", "slope", "ts", "blk"],
	type: "object",
	additionalProperties: false,
} as const;

export const VeTheNFTAPIResponse_UserPointHistoryData_Schema = {
	properties: {
		success: {
			type: "boolean",
		},
		message: {
			type: "string",
		},
		data: {
			$ref: "#/components/schemas/UserPointHistoryData",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const VeTheNftVoterAPIResponse_string_Schema = {
	description:
		"Represents the structure of the API response for the VeTheNftVoter.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description: `A message providing additional information about the
API response.`,
		},
		data: {
			type: "string",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const VeTheNftVoterAPIResponse_boolean_Schema = {
	description:
		"Represents the structure of the API response for the VeTheNftVoter.",
	properties: {
		success: {
			type: "boolean",
			description: "Indicates whether the API request was successful.",
		},
		message: {
			type: "string",
			description: `A message providing additional information about the
API response.`,
		},
		data: {
			type: "boolean",
			description: "The data returned by the API, if any.",
		},
	},
	required: ["success", "message"],
	type: "object",
	additionalProperties: false,
} as const;

export const VeTheNftVoterTransactionSchema = {
	description: "Represents a transaction for the VeTheNftVoter.",
	properties: {
		data: {
			type: "string",
			description: "The data payload of the transaction.",
		},
		value: {
			type: "string",
			description: "The value to be transferred in the transaction, in wei.",
		},
		to: {
			type: "string",
			description: "The recipient address of the transaction.",
		},
		from: {
			type: "string",
			description: "The sender address of the transaction.",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction, in wei (optional).",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction (optional).",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description:
				"The maximum priority fee per gas for the transaction, in wei (optional).",
		},
		maxFeePerGas: {
			type: "string",
			description:
				"The maximum fee per gas for the transaction, in wei (optional).",
		},
		nonce: {
			type: "number",
			format: "double",
			description: "The nonce of the transaction.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of the transaction (optional).",
		},
		chainId: {
			type: "string",
			description:
				"The chain ID of the network where the transaction is to be executed.",
		},
	},
	required: ["data", "value", "to", "from", "nonce", "chainId"],
	type: "object",
	additionalProperties: false,
} as const;

export const VeTheNftVoterExecuteFunctionResultSchema = {
	properties: {
		simulation: {
			$ref: "#/components/schemas/SimulateAssetChangesResponse",
			description: "Optional simulation response indicating asset changes.",
		},
		broadcasted: {
			$ref: "#/components/schemas/BroadCastRawTransactionResponse",
			description: "Optional response from broadcasting the transaction.",
		},
		message: {
			type: "string",
			description:
				"Optional message providing additional information about the execution.",
		},
		success: {
			type: "boolean",
			description:
				"Optional flag indicating whether the execution was successful.",
		},
		user_op: {
			type: "string",
			description: "Optional user operation identifier.",
		},
		data: {
			$ref: "#/components/schemas/Transaction",
			description: "Optional data related to the transaction.",
		},
		params: {
			items: {},
			type: "array",
			description: "The parameters passed to the function.",
		},
		function: {
			type: "string",
			description: "The name of the function that was executed.",
		},
		transaction: {
			$ref: "#/components/schemas/VeTheNftVoterTransaction",
			description: "The transaction associated with the execution.",
		},
	},
	required: ["params", "function", "transaction"],
	type: "object",
	description:
		"Represents the result of executing a function in the VeTheNftVoter.",
} as const;

export const VeTheNftVoterAPIResponse_VeTheNftVoterExecuteFunctionResult_Schema =
	{
		description:
			"Represents the structure of the API response for the VeTheNftVoter.",
		properties: {
			success: {
				type: "boolean",
				description: "Indicates whether the API request was successful.",
			},
			message: {
				type: "string",
				description: `A message providing additional information about the
API response.`,
			},
			data: {
				$ref: "#/components/schemas/VeTheNftVoterExecuteFunctionResult",
				description: "The data returned by the API, if any.",
			},
		},
		required: ["success", "message"],
		type: "object",
		additionalProperties: false,
	} as const;

export const VeTheNftVoterInputBodySchema = {
	properties: {
		to: {
			type: "string",
			description: "The recipient address of the transaction (optional).",
		},
		data: {
			type: "string",
			description: "The data payload of the transaction (optional).",
		},
		value: {
			type: "string",
			description:
				"The value to be sent with the transaction, in wei (optional).",
		},
		gasLimit: {
			type: "string",
			description: "The gas limit for the transaction (optional).",
		},
		nonce: {
			type: "string",
			description: "The nonce of the transaction (optional).",
		},
		simulate: {
			type: "boolean",
			description: "Indicates whether to simulate the transaction (optional).",
		},
		gas: {
			type: "string",
			description: "The gas limit for the transaction (optional).",
		},
		gasPrice: {
			type: "string",
			description: "The gas price for the transaction, in wei (optional).",
		},
		maxFeePerGas: {
			type: "string",
			description: "The maximum fee per gas.",
		},
		maxPriorityFeePerGas: {
			type: "string",
			description: "The maximum priority fee per gas.",
		},
		chain_id: {
			type: "string",
			description: "The chain ID.",
		},
		encoding: {
			type: "string",
			description: "The encoding type.",
		},
		type: {
			type: "number",
			format: "double",
			description: "The type of transaction.",
		},
		accessList: {
			items: {
				$ref: "#/components/schemas/AccessTuple",
			},
			type: "array",
			description: "The access list for the transaction.",
		},
		blobGas: {
			type: "string",
			description: "The gas for blob transactions.",
		},
		blobGasFeeCap: {
			type: "string",
			description: "The gas fee cap for blob transactions.",
		},
		blobHashes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The hashes for blob transactions.",
		},
		dryrun: {
			type: "boolean",
			description:
				"Indicates whether to perform a dry run of the transaction (optional).",
		},
		input: {
			type: "string",
			description: "The input data.",
		},
		EOA: {
			type: "boolean",
			description:
				"Indicates whether the transaction is from an externally owned account (optional).",
		},
		contract_address: {
			type: "string",
			description:
				"The contract address involved in the transaction (optional).",
		},
		token_id: {
			type: "string",
			description: "The token ID involved in the transaction (optional).",
		},
		token_ids: {
			type: "string",
			description: "The token IDs.",
		},
		approved: {
			type: "boolean",
			description: "Whether the transaction is approved.",
		},
		broadcast: {
			type: "boolean",
			description: "Indicates whether to broadcast the transaction (optional).",
		},
		alwaysIncrementNonce: {
			type: "boolean",
			description:
				"Indicates whether to always increment the nonce (optional).",
		},
		asset: {
			type: "string",
			description: "The asset involved in the transaction.",
		},
		amount: {
			type: "string",
			description: "The amount to be transferred (optional).",
		},
		interestRateMode: {
			type: "number",
			format: "double",
			description: "The interest rate mode.",
		},
		referralCode: {
			type: "number",
			format: "double",
			description: "The referral code.",
		},
		onBehalfOf: {
			type: "string",
			description: "The address on behalf of which the transaction is made.",
		},
		receiverAddress: {
			type: "string",
			description: "The receiver address.",
		},
		assets: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The assets involved in the transaction.",
		},
		amounts: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The amounts involved in the transaction.",
		},
		modes: {
			items: {
				type: "number",
				format: "double",
			},
			type: "array",
			description: "The modes of the transaction.",
		},
		params: {
			type: "string",
			description: "Additional parameters.",
		},
		rateMode: {
			type: "number",
			format: "double",
			description: "The rate mode.",
		},
		useAsCollateral: {
			type: "boolean",
			description: "Whether to use as collateral.",
		},
		collateralAsset: {
			type: "string",
			description: "The collateral asset.",
		},
		debtAsset: {
			type: "string",
			description: "The debt asset.",
		},
		user: {
			type: "string",
			description: "The user involved in the transaction.",
		},
		debtToCover: {
			type: "string",
			description: "The debt to cover.",
		},
		receiveAToken: {
			type: "boolean",
			description: "Whether to receive a token.",
		},
		inputTokens: {
			items: {
				$ref: "#/components/schemas/TokenAmount",
			},
			type: "array",
			description: "The input tokens.",
		},
		outputTokens: {
			items: {
				$ref: "#/components/schemas/TokenProportion",
			},
			type: "array",
			description: "The output tokens.",
		},
		slippageLimitPercent: {
			type: "number",
			format: "double",
			description: "The slippage limit percentage.",
		},
		minHealthFactor: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The minimum health factor.",
		},
		premiums: {
			anyOf: [
				{
					items: {
						type: "string",
					},
					type: "array",
				},
				{
					items: {
						type: "number",
						format: "double",
					},
					type: "array",
				},
			],
			description: "The premiums.",
		},
		initiator: {
			type: "string",
			description: "The initiator of the transaction.",
		},
		role: {
			type: "string",
			description: "The role of the user.",
		},
		account: {
			type: "string",
			description: "The account involved in the transaction.",
		},
		initialDeposit: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The initial deposit.",
		},
		borrowAmount: {
			anyOf: [
				{
					type: "string",
				},
				{
					type: "number",
					format: "double",
				},
			],
			description: "The borrow amount.",
		},
		pool: {
			type: "string",
			description: "The pool address involved in the transaction (optional).",
		},
		gauge: {
			type: "string",
			description: "The gauge address involved in the transaction (optional).",
		},
		weights: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The weights for the pool votes (optional).",
		},
		pool_vote: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The pool votes (optional).",
		},
		gauge_type: {
			type: "string",
			description: "The type of the gauge (optional).",
		},
		bribes: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The bribes involved in the transaction (optional).",
		},
		tokens: {
			items: {
				items: {
					type: "string",
				},
				type: "array",
			},
			type: "array",
			description: "The tokens involved in the transaction (optional).",
		},
		fees: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The fees involved in the transaction (optional).",
		},
		gauges: {
			items: {
				type: "string",
			},
			type: "array",
			description: "The gauges involved in the transaction (optional).",
		},
	},
	type: "object",
	additionalProperties: false,
} as const;
