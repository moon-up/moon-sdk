import type { ReactNode } from "react";
// biome-ignore lint/style/useImportType: <explanation>
import React from "react";
import { WagmiProvider, createConfig } from "wagmi";

import {
	coinbaseWallet,
	injected,
	metaMask,
	safe,
	walletConnect,
} from "@wagmi/connectors";
import {
	arbitrum,
	arbitrumGoerli,
	arbitrumNova,
	arbitrumSepolia,
	aurora,
	auroraTestnet,
	avalanche,
	avalancheFuji,
	base,
	baseGoerli,
	baseSepolia,
	bsc,
	bscTestnet,
	celo,
	celoAlfajores,
	classic,
	cronos,
	crossbell,
	evmos,
	evmosTestnet,
	fantom,
	fantomTestnet,
	filecoin,
	filecoinCalibration,
	filecoinHyperspace,
	gnosis,
	gnosisChiado,
	goerli,
	harmonyOne,
	holesky,
	localhost,
	mainnet,
	metis,
	metisGoerli,
	moonbaseAlpha,
	moonbeam,
	moonriver,
	okc,
	optimism,
	optimismGoerli,
	optimismSepolia,
	polygon,
	polygonMumbai,
	polygonZkEvm,
	polygonZkEvmTestnet,
	pulsechain,
	pulsechainV4,
	rollux,
	ronin,
	scroll,
	scrollSepolia,
	sepolia,
	skaleBlockBrawlers,
	skaleCalypso,
	skaleCalypsoTestnet,
	skaleCryptoBlades,
	skaleCryptoColosseum,
	skaleEuropa,
	skaleEuropaTestnet,
	skaleExorde,
	skaleHumanProtocol,
	skaleNebula,
	skaleNebulaTestnet,
	skaleRazor,
	skaleTitan,
	skaleTitanTestnet,
	songbird,
	syscoin,
	taraxa,
	telos,
	telosTestnet,
	thunderTestnet,
	wanchain,
	wanchainTestnet,
	zhejiang,
	zkSync,
	zora,
	zoraTestnet,
} from "viem/chains";

type WagmiWrapperProps = {
	children: ReactNode;
};

export const WagmiWrapper: React.FC<WagmiWrapperProps> = ({ children }) => {
	const config = createConfig({
		connectors: [
			injected(),
			metaMask(),
			walletConnect({
				projectId: "3fcc6bba6f1de962d911bb5b5c3dba68",
			}),
			safe(),
			coinbaseWallet(),
		],
		ssr: true,
		chains: [
			mainnet,
			sepolia,
			goerli,
			arbitrum,
			arbitrumGoerli,
			arbitrumNova,
			arbitrumSepolia,
			aurora,
			auroraTestnet,
			avalanche,
			avalancheFuji,
			base,
			baseGoerli,
			baseSepolia,
			bsc,
			bscTestnet,
			celo,
			celoAlfajores,
			classic,
			cronos,
			crossbell,
			evmos,
			evmosTestnet,
			fantom,
			fantomTestnet,
			filecoin,
			filecoinCalibration,
			filecoinHyperspace,
			gnosis,
			gnosisChiado,
			harmonyOne,
			holesky,
			localhost,
			metis,
			metisGoerli,
			moonbeam,
			moonbaseAlpha,
			moonriver,
			okc,
			optimism,
			optimismGoerli,
			optimismSepolia,
			polygon,
			polygonMumbai,
			polygonZkEvm,
			polygonZkEvmTestnet,
			pulsechain,
			pulsechainV4,
			rollux,
			ronin,
			scroll,
			scrollSepolia,
			skaleBlockBrawlers,
			skaleCalypso,
			skaleCalypsoTestnet,
			skaleCryptoBlades,
			skaleCryptoColosseum,
			skaleEuropa,
			skaleEuropaTestnet,
			skaleExorde,
			skaleHumanProtocol,
			skaleNebula,
			skaleNebulaTestnet,
			skaleRazor,
			skaleTitan,
			skaleTitanTestnet,
			songbird,
			syscoin,
			taraxa,
			telos,
			telosTestnet,
			thunderTestnet,
			wanchain,
			wanchainTestnet,
			zhejiang,
			zkSync,
			zora,
			zoraTestnet,
		],
	});
	return (
		<WagmiProvider config={config} reconnectOnMount={true}>
			{children}
		</WagmiProvider>
	);
};
